{
  "class": {
    "name": "Word.CustomXmlPartCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi 1.4",
      "status": null
    },
    "description": "Contains the collection of [Word.CustomXmlPart](/en-us/javascript/api/word/word.customxmlpart) objects.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "items",
      "type": "Word.CustomXmlPart[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Adds a new custom XML part to the document.",
      "signatures": [
        {
          "params": [
            {
              "name": "xml",
              "type": "string",
              "required": true,
              "description": "XML content. Must be a valid XML fragment."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Adds a custom XML part.\n// If you want to populate the CustomXml.namespaceUri property, you must include the xmlns attribute.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load([\"id\", \"namespaceUri\"]);\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(`Added custom XML part with namespace URI ${customXmlPart.namespaceUri}:`, readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartIdNS\", customXmlPart.id);\n\n  await context.sync();\n});",
          "output_code": null
        },
        {
          "description": null,
          "usage_code": "// Adds a custom XML part.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load(\"id\");\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(\"Added custom XML part:\", readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getByNamespace",
      "kind": "read",
      "description": "Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.",
      "signatures": [
        {
          "params": [
            {
              "name": "namespaceUri",
              "type": "string",
              "required": true,
              "description": "The namespace URI."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartScopedCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Gets the custom XML parts with the specified namespace URI.\nawait Word.run(async (context) => {\n  const namespaceUri = \"http://schemas.contoso.com/review/1.0\";\n  console.log(`Specified namespace URI: ${namespaceUri}`);\n  const scopedCustomXmlParts: Word.CustomXmlPartScopedCollection =\n    context.document.customXmlParts.getByNamespace(namespaceUri);\n  scopedCustomXmlParts.load(\"items\");\n  await context.sync();\n\n  console.log(`Number of custom XML parts found with this namespace: ${!scopedCustomXmlParts.items ? 0 : scopedCustomXmlParts.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getCount",
      "kind": "read",
      "description": "Gets the number of items in the collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<number>",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a custom XML part based on its ID.",
      "signatures": [
        {
          "params": [
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "ID or index of the custom XML part to be retrieved."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Queries a custom XML part for elements matching the search terms.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xpathToQueryFor = \"/contoso:Reviewers\";\n    const clientResult = customXmlPart.query(xpathToQueryFor, {\n      contoso: \"http://schemas.contoso.com/review/1.0\"\n    });\n\n    await context.sync();\n\n    console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);\n    for (let i = 0; i < clientResult.value.length; i++) {\n      console.log(clientResult.value[i]);\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to query.\");\n  }\n});",
          "output_code": null
        },
        {
          "description": null,
          "usage_code": "// Original XML: <Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Queries a custom XML part for elements matching the search terms.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xpathToQueryFor = \"/Reviewers/Reviewer\";\n    const clientResult = customXmlPart.query(xpathToQueryFor, {\n      contoso: \"http://schemas.contoso.com/review/1.0\"\n    });\n\n    await context.sync();\n\n    console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);\n    for (let i = 0; i < clientResult.value.length; i++) {\n      console.log(clientResult.value[i]);\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to query.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItemOrNullObject",
      "kind": "read",
      "description": "Gets a custom XML part based on its ID. If the CustomXmlPart doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "ID of the object to be retrieved."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.CustomXmlPartCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlPartCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.CustomXmlPartCollectionData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word"
    ]
  }
}