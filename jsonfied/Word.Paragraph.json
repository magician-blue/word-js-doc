{
  "class": {
    "name": "Word.Paragraph",
    "package": "word",
    "extends": [],
    "api_set": {
      "name": null,
      "status": null
    },
    "description": "Represents a single paragraph in a selection, range, content control, or document body.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml\n\nawait Word.run(async (context) => {\n  // The collection of paragraphs of the current selection returns the full paragraphs contained in it.\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  paragraph.load(\"text\");\n\n  await context.sync();\n  console.log(paragraph.text);\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "alignment",
      "type": "Word.Alignment | \"Mixed\" | \"Unknown\" | \"Left\" | \"Centered\" | \"Right\" | \"Justified\"",
      "description": "Specifies the alignment for a paragraph. The value can be 'left', 'centered', 'right', or 'justified'.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\n\nawait Word.run(async (context) => {\n  // Center last paragraph alignment.\n  context.document.body.paragraphs.getLast().alignment = \"Centered\";\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "borders",
      "type": "Word.BorderUniversalCollection",
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "contentControls",
      "type": "Word.ContentControlCollection",
      "description": "Gets the collection of content control objects in the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "endnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of endnotes in the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "fields",
      "type": "Word.FieldCollection",
      "description": "Gets the collection of fields in the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "firstLineIndent",
      "type": "number",
      "description": "Specifies the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.",
      "since": null,
      "examples": []
    },
    {
      "name": "font",
      "type": "Word.Font",
      "description": "Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.",
      "since": null,
      "examples": []
    },
    {
      "name": "footnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of footnotes in the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "inlinePictures",
      "type": "Word.InlinePictureCollection",
      "description": "Gets the collection of InlinePicture objects in the paragraph. The collection doesn't include floating images.",
      "since": null,
      "examples": []
    },
    {
      "name": "isLastParagraph",
      "type": "boolean",
      "description": "Indicates the paragraph is the last one inside its parent body.",
      "since": null,
      "examples": []
    },
    {
      "name": "isListItem",
      "type": "boolean",
      "description": "Checks whether the paragraph is a list item.",
      "since": null,
      "examples": []
    },
    {
      "name": "leftIndent",
      "type": "number",
      "description": "Specifies the left indent value, in points, for the paragraph.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\n\nawait Word.run(async (context) => {\n  // Indent the first paragraph.\n  context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points\n\n  return context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lineSpacing",
      "type": "number",
      "description": "Specifies the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\n\nawait Word.run(async (context) => {\n  // Adjust line spacing.\n  context.document.body.paragraphs.getFirst().lineSpacing = 20;\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lineUnitAfter",
      "type": "number",
      "description": "Specifies the amount of spacing, in grid lines, after the paragraph.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\n\nawait Word.run(async (context) => {\n  // Set the space (in line units) after the first paragraph.\n  context.document.body.paragraphs.getFirst().lineUnitAfter = 1;\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lineUnitBefore",
      "type": "number",
      "description": "Specifies the amount of spacing, in grid lines, before the paragraph.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\n\nawait Word.run(async (context) => {\n  // Set the space (in line units) before the first paragraph.\n  context.document.body.paragraphs.getFirst().lineUnitBefore = 1;\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "list",
      "type": "Word.List",
      "description": "Gets the List to which this paragraph belongs. Throws an ItemNotFound error if the paragraph isn't in a list.",
      "since": null,
      "examples": []
    },
    {
      "name": "listItem",
      "type": "Word.ListItem",
      "description": "Gets the ListItem for the paragraph. Throws an ItemNotFound error if the paragraph isn't part of a list.",
      "since": null,
      "examples": []
    },
    {
      "name": "listItemOrNullObject",
      "type": "Word.ListItem",
      "description": "Gets the ListItem for the paragraph. If the paragraph isn't part of a list, then this method returns an object with isNullObject = true. For further information, see “OrNullObject methods and properties”.",
      "since": null,
      "examples": []
    },
    {
      "name": "listOrNullObject",
      "type": "Word.List",
      "description": "Gets the List to which this paragraph belongs. If the paragraph isn't in a list, then this method returns an object with isNullObject = true. For further information, see “OrNullObject methods and properties”.",
      "since": null,
      "examples": []
    },
    {
      "name": "outlineLevel",
      "type": "number",
      "description": "Specifies the outline level for the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentBody",
      "type": "Word.Body",
      "description": "Gets the parent body of the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentContentControl",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the paragraph. Throws an ItemNotFound error if there isn't a parent content control.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentContentControlOrNullObject",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the paragraph. If there isn't a parent content control, then this method returns an object with isNullObject = true. For further information, see “OrNullObject methods and properties”.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTable",
      "type": "Word.Table",
      "description": "Gets the table that contains the paragraph. Throws an ItemNotFound error if it isn't contained in a table.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTableCell",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the paragraph. Throws an ItemNotFound error if it isn't contained in a table cell.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTableCellOrNullObject",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the paragraph. If it isn't contained in a table cell, then this method returns an object with isNullObject = true. For further information, see “OrNullObject methods and properties”.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTableOrNullObject",
      "type": "Word.Table",
      "description": "Gets the table that contains the paragraph. If it isn't contained in a table, then this method returns an object with isNullObject = true. For further information, see “OrNullObject methods and properties”.",
      "since": null,
      "examples": []
    },
    {
      "name": "range",
      "type": "Word.Range",
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "rightIndent",
      "type": "number",
      "description": "Specifies the right indent value, in points, for the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "shading",
      "type": "Word.ShadingUniversal",
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "shapes",
      "type": "Word.ShapeCollection",
      "description": "Gets the collection of shape objects anchored in the paragraph, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.",
      "since": null,
      "examples": []
    },
    {
      "name": "spaceAfter",
      "type": "number",
      "description": "Specifies the spacing, in points, after the paragraph.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\n\nawait Word.run(async (context) => {\n  // Set the space (in points) after the first paragraph.\n  context.document.body.paragraphs.getFirst().spaceAfter = 20;\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "spaceBefore",
      "type": "number",
      "description": "Specifies the spacing, in points, before the paragraph.",
      "since": null,
      "examples": []
    },
    {
      "name": "style",
      "type": "string",
      "description": "Specifies the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the \"styleBuiltIn\" property.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml\n\n// Applies the specified style to a paragraph.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name-to-use\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to apply.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else if (style.type != Word.StyleType.paragraph) {\n    console.log(`The '${styleName}' style isn't a paragraph style.`);\n  } else {\n    const body: Word.Body = context.document.body;\n    body.clear();\n    body.insertParagraph(\n      \"Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.\",\n      \"Start\"\n    );\n    const paragraph: Word.Paragraph = body.paragraphs.getFirst();\n    paragraph.style = style.nameLocal;\n    console.log(`'${styleName}' style applied to first paragraph.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "styleBuiltIn",
      "type": "Word.BuiltInStyleName | \"Other\" | \"Normal\" | \"Heading1\" | \"Heading2\" | \"Heading3\" | \"Heading4\" | \"Heading5\" | \"Heading6\" | \"Heading7\" | \"Heading8\" | \"Heading9\" | \"Toc1\" | \"Toc2\" | \"Toc3\" | \"Toc4\" | \"Toc5\" | \"Toc6\" | \"Toc7\" | \"Toc8\" | \"Toc9\" | \"FootnoteText\" | \"Header\" | \"Footer\" | \"Caption\" | \"FootnoteReference\" | \"EndnoteReference\" | \"EndnoteText\" | \"Title\" | \"Subtitle\" | \"Hyperlink\" | \"Strong\" | \"Emphasis\" | \"NoSpacing\" | \"ListParagraph\" | \"Quote\" | \"IntenseQuote\" | \"SubtleEmphasis\" | \"IntenseEmphasis\" | \"SubtleReference\" | \"IntenseReference\" | \"BookTitle\" | \"Bibliography\" | \"TocHeading\" | \"TableGrid\" | \"PlainTable1\" | \"PlainTable2\" | \"PlainTable3\" | \"PlainTable4\" | \"PlainTable5\" | \"TableGridLight\" | \"GridTable1Light\" | \"GridTable1Light_Accent1\" | \"GridTable1Light_Accent2\" | \"GridTable1Light_Accent3\" | \"GridTable1Light_Accent4\" | \"GridTable1Light_Accent5\" | \"GridTable1Light_Accent6\" | \"GridTable2\" | \"GridTable2_Accent1\" | \"GridTable2_Accent2\" | \"GridTable2_Accent3\" | \"GridTable2_Accent4\" | \"GridTable2_Accent5\" | \"GridTable2_Accent6\" | \"GridTable3\" | \"GridTable3_Accent1\" | \"GridTable3_Accent2\" | \"GridTable3_Accent3\" | \"GridTable3_Accent4\" | \"GridTable3_Accent5\" | \"GridTable3_Accent6\" | \"GridTable4\" | \"GridTable4_Accent1\" | \"GridTable4_Accent2\" | \"GridTable4_Accent3\" | \"GridTable4_Accent4\" | \"GridTable4_Accent5\" | \"GridTable4_Accent6\" | \"GridTable5Dark\" | \"GridTable5Dark_Accent1\" | \"GridTable5Dark_Accent2\" | \"GridTable5Dark_Accent3\" | \"GridTable5Dark_Accent4\" | \"GridTable5Dark_Accent5\" | \"GridTable5Dark_Accent6\" | \"GridTable6Colorful\" | \"GridTable6Colorful_Accent1\" | \"GridTable6Colorful_Accent2\" | \"GridTable6Colorful_Accent3\" | \"GridTable6Colorful_Accent4\" | \"GridTable6Colorful_Accent5\" | \"GridTable6Colorful_Accent6\" | \"GridTable7Colorful\" | \"GridTable7Colorful_Accent1\" | \"GridTable7Colorful_Accent2\" | \"GridTable7Colorful_Accent3\" | \"GridTable7Colorful_Accent4\" | \"GridTable7Colorful_Accent5\" | \"GridTable7Colorful_Accent6\" | \"ListTable1Light\" | \"ListTable1Light_Accent1\" | \"ListTable1Light_Accent2\" | \"ListTable1Light_Accent3\" | \"ListTable1Light_Accent4\" | \"ListTable1Light_Accent5\" | \"ListTable1Light_Accent6\" | \"ListTable2\" | \"ListTable2_Accent1\" | \"ListTable2_Accent2\" | \"ListTable2_Accent3\" | \"ListTable2_Accent4\" | \"ListTable2_Accent5\" | \"ListTable2_Accent6\" | \"ListTable3\" | \"ListTable3_Accent1\" | \"ListTable3_Accent2\" | \"ListTable3_Accent3\" | \"ListTable3_Accent4\" | \"ListTable3_Accent5\" | \"ListTable3_Accent6\" | \"ListTable4\" | \"ListTable4_Accent1\" | \"ListTable4_Accent2\" | \"ListTable4_Accent3\" | \"ListTable4_Accent4\" | \"ListTable4_Accent5\" | \"ListTable4_Accent6\" | \"ListTable5Dark\" | \"ListTable5Dark_Accent1\" | \"ListTable5Dark_Accent2\" | \"ListTable5Dark_Accent3\" | \"ListTable5Dark_Accent4\" | \"ListTable5Dark_Accent5\" | \"ListTable5Dark_Accent6\" | \"ListTable6Colorful\" | \"ListTable6Colorful_Accent1\" | \"ListTable6Colorful_Accent2\" | \"ListTable6Colorful_Accent3\" | \"ListTable6Colorful_Accent4\" | \"ListTable6Colorful_Accent5\" | \"ListTable6Colorful_Accent6\" | \"ListTable7Colorful\" | \"ListTable7Colorful_Accent1\" | \"ListTable7Colorful_Accent2\" | \"ListTable7Colorful_Accent3\" | \"ListTable7Colorful_Accent4\" | \"ListTable7Colorful_Accent5\" | \"ListTable7Colorful_Accent6\"",
      "description": "Specifies the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the \"style\" property.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml\n\nawait Word.run(async (context) => {\n    const paragraph: Word.Paragraph = context.document.body.insertParagraph(\"Timeline\", \"End\");\n    paragraph.styleBuiltIn = \"Heading2\";\n    const paragraph2: Word.Paragraph = context.document.body.insertParagraph(\"The Services shall commence on July 31, 2015, and shall continue through July 29, 2015.\", \"End\");\n    paragraph2.styleBuiltIn = \"Normal\";\n    const paragraph3: Word.Paragraph = context.document.body.insertParagraph(\"Project Costs by Phase\", \"End\");\n    paragraph3.styleBuiltIn = \"Heading2\";\n    // Note a content control with the title of \"ProjectCosts\" is added. Content will be replaced later.\n    const paragraph4: Word.Paragraph = context.document.body.insertParagraph(\"<Add Project Costs Here>\", \"End\");\n    paragraph4.styleBuiltIn = \"Normal\";\n    paragraph4.font.highlightColor = \"#FFFF00\";\n    const contentControl: Word.ContentControl = paragraph4.insertContentControl();\n    contentControl.title = \"ProjectCosts\";\n    const paragraph5: Word.Paragraph = context.document.body.insertParagraph(\"Project Team\", \"End\");\n    paragraph5.styleBuiltIn = \"Heading2\";\n    paragraph5.font.highlightColor = \"#FFFFFF\";\n    const paragraph6: Word.Paragraph = context.document.body.insertParagraph(\"Terms of Work\", \"End\");\n    paragraph6.styleBuiltIn = \"Heading1\";\n    const paragraph7: Word.Paragraph = context.document.body.insertParagraph(\"Contractor shall provide the Services and Deliverable(s) as follows:\", \"End\");\n    paragraph7.styleBuiltIn = \"Normal\";\n    const paragraph8: Word.Paragraph = context.document.body.insertParagraph(\"Out-of-Pocket Expenses / Invoice Procedures\", \"End\");\n    paragraph8.styleBuiltIn = \"Heading2\";\n    const paragraph9 : Word.Paragraph= context.document.body.insertParagraph(\"Client will be invoiced monthly for the consulting services and T&L expenses. Standard Contractor invoicing is assumed to be acceptable. Invoices are due upon receipt. client will be invoiced all costs associated with out-of-pocket expenses (including, without limitation, costs and expenses associated with meals, lodging, local transportation and any other applicable business expenses) listed on the invoice as a separate line item. Reimbursement for out-of-pocket expenses in connection with performance of this SOW, when authorized and up to the limits set forth in this SOW, shall be in accordance with Client's then-current published policies governing travel and associated business expenses, which information shall be provided by the Client Project Manager.\", \"End\");\n    paragraph9.styleBuiltIn = \"Normal\";\n    // Insert a page break at the end of the document.\n    context.document.body.insertBreak(\"Page\", \"End\");\n\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "tableNestingLevel",
      "type": "number",
      "description": "Gets the level of the paragraph's table. It returns 0 if the paragraph isn't in a table.",
      "since": null,
      "examples": []
    },
    {
      "name": "text",
      "type": "string",
      "description": "Gets the text of the paragraph.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml\n\nawait Word.run(async (context) => {\n  // The collection of paragraphs of the current selection returns the full paragraphs contained in it.\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  paragraph.load(\"text\");\n\n  await context.sync();\n  console.log(paragraph.text);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "uniqueLocalId",
      "type": "string",
      "description": "Gets a string that represents the paragraph identifier in the current session. ID is in standard 8-4-4-4-12 GUID format without curly braces and differs across sessions and coauthors.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Registers event handlers.\nawait Word.run(async (context) => {\n  eventContexts[0] = context.document.onParagraphAdded.add(paragraphChanged);\n  eventContexts[1] = context.document.onParagraphChanged.add(paragraphChanged);\n\n  eventContexts[2] = context.document.onAnnotationClicked.add(onClickedHandler);\n  eventContexts[3] = context.document.onAnnotationHovered.add(onHoveredHandler);\n  eventContexts[4] = context.document.onAnnotationInserted.add(onInsertedHandler);\n  eventContexts[5] = context.document.onAnnotationRemoved.add(onRemovedHandler);\n  eventContexts[6] = context.document.onAnnotationPopupAction.add(onPopupActionHandler);\n\n  await context.sync();\n\n  console.log(\"Event handlers registered.\");\n});",
          "output_code": null
        },
        {
          "description": null,
          "usage_code": "async function paragraphChanged(args: Word.ParagraphChangedEventArgs) {\n  await Word.run(async (context) => {\n    const results = [];\n    for (let id of args.uniqueLocalIds) {\n      let para = context.document.getParagraphByUniqueLocalId(id);\n      para.load(\"uniqueLocalId\");\n\n      results.push({ para: para, text: para.getText() });\n    }\n\n    await context.sync();\n\n    for (let result of results) {\n      console.log(`${args.type}: ID ${result.para.uniqueLocalId}:-`, result.text.value);\n    }\n  });\n}",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "attachToList",
      "kind": null,
      "description": "Lets the paragraph join an existing list at the specified level. Fails if the paragraph cannot join the list or if the paragraph is already a list item.",
      "signatures": [
        {
          "params": [
            {
              "name": "listId",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "level",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "clear",
      "kind": "delete",
      "description": "Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for all of the paragraphs.\n    paragraphs.load('style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a command to clear the contents of the first paragraph.\n    paragraphs.items[0].clear();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Cleared the contents of the first paragraph.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "closeUp",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the paragraph and its content from the document.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the text property for all of the paragraphs.\n    paragraphs.load('text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a command to delete the first paragraph.\n    paragraphs.items[0].delete();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Deleted the first paragraph.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "detachFromList",
      "kind": null,
      "description": "Moves this paragraph out of its list, if the paragraph is a list item.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getAnnotations",
      "kind": "read",
      "description": "Gets annotations set on this Paragraph object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getComments",
      "kind": "read",
      "description": "Gets comments associated with the paragraph.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getContentControls",
      "kind": "read",
      "description": "Gets the currently supported content controls in the paragraph.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getHtml",
      "kind": "read",
      "description": "Gets an HTML representation of the paragraph object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use Paragraph.getOoxml() and convert the returned XML to HTML.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for all of the paragraphs.\n    paragraphs.load('style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a set of commands to get the HTML of the first paragraph.\n    const html = paragraphs.items[0].getHtml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Paragraph HTML: ' + html.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getNext",
      "kind": "read",
      "description": "Gets the next paragraph. Throws an ItemNotFound error if the paragraph is the last one.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getNextOrNullObject",
      "kind": "read",
      "description": "Gets the next paragraph. If the paragraph is the last one, then this method returns an object with isNullObject = true. For further information, see “OrNullObject methods and properties”.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getOoxml",
      "kind": "read",
      "description": "Gets the Office Open XML (OOXML) representation of the paragraph object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    paragraphs.load({select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a set of commands to get the OOXML of the first paragraph.\n    const ooxml = paragraphs.items[0].getOoxml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Paragraph OOXML: ' + ooxml.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getPrevious",
      "kind": "read",
      "description": "Gets the previous paragraph. Throws an ItemNotFound error if the paragraph is the first one.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getPreviousOrNullObject",
      "kind": "read",
      "description": "Gets the previous paragraph. If the paragraph is the first one, then this method returns an object with isNullObject = true. For further information, see “OrNullObject methods and properties”.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the text property for all of the paragraphs.\n    paragraphs.load('text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue commands to create a proxy object for the next-to-last paragraph.\n    const indexOfLastParagraph = paragraphs.items.length - 1;\n    const precedingParagraph = paragraphs.items[indexOfLastParagraph].getPreviousOrNullObject();\n\n    // Queue a command to load the text of the preceding paragraph.\n    precedingParagraph.load('text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    if (precedingParagraph.isNullObject) {\n        console.log('There are no paragraphs before the current one.');\n    } else {\n        console.log('The preceding paragraph is: ' + precedingParagraph.text);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getRange",
      "kind": "read",
      "description": "Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.",
      "signatures": [
        {
          "params": [
            {
              "name": "rangeLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml\n\nawait Word.run(async (context) => {\n  // Get the complete sentence (as range) associated with the insertion point.\n  const sentences: Word.RangeCollection = context.document\n    .getSelection()\n    .getTextRanges([\".\"] /* Using the \".\" as delimiter */, false /*means without trimming spaces*/);\n  sentences.load(\"$none\");\n  await context.sync();\n\n  // Expand the range to the end of the paragraph to get all the complete sentences.\n  const sentencesToTheEndOfParagraph: Word.RangeCollection = sentences.items[0]\n    .getRange()\n    .expandTo(\n      context.document\n        .getSelection()\n        .paragraphs.getFirst()\n        .getRange(Word.RangeLocation.end)\n    )\n    .getTextRanges([\".\"], false /* Don't trim spaces*/);\n  sentencesToTheEndOfParagraph.load(\"text\");\n  await context.sync();\n\n  for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {\n    console.log(sentencesToTheEndOfParagraph.items[i].text);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getReviewedText",
      "kind": "read",
      "description": "Gets reviewed text based on ChangeTrackingVersion selection.",
      "signatures": [
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getText",
      "kind": "read",
      "description": "Returns the text of the paragraph. This excludes equations, graphics (e.g., images, videos, drawings), and special characters that mark various content (e.g., for content controls, fields, comments, footnotes, endnotes). By default, hidden text and text marked as deleted are excluded.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getTextRanges",
      "kind": "read",
      "description": "Gets the text ranges in the paragraph by using punctuation marks and/or other ending marks.",
      "signatures": [
        {
          "params": [
            {
              "name": "endingMarks",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimSpacing",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getTrackedChanges",
      "kind": "read",
      "description": "Gets the collection of the TrackedChange objects in the paragraph.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "indent",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "indentCharacterWidth",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "indentFirstLineCharacterWidth",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertAnnotations",
      "kind": "create",
      "description": "Inserts annotations on this Paragraph object.",
      "signatures": [
        {
          "params": [
            {
              "name": "annotations",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Adds annotations to the selected paragraph.\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  const options: Word.CritiquePopupOptions = {\n    brandingTextResourceId: \"PG.TabLabel\",\n    subtitleResourceId: \"PG.HelpCommand.TipTitle\",\n    titleResourceId: \"PG.HelpCommand.Label\",\n    suggestions: [\"suggestion 1\", \"suggestion 2\", \"suggestion 3\"]\n  };\n  const critique1: Word.Critique = {\n    colorScheme: Word.CritiqueColorScheme.red,\n    start: 1,\n    length: 3,\n    popupOptions: options\n  };\n  const critique2: Word.Critique = {\n    colorScheme: Word.CritiqueColorScheme.green,\n    start: 6,\n    length: 1,\n    popupOptions: options\n  };\n  const critique3: Word.Critique = {\n    colorScheme: Word.CritiqueColorScheme.blue,\n    start: 10,\n    length: 3,\n    popupOptions: options\n  };\n  const critique4: Word.Critique = {\n    colorScheme: Word.CritiqueColorScheme.lavender,\n    start: 14,\n    length: 3,\n    popupOptions: options\n  };\n  const critique5: Word.Critique = {\n    colorScheme: Word.CritiqueColorScheme.berry,\n    start: 18,\n    length: 10,\n    popupOptions: options\n  };\n  const annotationSet: Word.AnnotationSet = {\n    critiques: [critique1, critique2, critique3, critique4, critique5]\n  };\n\n  const annotationIds = paragraph.insertAnnotations(annotationSet);\n\n  await context.sync();\n\n  console.log(\"Annotations inserted:\", annotationIds.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertBreak",
      "kind": "create",
      "description": "Inserts a break at the specified location in the main document.",
      "signatures": [
        {
          "params": [
            {
              "name": "breakType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    paragraphs.load({select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a command to get the first paragraph.\n    const paragraph = paragraphs.items[0];\n\n    // Queue a command to insert a page break after the first paragraph.\n    paragraph.insertBreak(Word.BreakType.page, Word.InsertLocation.after);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Inserted a page break after the paragraph.');\n});",
          "output_code": null
        },
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-line-and-page-breaks.yaml\n\nWord.run(async (context) => {\n  context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, \"After\");\n\n  await context.sync();\n  console.log(\"success\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertCanvas",
      "kind": "create",
      "description": "Inserts a floating canvas in front of text with its anchor at the beginning of the paragraph.",
      "signatures": [
        {
          "params": [
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertContentControl",
      "kind": "create",
      "description": "Wraps the Paragraph object with a content control.",
      "signatures": [
        {
          "params": [
            {
              "name": "contentControlType",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    paragraphs.load({select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a command to get the first paragraph.\n    const paragraph = paragraphs.items[0];\n\n    // Queue a command to wrap the first paragraph in a rich text content control.\n    paragraph.insertContentControl();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Wrapped the first paragraph in a content control.');\n});",
          "output_code": null
        },
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-content-controls.yaml\n\n// Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.\nawait Word.run(async (context) => {\n  let paragraphs = context.document.body.paragraphs;\n  paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n\n  await context.sync();\n\n  for (let i = 0; i < paragraphs.items.length; i++) {\n    let contentControl = paragraphs.items[i].insertContentControl();\n    // For even, tag \"even\".\n    if (i % 2 === 0) {\n      contentControl.tag = \"even\";\n    } else {\n      contentControl.tag = \"odd\";\n    }\n  }\n  console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertFileFromBase64",
      "kind": "create",
      "description": "Inserts a document into the paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64File",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertGeometricShape",
      "kind": "create",
      "description": "Inserts a geometric shape in front of text with its anchor at the beginning of the paragraph.",
      "signatures": [
        {
          "params": [
            {
              "name": "geometricShapeType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "geometricShapeType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertHtml",
      "kind": "create",
      "description": "Inserts HTML into the paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "html",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    paragraphs.load({select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a command to get the first paragraph.\n    const paragraph = paragraphs.items[0];\n\n    // Queue a command to insert HTML content at the end of the first paragraph.\n    paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Inserted HTML content at the end of the first paragraph.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertInlinePictureFromBase64",
      "kind": "create",
      "description": "Inserts a picture into the paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64EncodedImage",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for all of the paragraphs.\n    paragraphs.load('style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Queue a command to get the first paragraph.\n    const paragraph = paragraphs.items[0];\n\n    const b64encodedImg = \"iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC\";\n\n    // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.\n    paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Added an image to the first paragraph.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertOoxml",
      "kind": "create",
      "description": "Inserts OOXML into the paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "ooxml",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertParagraph",
      "kind": "create",
      "description": "Inserts a paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "paragraphText",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertPictureFromBase64",
      "kind": "create",
      "description": "Inserts a floating picture in front of text with its anchor at the beginning of the paragraph.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64EncodedImage",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertTable",
      "kind": "create",
      "description": "Inserts a table with the specified number of rows and columns.",
      "signatures": [
        {
          "params": [
            {
              "name": "rowCount",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "columnCount",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "values",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertText",
      "kind": "create",
      "description": "Inserts text into the paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "text",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-in-different-locations.yaml\n\nawait Word.run(async (context) => {\n  // Replace the last paragraph.\n  const range: Word.Range = context.document.body.paragraphs.getLast().insertText(\"Just replaced the last paragraph!\", \"Replace\");\n  range.font.highlightColor = \"black\";\n  range.font.color = \"white\";\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertTextBox",
      "kind": "create",
      "description": "Inserts a floating text box in front of text with its anchor at the beginning of the paragraph.",
      "signatures": [
        {
          "params": [
            {
              "name": "text",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-shapes-text-boxes.yaml\n\nawait Word.run(async (context) => {\n  // Inserts a text box at the beginning of the first paragraph in header.\n  const headerFooterBody: Word.Body = context.document.sections.getFirst().getHeader(Word.HeaderFooterType.primary);\n  headerFooterBody.load(\"paragraphs\");\n  const firstParagraph: Word.Paragraph = headerFooterBody.paragraphs.getFirst();\n  const insertShapeOptions: Word.InsertShapeOptions = {\n    top: 0,\n    left: 0,\n    height: 100,\n    width: 100\n  };\n  const newTextBox: Word.Shape = firstParagraph.insertTextBox(\"placeholder text\", insertShapeOptions);\n  newTextBox.select();\n  await context.sync();\n\n  console.log(\"Inserted a text box at the beginning of the first paragraph in the header.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "joinList",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "next",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "openOrCloseUp",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "openUp",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outdent",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outlineDemote",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outlineDemoteToBody",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outlinePromote",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "previous",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "reset",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "resetAdvanceTo",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "search",
      "kind": null,
      "description": "Performs a search with the specified SearchOptions on the scope of the paragraph object. The search results are a collection of range objects.",
      "signatures": [
        {
          "params": [
            {
              "name": "searchText",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "searchOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "select",
      "kind": null,
      "description": "Selects and navigates the Word UI to the paragraph.",
      "signatures": [
        {
          "params": [
            {
              "name": "selectionMode",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "selectionMode",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/scroll-to-range.yaml\n\nawait Word.run(async (context) => {\n  // If select is called with no parameters, it selects the object.\n  context.document.body.paragraphs.getLast().select();\n\n  await context.sync();\n});\n\n...\n\nawait Word.run(async (context) => {\n  // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.\n  context.document.body.paragraphs.getLast().select(Word.SelectionMode.end);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "selectNumber",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "separateList",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/multiple-property-set.yaml\n\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.body.paragraphs.getFirst();\n  paragraph.set({\n    leftIndent: 30,\n    font: {\n      bold: true,\n      color: \"red\"\n    }\n  });\n\n  await context.sync();\n});\n\n...\n\nawait Word.run(async (context) => {\n  const firstParagraph: Word.Paragraph = context.document.body.paragraphs.getFirst();\n  const secondParagraph: Word.Paragraph = firstParagraph.getNext();\n  firstParagraph.load(\"text, font/color, font/bold, leftIndent\");\n\n  await context.sync();\n\n  secondParagraph.set(firstParagraph);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "space1",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "space1Pt5",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "space2",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "split",
      "kind": null,
      "description": "Splits the paragraph into child ranges by using delimiters.",
      "signatures": [
        {
          "params": [
            {
              "name": "delimiters",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimDelimiters",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimSpacing",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/split-words-of-first-paragraph.yaml\n\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.body.paragraphs.getFirst();\n  const words = paragraph.split([\" \"], true /* trimDelimiters*/, true /* trimSpaces */);\n  words.load(\"text\");\n\n  await context.sync();\n\n  for (let i = 0; i < words.items.length; i++) {\n    if (i >= 1) {\n      words.items[i - 1].font.highlightColor = \"#FFFFFF\";\n    }\n    words.items[i].font.highlightColor = \"#FFFF00\";\n\n    await context.sync();\n    await pause(200);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "startNewList",
      "kind": null,
      "description": "Starts a new list with this paragraph. Fails if the paragraph is already a list item.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml\n\n// This example starts a new list with the second paragraph.\nawait Word.run(async (context) => {\n  const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;\n  paragraphs.load(\"$none\");\n\n  await context.sync();\n\n  // Start new list using the second paragraph.\n  const list: Word.List = paragraphs.items[1].startNewList();\n  list.load(\"$none\");\n\n  await context.sync();\n\n  // To add new items to the list, use Start or End on the insertLocation parameter.\n  list.insertParagraph(\"New list item at the start of the list\", \"Start\");\n  const paragraph: Word.Paragraph = list.insertParagraph(\"New list item at the end of the list (set to list level 5)\", \"End\");\n\n  // Set up list level for the list item.\n  paragraph.listItem.level = 4;\n\n  // To add paragraphs outside the list, use Before or After.\n  list.insertParagraph(\"New paragraph goes after (not part of the list)\", \"After\");\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "tabHangingIndent",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "tabIndent",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.Paragraph object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.ParagraphData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word"
    ]
  }
}