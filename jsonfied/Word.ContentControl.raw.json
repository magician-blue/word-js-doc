{
  "class": {
    "name": "ContentControl",
    "package": "word",
    "extends": ["OfficeExtension.ClientObject"],
    "api_set": {
      "name": "WordApi",
      "status": "1.1"
    },
    "description": "Represents a content control. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only rich text, plain text, checkbox, dropdown list, and combo box content controls are supported.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the content controls collection.\n    const contentControls = context.document.contentControls;\n\n    // Queue a command to load the id property for all of the content controls.\n    contentControls.load('id');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    if (contentControls.items.length === 0) {\n        console.log('No content control found.');\n    }\n    else {\n        // Queue a command to load the properties on the first content control.\n        contentControls.items[0].load(  'appearance,' +\n                                        'cannotDelete,' +\n                                        'cannotEdit,' +\n                                        'color,' +\n                                        'id,' +\n                                        'placeHolderText,' +\n                                        'removeWhenEdited,' +\n                                        'title,' +\n                                        'text,' +\n                                        'type,' +\n                                        'style,' +\n                                        'tag,' +\n                                        'font/size,' +\n                                        'font/name,' +\n                                        'font/color');\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        await context.sync();\n        console.log('Property values of the first content control:' +\n            '   ----- appearance: ' + contentControls.items[0].appearance +\n            '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +\n            '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +\n            '   ----- color: ' + contentControls.items[0].color +\n            '   ----- id: ' + contentControls.items[0].id +\n            '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +\n            '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +\n            '   ----- title: ' + contentControls.items[0].title +\n            '   ----- text: ' + contentControls.items[0].text +\n            '   ----- type: ' + contentControls.items[0].type +\n            '   ----- style: ' + contentControls.items[0].style +\n            '   ----- tag: ' + contentControls.items[0].tag +\n            '   ----- font size: ' + contentControls.items[0].font.size +\n            '   ----- font name: ' + contentControls.items[0].font.name +\n            '   ----- font color: ' + contentControls.items[0].font.color);\n    }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "appearance",
      "type": "Word.ContentControlAppearance | \"BoundingBox\" | \"Tags\" | \"Hidden\"",
      "description": "Specifies the appearance of the content control. The value can be 'BoundingBox', 'Tags', or 'Hidden'.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "buildingBlockGalleryContentControl",
      "type": "Word.BuildingBlockGalleryContentControl",
      "description": "Gets the building block gallery-related data if the content control's Word.ContentControlType is BuildingBlockGallery. It's null otherwise.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "cannotDelete",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the user can delete the content control. Mutually exclusive with removeWhenEdited.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "cannotEdit",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the user can edit the contents of the content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "checkboxContentControl",
      "type": "Word.CheckboxContentControl",
      "description": "Gets the data of the content control when its type is CheckBox. It's null otherwise.",
      "since": "WordApi 1.7",
      "examples": [
        {
          "description": "Toggles the isChecked property of the first checkbox content control found in the selection.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-checkbox-content-control.yaml\n\n// Toggles the isChecked property of the first checkbox content control found in the selection.\nawait Word.run(async (context) => {\n  const selectedRange: Word.Range = context.document.getSelection();\n  let selectedContentControl = selectedRange\n    .getContentControls({\n      types: [Word.ContentControlType.checkBox]\n    })\n    .getFirstOrNullObject();\n  selectedContentControl.load(\"id,checkboxContentControl/isChecked\");\n\n  await context.sync();\n\n  if (selectedContentControl.isNullObject) {\n    const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;\n    parentContentControl.load(\"id,type,checkboxContentControl/isChecked\");\n    await context.sync();\n\n    if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.checkBox) {\n      console.warn(\"No checkbox content control is currently selected.\");\n      return;\n    } else {\n      selectedContentControl = parentContentControl;\n    }\n  }\n\n  const isCheckedBefore = selectedContentControl.checkboxContentControl.isChecked;\n  console.log(\"isChecked state before:\", `id: ${selectedContentControl.id} ... isChecked: ${isCheckedBefore}`);\n  selectedContentControl.checkboxContentControl.isChecked = !isCheckedBefore;\n  selectedContentControl.load(\"id,checkboxContentControl/isChecked\");\n  await context.sync();\n\n  console.log(\n    \"isChecked state after:\",\n    `id: ${selectedContentControl.id} ... isChecked: ${selectedContentControl.checkboxContentControl.isChecked}`\n  );\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "color",
      "type": "string",
      "description": "Specifies the color of the content control. Color is specified in '#RRGGBB' format or by using the color name.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "comboBoxContentControl",
      "type": "Word.ComboBoxContentControl",
      "description": "Gets the data of the content control when its type is ComboBox. It's null otherwise.",
      "since": "WordApi 1.9",
      "examples": [
        {
          "description": "Adds the provided list item to the first combo box content control in the selection.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-combo-box-content-control.yaml\n\n// Adds the provided list item to the first combo box content control in the selection.\nawait Word.run(async (context) => {\n  const listItemText = (document.getElementById(\"item-to-add\") as HTMLInputElement).value.trim();\n  const selectedRange: Word.Range = context.document.getSelection();\n  let selectedContentControl = selectedRange\n    .getContentControls({\n      types: [Word.ContentControlType.comboBox]\n    })\n    .getFirstOrNullObject();\n  selectedContentControl.load(\"id,comboBoxContentControl\");\n  await context.sync();\n\n  if (selectedContentControl.isNullObject) {\n    const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;\n    parentContentControl.load(\"id,type,comboBoxContentControl\");\n    await context.sync();\n\n    if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.comboBox) {\n      console.warn(\"No combo box content control is currently selected.\");\n      return;\n    } else {\n      selectedContentControl = parentContentControl;\n    }\n  }\n\n  selectedContentControl.comboBoxContentControl.addListItem(listItemText);\n  await context.sync();\n\n  console.log(`List item added to control with ID ${selectedContentControl.id}: ${listItemText}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "contentControls",
      "type": "Word.ContentControlCollection",
      "description": "Gets the collection of content control objects in the content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "datePickerContentControl",
      "type": "Word.DatePickerContentControl",
      "description": "Gets the date picker-related data if the content control's Word.ContentControlType is DatePicker. It's null otherwise.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "dropDownListContentControl",
      "type": "Word.DropDownListContentControl",
      "description": "Gets the data of the content control when its type is DropDownList. It's null otherwise.",
      "since": "WordApi 1.9",
      "examples": [
        {
          "description": "Adds the provided list item to the first dropdown list content control in the selection.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-dropdown-list-content-control.yaml\n\n// Adds the provided list item to the first dropdown list content control in the selection.\nawait Word.run(async (context) => {\n  const listItemText = (document.getElementById(\"item-to-add\") as HTMLInputElement).value.trim();\n  const selectedRange: Word.Range = context.document.getSelection();\n  let selectedContentControl = selectedRange\n    .getContentControls({\n      types: [Word.ContentControlType.dropDownList]\n    })\n    .getFirstOrNullObject();\n  selectedContentControl.load(\"id,dropDownListContentControl\");\n  await context.sync();\n\n  if (selectedContentControl.isNullObject) {\n    const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;\n    parentContentControl.load(\"id,type,dropDownListContentControl\");\n    await context.sync();\n\n    if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.dropDownList) {\n      console.warn(\"No dropdown list content control is currently selected.\");\n      return;\n    } else {\n      selectedContentControl = parentContentControl;\n    }\n  }\n\n  selectedContentControl.dropDownListContentControl.addListItem(listItemText);\n  await context.sync();\n\n  console.log(`List item added to control with ID ${selectedContentControl.id}: ${listItemText}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "endnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of endnotes in the content control.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "fields",
      "type": "Word.FieldCollection",
      "description": "Gets the collection of field objects in the content control.",
      "since": "WordApi 1.4",
      "examples": []
    },
    {
      "name": "font",
      "type": "Word.Font",
      "description": "Gets the text format of the content control. Use this to get and set font name, size, color, and other properties.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "footnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of footnotes in the content control.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "groupContentControl",
      "type": "Word.GroupContentControl",
      "description": "Gets the group-related data if the content control's Word.ContentControlType is Group. It's null otherwise.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "id",
      "type": "number",
      "description": "Gets an integer that represents the content control identifier.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "inlinePictures",
      "type": "Word.InlinePictureCollection",
      "description": "Gets the collection of InlinePicture objects in the content control. The collection doesn't include floating images.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "lists",
      "type": "Word.ListCollection",
      "description": "Gets the collection of list objects in the content control.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "paragraphs",
      "type": "Word.ParagraphCollection",
      "description": "Gets the collection of paragraph objects in the content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "parentBody",
      "type": "Word.Body",
      "description": "Gets the parent body of the content control.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentContentControl",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the content control. Throws an ItemNotFound error if there isn't a parent content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "parentContentControlOrNullObject",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the content control. If there isn't a parent content control, then this method will return an object with its isNullObject property set to true. For further information, see *OrNullObject methods and properties.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTable",
      "type": "Word.Table",
      "description": "Gets the table that contains the content control. Throws an ItemNotFound error if it isn't contained in a table.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTableCell",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the content control. Throws an ItemNotFound error if it isn't contained in a table cell.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTableCellOrNullObject",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the content control. If it isn't contained in a table cell, then this method will return an object with its isNullObject property set to true. For further information, see *OrNullObject methods and properties.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTableOrNullObject",
      "type": "Word.Table",
      "description": "Gets the table that contains the content control. If it isn't contained in a table, then this method will return an object with its isNullObject property set to true. For further information, see *OrNullObject methods and properties.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "pictureContentControl",
      "type": "Word.PictureContentControl",
      "description": "Gets the picture-related data if the content control's Word.ContentControlType is Picture. It's null otherwise.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "placeholderText",
      "type": "string",
      "description": "Specifies the placeholder text of the content control. Dimmed text will be displayed when the content control is empty.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "removeWhenEdited",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the content control is removed after it is edited. Mutually exclusive with cannotDelete.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "repeatingSectionContentControl",
      "type": "Word.RepeatingSectionContentControl",
      "description": "Gets the repeating section-related data if the content control's Word.ContentControlType is RepeatingSection. It's null otherwise.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "style",
      "type": "string",
      "description": "Specifies the style name for the content control. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the \"styleBuiltIn\" property.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "styleBuiltIn",
      "type": "Word.BuiltInStyleName | \"Other\" | \"Normal\" | \"Heading1\" | \"Heading2\" | \"Heading3\" | \"Heading4\" | \"Heading5\" | \"Heading6\" | \"Heading7\" | \"Heading8\" | \"Heading9\" | \"Toc1\" | \"Toc2\" | \"Toc3\" | \"Toc4\" | \"Toc5\" | \"Toc6\" | \"Toc7\" | \"Toc8\" | \"Toc9\" | \"FootnoteText\" | \"Header\" | \"Footer\" | \"Caption\" | \"FootnoteReference\" | \"EndnoteReference\" | \"EndnoteText\" | \"Title\" | \"Subtitle\" | \"Hyperlink\" | \"Strong\" | \"Emphasis\" | \"NoSpacing\" | \"ListParagraph\" | \"Quote\" | \"IntenseQuote\" | \"SubtleEmphasis\" | \"IntenseEmphasis\" | \"SubtleReference\" | \"IntenseReference\" | \"BookTitle\" | \"Bibliography\" | \"TocHeading\" | \"TableGrid\" | \"PlainTable1\" | \"PlainTable2\" | \"PlainTable3\" | \"PlainTable4\" | \"PlainTable5\" | \"TableGridLight\" | \"GridTable1Light\" | \"GridTable1Light_Accent1\" | \"GridTable1Light_Accent2\" | \"GridTable1Light_Accent3\" | \"GridTable1Light_Accent4\" | \"GridTable1Light_Accent5\" | \"GridTable1Light_Accent6\" | \"GridTable2\" | \"GridTable2_Accent1\" | \"GridTable2_Accent2\" | \"GridTable2_Accent3\" | \"GridTable2_Accent4\" | \"GridTable2_Accent5\" | \"GridTable2_Accent6\" | \"GridTable3\" | \"GridTable3_Accent1\" | \"GridTable3_Accent2\" | \"GridTable3_Accent3\" | \"GridTable3_Accent4\" | \"GridTable3_Accent5\" | \"GridTable3_Accent6\" | \"GridTable4\" | \"GridTable4_Accent1\" | \"GridTable4_Accent2\" | \"GridTable4_Accent3\" | \"GridTable4_Accent4\" | \"GridTable4_Accent5\" | \"GridTable4_Accent6\" | \"GridTable5Dark\" | \"GridTable5Dark_Accent1\" | \"GridTable5Dark_Accent2\" | \"GridTable5Dark_Accent3\" | \"GridTable5Dark_Accent4\" | \"GridTable5Dark_Accent5\" | \"GridTable5Dark_Accent6\" | \"GridTable6Colorful\" | \"GridTable6Colorful_Accent1\" | \"GridTable6Colorful_Accent2\" | \"GridTable6Colorful_Accent3\" | \"GridTable6Colorful_Accent4\" | \"GridTable6Colorful_Accent5\" | \"GridTable6Colorful_Accent6\" | \"GridTable7Colorful\" | \"GridTable7Colorful_Accent1\" | \"GridTable7Colorful_Accent2\" | \"GridTable7Colorful_Accent3\" | \"GridTable7Colorful_Accent4\" | \"GridTable7Colorful_Accent5\" | \"GridTable7Colorful_Accent6\" | \"ListTable1Light\" | \"ListTable1Light_Accent1\" | \"ListTable1Light_Accent2\" | \"ListTable1Light_Accent3\" | \"ListTable1Light_Accent4\" | \"ListTable1Light_Accent5\" | \"ListTable1Light_Accent6\" | \"ListTable2\" | \"ListTable2_Accent1\" | \"ListTable2_Accent2\" | \"ListTable2_Accent3\" | \"ListTable2_Accent4\" | \"ListTable2_Accent5\" | \"ListTable2_Accent6\" | \"ListTable3\" | \"ListTable3_Accent1\" | \"ListTable3_Accent2\" | \"ListTable3_Accent3\" | \"ListTable3_Accent4\" | \"ListTable3_Accent5\" | \"ListTable3_Accent6\" | \"ListTable4\" | \"ListTable4_Accent1\" | \"ListTable4_Accent2\" | \"ListTable4_Accent3\" | \"ListTable4_Accent4\" | \"ListTable4_Accent5\" | \"ListTable4_Accent6\" | \"ListTable5Dark\" | \"ListTable5Dark_Accent1\" | \"ListTable5Dark_Accent2\" | \"ListTable5Dark_Accent3\" | \"ListTable5Dark_Accent4\" | \"ListTable5Dark_Accent5\" | \"ListTable5Dark_Accent6\" | \"ListTable6Colorful\" | \"ListTable6Colorful_Accent1\" | \"ListTable6Colorful_Accent2\" | \"ListTable6Colorful_Accent3\" | \"ListTable6Colorful_Accent4\" | \"ListTable6Colorful_Accent5\" | \"ListTable6Colorful_Accent6\" | \"ListTable7Colorful\" | \"ListTable7Colorful_Accent1\" | \"ListTable7Colorful_Accent2\" | \"ListTable7Colorful_Accent3\" | \"ListTable7Colorful_Accent4\" | \"ListTable7Colorful_Accent5\" | \"ListTable7Colorful_Accent6\"",
      "description": "Specifies the built-in style name for the content control. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the \"style\" property.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "subtype",
      "type": "Word.ContentControlType | \"Unknown\" | \"RichTextInline\" | \"RichTextParagraphs\" | \"RichTextTableCell\" | \"RichTextTableRow\" | \"RichTextTable\" | \"PlainTextInline\" | \"PlainTextParagraph\" | \"Picture\" | \"BuildingBlockGallery\" | \"CheckBox\" | \"ComboBox\" | \"DropDownList\" | \"DatePicker\" | \"RepeatingSection\" | \"RichText\" | \"PlainText\" | \"Group\"",
      "description": "Gets the content control subtype. The subtype can be 'RichTextInline', 'RichTextParagraphs', 'RichTextTableCell', 'RichTextTableRow' and 'RichTextTable' for rich text content controls, or 'PlainTextInline' and 'PlainTextParagraph' for plain text content controls, or 'CheckBox' for checkbox content controls.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "tables",
      "type": "Word.TableCollection",
      "description": "Gets the collection of table objects in the content control.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "tag",
      "type": "string",
      "description": "Specifies a tag to identify a content control.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": "Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-content-controls.yaml\n\n// Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.\nawait Word.run(async (context) => {\n  let paragraphs = context.document.body.paragraphs;\n  paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n\n  await context.sync();\n\n  for (let i = 0; i < paragraphs.items.length; i++) {\n    let contentControl = paragraphs.items[i].insertContentControl();\n    // For even, tag \"even\".\n    if (i % 2 === 0) {\n      contentControl.tag = \"even\";\n    } else {\n      contentControl.tag = \"odd\";\n    }\n  }\n  console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "text",
      "type": "string",
      "description": "Gets the text of the content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "title",
      "type": "string",
      "description": "Specifies the title for a content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "type",
      "type": "Word.ContentControlType | \"Unknown\" | \"RichTextInline\" | \"RichTextParagraphs\" | \"RichTextTableCell\" | \"RichTextTableRow\" | \"RichTextTable\" | \"PlainTextInline\" | \"PlainTextParagraph\" | \"Picture\" | \"BuildingBlockGallery\" | \"CheckBox\" | \"ComboBox\" | \"DropDownList\" | \"DatePicker\" | \"RepeatingSection\" | \"RichText\" | \"PlainText\" | \"Group\"",
      "description": "Gets the content control type. Only rich text, plain text, and checkbox content controls are supported currently.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "xmlMapping",
      "type": "Word.XmlMapping",
      "description": "Returns an XmlMapping object that represents the mapping of the content control to XML data in the data store of the document.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "clear",
      "kind": "write",
      "description": "Clears the contents of the content control. The user can perform the undo operation on the cleared content.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the content controls collection.\n    const contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n        \n    if (contentControls.items.length === 0) {\n        console.log(\"There isn't a content control in this document.\");\n    } else {\n        // Queue a command to clear the contents of the first content control.\n        contentControls.items[0].clear();\n\n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        await context.sync();\n        console.log('Content control cleared of contents.');\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the content control and its content. If keepContent is set to true, the content isn't deleted.",
      "signatures": [
        {
          "params": [
            {
              "name": "keepContent",
              "type": "boolean",
              "required": true,
              "description": "Indicates whether the content should be deleted with the content control. If keepContent is set to true, the content isn't deleted."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the content controls collection.\n    const contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n        \n    if (contentControls.items.length === 0) {\n        console.log(\"There isn't a content control in this document.\");\n    } else {            \n        // Queue a command to delete the first content control. \n        // The contents will remain in the document.\n        contentControls.items[0].delete(true);\n\n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        await context.sync();\n        console.log('Content control cleared of contents.'); \n    }\n});",
          "output_code": null
        },
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondeleted-event.yaml\n\nawait Word.run(async (context) => {\n  const contentControls: Word.ContentControlCollection = context.document.contentControls.getByTag(\"forTesting\");\n  contentControls.load(\"items\");\n  await context.sync();\n\n  if (contentControls.items.length === 0) {\n    console.log(\"There are no content controls in this document.\");\n  } else {\n    console.log(\"Control to be deleted:\", contentControls.items[0]);\n    contentControls.items[0].delete(false);\n    await context.sync();\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getComments",
      "kind": "read",
      "description": "Gets comments associated with the content control.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CommentCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getContentControls",
      "kind": "read",
      "description": "Gets the currently supported child content controls in this content control.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.ContentControlOptions",
              "required": false,
              "description": "Options that define which content controls are returned."
            }
          ],
          "returns": {
            "type": "Word.ContentControlCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getHtml",
      "kind": "read",
      "description": "Gets an HTML representation of the content control object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use `ContentControl.getOoxml()` and convert the returned XML to HTML.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the content controls collection that contains a specific tag.\n    const contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');\n    \n    // Queue a command to load the tag property for all of content controls.\n    contentControlsWithTag.load('tag');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    if (contentControlsWithTag.items.length === 0) {\n        console.log('No content control found.');\n    }\n    else {\n        // Queue a command to get the HTML contents of the first content control.\n        const html = contentControlsWithTag.items[0].getHtml();\n    \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        await context.sync();\n        console.log('Content control HTML: ' + html.value);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getOoxml",
      "kind": "read",
      "description": "Gets the Office Open XML (OOXML) representation of the content control object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the content controls collection.\n    const contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls.\n    contentControls.load('id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    if (contentControls.items.length === 0) {\n        console.log('No content control found.');\n    }\n    else {\n        // Queue a command to get the OOXML contents of the first content control.\n        const ooxml = contentControls.items[0].getOoxml();\n    \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        await context.sync();\n        console.log('Content control OOXML: ' + ooxml.value);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getRange",
      "kind": "read",
      "description": "Gets the whole content control, or the starting or ending point of the content control, as a range.",
      "signatures": [
        {
          "params": [
            {
              "name": "rangeLocation",
              "type": "Word.RangeLocation | \"Whole\" | \"Start\" | \"End\" | \"Before\" | \"After\" | \"Content\"",
              "required": false,
              "description": "The range location must be 'Whole', 'Start', 'End', 'Before', 'After', or 'Content'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getReviewedText",
      "kind": "read",
      "description": "Gets reviewed text based on ChangeTrackingVersion selection.",
      "signatures": [
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": "Word.ChangeTrackingVersion",
              "required": false,
              "description": "The value must be 'Original' or 'Current'. The default is 'Current'."
            }
          ],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": "\"Original\" | \"Current\"",
              "required": false,
              "description": "The value must be 'Original' or 'Current'. The default is 'Current'."
            }
          ],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getTextRanges",
      "kind": "read",
      "description": "Gets the text ranges in the content control by using punctuation marks and/or other ending marks.",
      "signatures": [
        {
          "params": [
            {
              "name": "endingMarks",
              "type": "string[]",
              "required": true,
              "description": "The punctuation marks and/or other ending marks as an array of strings."
            },
            {
              "name": "trimSpacing",
              "type": "boolean",
              "required": false,
              "description": "Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection."
            }
          ],
          "returns": {
            "type": "Word.RangeCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getTrackedChanges",
      "kind": "read",
      "description": "Gets the collection of the TrackedChange objects in the content control.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TrackedChangeCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertBreak",
      "kind": "create",
      "description": "Inserts a break at the specified location in the main document. This method cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.",
      "signatures": [
        {
          "params": [
            {
              "name": "breakType",
              "type": "Word.BreakType | \"Page\" | \"Next\" | \"SectionNext\" | \"SectionContinuous\" | \"SectionEven\" | \"SectionOdd\" | \"Line\"",
              "required": true,
              "description": "Type of break."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.start | Word.InsertLocation.end | Word.InsertLocation.before | Word.InsertLocation.after | \"Start\" | \"End\" | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Start', 'End', 'Before', or 'After'."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the content controls collection.\n    const contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of content controls.\n    contentControls.load('id');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    // We now will have access to the content control collection.\n    await context.sync();\n    if (contentControls.items.length === 0) {\n        console.log('No content control found.');\n    }\n    else {\n        // Queue a command to insert a page break after the first content control.\n        contentControls.items[0].insertBreak(Word.BreakType.page, Word.InsertLocation.after);\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        await context.sync();\n        console.log('Inserted a page break after the first content control.');    \n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertFileFromBase64",
      "kind": "create",
      "description": "Inserts a document into the content control at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64File",
              "type": "string",
              "required": true,
              "description": "The Base64-encoded content of a .docx file."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | \"Replace\" | \"Start\" | \"End\"",
              "required": true,
              "description": "The value must be 'Replace', 'Start', or 'End'. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertHtml",
      "kind": "create",
      "description": "Inserts HTML into the content control at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "html",
              "type": "string",
              "required": true,
              "description": "The HTML to be inserted in to the content control."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | \"Replace\" | \"Start\" | \"End\"",
              "required": true,
              "description": "The value must be 'Replace', 'Start', or 'End'. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the content controls collection.\n    const contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls.\n    contentControls.load('id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    if (contentControls.items.length === 0) {\n        console.log('No content control found.');\n    }\n    else {\n        // Queue a command to put HTML into the contents of the first content control.\n        contentControls.items[0].insertHtml(\n            '<strong>HTML content inserted into the content control.</strong>