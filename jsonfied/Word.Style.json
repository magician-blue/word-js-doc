{
  "class": {
    "name": "Word.Style",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.3"
    },
    "description": "Represents a style in a Word document.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: // Applies the specified style to a paragraph.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name-to-use\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to apply.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else if (style.type != Word.StyleType.paragraph) {\n    console.log(`The '${styleName}' style isn't a paragraph style.`);\n  } else {\n    const body: Word.Body = context.document.body;\n    body.clear();\n    body.insertParagraph(\n      \"Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.\",\n      \"Start\"\n    );\n    const paragraph: Word.Paragraph = body.paragraphs.getFirst();\n    paragraph.style = style.nameLocal;\n    console.log(`'${styleName}' style applied to first paragraph.`);\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "automaticallyUpdate",
      "type": "boolean",
      "description": "Specifies whether the style is automatically redefined based on the selection.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "baseStyle",
      "type": "string",
      "description": "Specifies the name of an existing style to use as the base formatting of another style.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "borders",
      "type": "Word.BorderCollection",
      "description": "Specifies a BorderCollection object that represents all the borders for the specified style.",
      "since": "WordApiDesktop 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Updates border properties (e.g., type, width, color) of the specified style.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to update border properties.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    const borders: Word.BorderCollection = style.borders;\n    borders.load(\"items\");\n    await context.sync();\n\n    borders.outsideBorderType = Word.BorderType.dashed;\n    borders.outsideBorderWidth = Word.BorderWidth.pt025;\n    borders.outsideBorderColor = \"green\";\n    console.log(\"Updated outside borders.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "builtIn",
      "type": "boolean",
      "description": "Gets whether the specified style is a built-in style.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "description",
      "type": "string",
      "description": "Gets the description of the specified style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "font",
      "type": "Word.Font",
      "description": "Gets a font object that represents the character formatting of the specified style.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Updates font properties (e.g., color, size) of the specified style.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to update font properties.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    const font: Word.Font = style.font;\n    font.color = \"#FF0000\";\n    font.size = 20;\n    console.log(`Successfully updated font properties of the '${styleName}' style.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "frame",
      "type": "Word.Frame",
      "description": "Returns a Frame object that represents the frame formatting for the style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "hasProofing",
      "type": "boolean",
      "description": "Specifies whether the spelling and grammar checker ignores text formatted with this style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "inUse",
      "type": "boolean",
      "description": "Gets whether the specified style is a built-in style that has been modified or applied in the document or a new style that has been created in the document.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "languageId",
      "type": "Word.LanguageId | \"Afrikaans\" | \"Albanian\" | \"Amharic\" | \"Arabic\" | \"ArabicAlgeria\" | \"ArabicBahrain\" | \"ArabicEgypt\" | \"ArabicIraq\" | \"ArabicJordan\" | \"ArabicKuwait\" | \"ArabicLebanon\" | \"ArabicLibya\" | \"ArabicMorocco\" | \"ArabicOman\" | \"ArabicQatar\" | \"ArabicSyria\" | \"ArabicTunisia\" | \"ArabicUAE\" | \"ArabicYemen\" | \"Armenian\" | \"Assamese\" | \"AzeriCyrillic\" | \"AzeriLatin\" | \"Basque\" | \"BelgianDutch\" | \"BelgianFrench\" | \"Bengali\" | \"Bulgarian\" | \"Burmese\" | \"Belarusian\" | \"Catalan\" | \"Cherokee\" | \"ChineseHongKongSAR\" | \"ChineseMacaoSAR\" | \"ChineseSingapore\" | \"Croatian\" | \"Czech\" | \"Danish\" | \"Divehi\" | \"Dutch\" | \"Edo\" | \"EnglishAUS\" | \"EnglishBelize\" | \"EnglishCanadian\" | \"EnglishCaribbean\" | \"EnglishIndonesia\" | \"EnglishIreland\" | \"EnglishJamaica\" | \"EnglishNewZealand\" | \"EnglishPhilippines\" | \"EnglishSouthAfrica\" | \"EnglishTrinidadTobago\" | \"EnglishUK\" | \"EnglishUS\" | \"EnglishZimbabwe\" | \"Estonian\" | \"Faeroese\" | \"Filipino\" | \"Finnish\" | \"French\" | \"FrenchCameroon\" | \"FrenchCanadian\" | \"FrenchCongoDRC\" | \"FrenchCotedIvoire\" | \"FrenchHaiti\" | \"FrenchLuxembourg\" | \"FrenchMali\" | \"FrenchMonaco\" | \"FrenchMorocco\" | \"FrenchReunion\" | \"FrenchSenegal\" | \"FrenchWestIndies\" | \"FrisianNetherlands\" | \"Fulfulde\" | \"GaelicIreland\" | \"GaelicScotland\" | \"Galician\" | \"Georgian\" | \"German\" | \"GermanAustria\" | \"GermanLiechtenstein\" | \"GermanLuxembourg\" | \"Greek\" | \"Guarani\" | \"Gujarati\" | \"Hausa\" | \"Hawaiian\" | \"Hebrew\" | \"Hindi\" | \"Hungarian\" | \"Ibibio\" | \"Icelandic\" | \"Igbo\" | \"Indonesian\" | \"Inuktitut\" | \"Italian\" | \"Japanese\" | \"Kannada\" | \"Kanuri\" | \"Kashmiri\" | \"Kazakh\" | \"Khmer\" | \"Kirghiz\" | \"Konkani\" | \"Korean\" | \"Kyrgyz\" | \"LanguageNone\" | \"Lao\" | \"Latin\" | \"Latvian\" | \"Lithuanian\" | \"MacedonianFYROM\" | \"Malayalam\" | \"MalayBruneiDarussalam\" | \"Malaysian\" | \"Maltese\" | \"Manipuri\" | \"Marathi\" | \"MexicanSpanish\" | \"Mongolian\" | \"Nepali\" | \"NoProofing\" | \"NorwegianBokmol\" | \"NorwegianNynorsk\" | \"Oriya\" | \"Oromo\" | \"Pashto\" | \"Persian\" | \"Polish\" | \"Portuguese\" | \"PortugueseBrazil\" | \"Punjabi\" | \"RhaetoRomanic\" | \"Romanian\" | \"RomanianMoldova\" | \"Russian\" | \"RussianMoldova\" | \"SamiLappish\" | \"Sanskrit\" | \"SerbianCyrillic\" | \"SerbianLatin\" | \"Sesotho\" | \"SimplifiedChinese\" | \"Sindhi\" | \"SindhiPakistan\" | \"Sinhalese\" | \"Slovak\" | \"Slovenian\" | \"Somali\" | \"Sorbian\" | \"Spanish\" | \"SpanishArgentina\" | \"SpanishBolivia\" | \"SpanishChile\" | \"SpanishColombia\" | \"SpanishCostaRica\" | \"SpanishDominicanRepublic\" | \"SpanishEcuador\" | \"SpanishElSalvador\" | \"SpanishGuatemala\" | \"SpanishHonduras\" | \"SpanishModernSort\" | \"SpanishNicaragua\" | \"SpanishPanama\" | \"SpanishParaguay\" | \"SpanishPeru\" | \"SpanishPuertoRico\" | \"SpanishUruguay\" | \"SpanishVenezuela\" | \"Sutu\" | \"Swahili\" | \"Swedish\" | \"SwedishFinland\" | \"SwissFrench\" | \"SwissGerman\" | \"SwissItalian\" | \"Syriac\" | \"Tajik\" | \"Tamazight\" | \"TamazightLatin\" | \"Tamil\" | \"Tatar\" | \"Telugu\" | \"Thai\" | \"Tibetan\" | \"TigrignaEritrea\" | \"TigrignaEthiopic\" | \"TraditionalChinese\" | \"Tsonga\" | \"Tswana\" | \"Turkish\" | \"Turkmen\" | \"Ukrainian\" | \"Urdu\" | \"UzbekCyrillic\" | \"UzbekLatin\" | \"Venda\" | \"Vietnamese\" | \"Welsh\" | \"Xhosa\" | \"Yi\" | \"Yiddish\" | \"Yoruba\" | \"Zulu\"",
      "description": "Specifies a LanguageId value that represents the language for the style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "languageIdFarEast",
      "type": "Word.LanguageId | \"Afrikaans\" | \"Albanian\" | \"Amharic\" | \"Arabic\" | \"ArabicAlgeria\" | \"ArabicBahrain\" | \"ArabicEgypt\" | \"ArabicIraq\" | \"ArabicJordan\" | \"ArabicKuwait\" | \"ArabicLebanon\" | \"ArabicLibya\" | \"ArabicMorocco\" | \"ArabicOman\" | \"ArabicQatar\" | \"ArabicSyria\" | \"ArabicTunisia\" | \"ArabicUAE\" | \"ArabicYemen\" | \"Armenian\" | \"Assamese\" | \"AzeriCyrillic\" | \"AzeriLatin\" | \"Basque\" | \"BelgianDutch\" | \"BelgianFrench\" | \"Bengali\" | \"Bulgarian\" | \"Burmese\" | \"Belarusian\" | \"Catalan\" | \"Cherokee\" | \"ChineseHongKongSAR\" | \"ChineseMacaoSAR\" | \"ChineseSingapore\" | \"Croatian\" | \"Czech\" | \"Danish\" | \"Divehi\" | \"Dutch\" | \"Edo\" | \"EnglishAUS\" | \"EnglishBelize\" | \"EnglishCanadian\" | \"EnglishCaribbean\" | \"EnglishIndonesia\" | \"EnglishIreland\" | \"EnglishJamaica\" | \"EnglishNewZealand\" | \"EnglishPhilippines\" | \"EnglishSouthAfrica\" | \"EnglishTrinidadTobago\" | \"EnglishUK\" | \"EnglishUS\" | \"EnglishZimbabwe\" | \"Estonian\" | \"Faeroese\" | \"Filipino\" | \"Finnish\" | \"French\" | \"FrenchCameroon\" | \"FrenchCanadian\" | \"FrenchCongoDRC\" | \"FrenchCotedIvoire\" | \"FrenchHaiti\" | \"FrenchLuxembourg\" | \"FrenchMali\" | \"FrenchMonaco\" | \"FrenchMorocco\" | \"FrenchReunion\" | \"FrenchSenegal\" | \"FrenchWestIndies\" | \"FrisianNetherlands\" | \"Fulfulde\" | \"GaelicIreland\" | \"GaelicScotland\" | \"Galician\" | \"Georgian\" | \"German\" | \"GermanAustria\" | \"GermanLiechtenstein\" | \"GermanLuxembourg\" | \"Greek\" | \"Guarani\" | \"Gujarati\" | \"Hausa\" | \"Hawaiian\" | \"Hebrew\" | \"Hindi\" | \"Hungarian\" | \"Ibibio\" | \"Icelandic\" | \"Igbo\" | \"Indonesian\" | \"Inuktitut\" | \"Italian\" | \"Japanese\" | \"Kannada\" | \"Kanuri\" | \"Kashmiri\" | \"Kazakh\" | \"Khmer\" | \"Kirghiz\" | \"Konkani\" | \"Korean\" | \"Kyrgyz\" | \"LanguageNone\" | \"Lao\" | \"Latin\" | \"Latvian\" | \"Lithuanian\" | \"MacedonianFYROM\" | \"Malayalam\" | \"MalayBruneiDarussalam\" | \"Malaysian\" | \"Maltese\" | \"Manipuri\" | \"Marathi\" | \"MexicanSpanish\" | \"Mongolian\" | \"Nepali\" | \"NoProofing\" | \"NorwegianBokmol\" | \"NorwegianNynorsk\" | \"Oriya\" | \"Oromo\" | \"Pashto\" | \"Persian\" | \"Polish\" | \"Portuguese\" | \"PortugueseBrazil\" | \"Punjabi\" | \"RhaetoRomanic\" | \"Romanian\" | \"RomanianMoldova\" | \"Russian\" | \"RussianMoldova\" | \"SamiLappish\" | \"Sanskrit\" | \"SerbianCyrillic\" | \"SerbianLatin\" | \"Sesotho\" | \"SimplifiedChinese\" | \"Sindhi\" | \"SindhiPakistan\" | \"Sinhalese\" | \"Slovak\" | \"Slovenian\" | \"Somali\" | \"Sorbian\" | \"Spanish\" | \"SpanishArgentina\" | \"SpanishBolivia\" | \"SpanishChile\" | \"SpanishColombia\" | \"SpanishCostaRica\" | \"SpanishDominicanRepublic\" | \"SpanishEcuador\" | \"SpanishElSalvador\" | \"SpanishGuatemala\" | \"SpanishHonduras\" | \"SpanishModernSort\" | \"SpanishNicaragua\" | \"SpanishPanama\" | \"SpanishParaguay\" | \"SpanishPeru\" | \"SpanishPuertoRico\" | \"SpanishUruguay\" | \"SpanishVenezuela\" | \"Sutu\" | \"Swahili\" | \"Swedish\" | \"SwedishFinland\" | \"SwissFrench\" | \"SwissGerman\" | \"SwissItalian\" | \"Syriac\" | \"Tajik\" | \"Tamazight\" | \"TamazightLatin\" | \"Tamil\" | \"Tatar\" | \"Telugu\" | \"Thai\" | \"Tibetan\" | \"TigrignaEritrea\" | \"TigrignaEthiopic\" | \"TraditionalChinese\" | \"Tsonga\" | \"Tswana\" | \"Turkish\" | \"Turkmen\" | \"Ukrainian\" | \"Urdu\" | \"UzbekCyrillic\" | \"UzbekLatin\" | \"Venda\" | \"Vietnamese\" | \"Welsh\" | \"Xhosa\" | \"Yi\" | \"Yiddish\" | \"Yoruba\" | \"Zulu\"",
      "description": "Specifies an East Asian language for the style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "linked",
      "type": "boolean",
      "description": "Gets whether a style is a linked style that can be used for both paragraph and character formatting.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "linkStyle",
      "type": "Word.Style",
      "description": "Specifies a link between a paragraph and a character style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "listLevelNumber",
      "type": "number",
      "description": "Returns the list level for the style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "listTemplate",
      "type": "Word.ListTemplate",
      "description": "Gets a ListTemplate object that represents the list formatting for the specified Style object.",
      "since": "WordApiDesktop 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/manage-list-styles.yaml\n\n// Gets the properties of the specified style.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name-to-use\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to get properties.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load(\"type\");\n  await context.sync();\n\n  if (style.isNullObject || style.type != Word.StyleType.list) {\n    console.warn(`There's no existing style with the name '${styleName}'. Or this isn't a list style.`);\n  } else {\n    // Load objects to log properties and their values in the console.\n    style.load();\n    style.listTemplate.load();\n    await context.sync();\n\n    console.log(`Properties of the '${styleName}' style:`, style);\n\n    const listLevels = style.listTemplate.listLevels;\n    listLevels.load(\"items\");\n    await context.sync();\n\n    console.log(`List levels of the '${styleName}' style:`, listLevels);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "locked",
      "type": "boolean",
      "description": "Specifies whether the style cannot be changed or edited.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "nameLocal",
      "type": "string",
      "description": "Gets the name of a style in the language of the user.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Applies the specified style to a paragraph.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name-to-use\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to apply.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else if (style.type != Word.StyleType.paragraph) {\n    console.log(`The '${styleName}' style isn't a paragraph style.`);\n  } else {\n    const body: Word.Body = context.document.body;\n    body.clear();\n    body.insertParagraph(\n      \"Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.\",\n      \"Start\"\n    );\n    const paragraph: Word.Paragraph = body.paragraphs.getFirst();\n    paragraph.style = style.nameLocal;\n    console.log(`'${styleName}' style applied to first paragraph.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "nextParagraphStyle",
      "type": "string",
      "description": "Specifies the name of the style to be applied automatically to a new paragraph that is inserted after a paragraph formatted with the specified style.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "noSpaceBetweenParagraphsOfSameStyle",
      "type": "boolean",
      "description": "Specifies whether to remove spacing between paragraphs that are formatted using the same style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "paragraphFormat",
      "type": "Word.ParagraphFormat",
      "description": "Gets a ParagraphFormat object that represents the paragraph settings for the specified style.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Sets certain aspects of the specified style's paragraph format e.g., the left indent size and the alignment.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to update its paragraph format.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    style.paragraphFormat.leftIndent = 30;\n    style.paragraphFormat.alignment = Word.Alignment.centered;\n    console.log(`Successfully the paragraph format of the '${styleName}' style.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "priority",
      "type": "number",
      "description": "Specifies the priority.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "quickStyle",
      "type": "boolean",
      "description": "Specifies whether the style corresponds to an available quick style.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "shading",
      "type": "Word.Shading",
      "description": "Gets a Shading object that represents the shading for the specified style. Not applicable to List style.",
      "since": "WordApi 1.6",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Updates shading properties (e.g., texture, pattern colors) of the specified style.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to update shading properties.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    const shading: Word.Shading = style.shading;\n    shading.load();\n    await context.sync();\n\n    shading.backgroundPatternColor = \"blue\";\n    shading.foregroundPatternColor = \"yellow\";\n    shading.texture = Word.ShadingTextureType.darkTrellis;\n\n    console.log(\"Updated shading.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "tableStyle",
      "type": "Word.TableStyle",
      "description": "Gets a TableStyle object representing Style properties that can be applied to a table.",
      "since": "WordApi 1.6",
      "examples": []
    },
    {
      "name": "type",
      "type": "Word.StyleType | \"Character\" | \"List\" | \"Paragraph\" | \"Table\"",
      "description": "Gets the style type.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "unhideWhenUsed",
      "type": "boolean",
      "description": "Specifies whether the specified style is made visible as a recommended style in the Styles and in the Styles task pane in Microsoft Word after it's used in the document.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "visibility",
      "type": "boolean",
      "description": "Specifies whether the specified style is visible as a recommended style in the Styles gallery and in the Styles task pane.",
      "since": "WordApi 1.5",
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the style.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Deletes the custom style.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to delete.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    style.delete();\n    console.log(`Successfully deleted custom style '${styleName}'.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "linkToListTemplate",
      "kind": null,
      "description": "Links this style to a list template so that the style's formatting can be applied to lists.",
      "signatures": [
        {
          "params": [
            {
              "name": "listTemplate",
              "type": "Word.ListTemplate",
              "required": true,
              "description": "A ListTemplate to link to the style."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.StyleLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.Style",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.Style",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{\n            select?: string;\n            expand?: string;\n        }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.Style",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.StyleUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.Style",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method to provide more useful output when an API object is passed to JSON.stringify().",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.StyleData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Style",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Style",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml",
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/manage-list-styles.yaml"
    ]
  }
}