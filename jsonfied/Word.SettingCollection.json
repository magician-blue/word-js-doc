{
  "class": {
    "name": "Word.SettingCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.4"
    },
    "description": "Contains the collection of [Word.Setting](/en-us/javascript/api/word/word.setting) objects.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml\n\n// Deletes all custom settings this add-in had set on this document.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.deleteAll();\n  await context.sync();\n  console.log(\"All settings deleted.\");\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "items",
      "type": "Word.Setting[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml\n\n// Gets all custom settings this add-in set on this document.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.load(\"items\");\n  await context.sync();\n\n  if (settings.items.length == 0) {\n    console.log(\"There are no settings.\");\n  } else {\n    console.log(\"All settings:\");\n    for (let i = 0; i < settings.items.length; i++) {\n      console.log(settings.items[i]);\n    }\n  }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Creates a new setting or sets an existing setting.",
      "signatures": [
        {
          "params": [
            {
              "name": "key",
              "type": "string",
              "required": true,
              "description": "The setting's key, which is case-sensitive."
            },
            {
              "name": "value",
              "type": "any",
              "required": true,
              "description": "The setting's value."
            }
          ],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml\n\n// Adds a new custom setting or\n// edits the value of an existing one.\nawait Word.run(async (context) => {\n  const key = (document.getElementById(\"key\") as HTMLInputElement).value;\n  if (key == \"\") {\n    console.error(\"Key shouldn't be empty.\");\n    return;\n  }\n\n  const value = (document.getElementById(\"value\") as HTMLInputElement).value;\n  const settings: Word.SettingCollection = context.document.settings;\n  const setting: Word.Setting = settings.add(key, value);\n  setting.load();\n  await context.sync();\n\n  console.log(\"Setting added or edited:\", setting);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "deleteAll",
      "kind": "delete",
      "description": "Deletes all settings in this add-in.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue commands add a setting.\n    const settings = context.document.settings;\n    settings.add('startMonth', { month: 'March', year: 1998 });\n\n    // Queue a command to get the count of settings.\n    const count = settings.getCount();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log(count.value);\n\n    // Queue a command to delete all settings.\n    settings.deleteAll();\n\n    // Queue a command to get the new count of settings.\n    count = settings.getCount();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log(count.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getCount",
      "kind": "read",
      "description": "Gets the count of settings.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<number>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue commands add a setting.\n    const settings = context.document.settings;\n    settings.add('startMonth', { month: 'March', year: 1998 });\n\n    // Queue a command to get the count of settings.\n    const count = settings.getCount();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log(count.value);\n\n    // Queue a command to delete all settings.\n    settings.deleteAll();\n\n    // Queue a command to get the new count of settings.\n    count = settings.getCount();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log(count.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a setting object by its key, which is case-sensitive. Throws an `ItemNotFound` error if the setting doesn't exist.",
      "signatures": [
        {
          "params": [
            {
              "name": "key",
              "type": "string",
              "required": true,
              "description": "The key that identifies the setting object."
            }
          ],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue commands add a setting.\n    const settings = context.document.settings;\n    settings.add('startMonth', { month: 'March', year: 1998 });\n\n    // Queue a command to retrieve a setting.\n    const startMonth = settings.getItem('startMonth');\n\n    // Queue a command to load the setting.\n    startMonth.load();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log(JSON.stringify(startMonth.value));\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItemOrNullObject",
      "kind": "read",
      "description": "Gets a setting object by its key, which is case-sensitive. If the setting doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [
            {
              "name": "key",
              "type": "string",
              "required": true,
              "description": "The key that identifies the setting object."
            }
          ],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue commands add a setting.\n    const settings = context.document.settings;\n    settings.add('startMonth', { month: 'March', year: 1998 });\n    \n    // Queue commands to retrieve settings.\n    const startMonth = settings.getItemOrNullObject('startMonth');\n    const endMonth = settings.getItemOrNullObject('endMonth');\n\n    // Queue commands to load settings.\n    startMonth.load();\n    endMonth.load();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n        if (startMonth.isNullObject) {\n            console.log(\"No such setting.\");\n        }\n        else {\n            console.log(JSON.stringify(startMonth.value));\n        }\n        if (endMonth.isNullObject) {\n            console.log(\"No such setting.\");\n        }\n        else {\n            console.log(JSON.stringify(endMonth.value));\n        }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.SettingCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.SettingCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.SettingCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.SettingCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.SettingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SettingCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.SettingCollectionData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.SettingCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.SettingCollection",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word"
    ]
  }
}