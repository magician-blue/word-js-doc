{
  "class": {
    "name": "Word.CommentContentRange",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.4"
    },
    "description": null,
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml\n\n// Gets the range of the first comment in the selected content.\nawait Word.run(async (context) => {\n  const comment: Word.Comment = context.document.getSelection().getComments().getFirstOrNullObject();\n  comment.load(\"contentRange\");\n  const range: Word.Range = comment.getRange();\n  range.load(\"text\");\n  await context.sync();\n\n  if (comment.isNullObject) {\n    console.warn(\"No comments in the selection, so no range to get.\");\n    return;\n  }\n\n  console.log(`Comment location: ${range.text}`);\n  const contentRange: Word.CommentContentRange = comment.contentRange;\n  console.log(\"Comment content range:\", contentRange);\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "bold",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the comment text is bold.",
      "since": "1.4",
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "hyperlink",
      "type": "string",
      "description": "Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range.",
      "since": "1.4",
      "examples": []
    },
    {
      "name": "isEmpty",
      "type": "boolean",
      "description": "Checks whether the range length is zero.",
      "since": "1.4",
      "examples": []
    },
    {
      "name": "italic",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the comment text is italicized.",
      "since": "1.4",
      "examples": []
    },
    {
      "name": "strikeThrough",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the comment text has a strikethrough.",
      "since": "1.4",
      "examples": []
    },
    {
      "name": "text",
      "type": "string",
      "description": "Gets the text of the comment range.",
      "since": "1.4",
      "examples": []
    },
    {
      "name": "underline",
      "type": "Word.UnderlineType | \"Mixed\" | \"None\" | \"Hidden\" | \"DotLine\" | \"Single\" | \"Word\" | \"Double\" | \"Thick\" | \"Dotted\" | \"DottedHeavy\" | \"DashLine\" | \"DashLineHeavy\" | \"DashLineLong\" | \"DashLineLongHeavy\" | \"DotDashLine\" | \"DotDashLineHeavy\" | \"TwoDotDashLine\" | \"TwoDotDashLineHeavy\" | \"Wave\" | \"WaveHeavy\" | \"WaveDouble\"",
      "description": "Specifies a value that indicates the comment text's underline type. 'None' if the comment text isn't underlined.",
      "since": "1.4",
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "insertText",
      "kind": "write",
      "description": "Inserts text into at the specified location. Note: For the modern comment, the content range tracked across context turns to empty if any revision to the comment is posted through the UI.",
      "signatures": [
        {
          "params": [
            {
              "name": "text",
              "type": "string",
              "required": true,
              "description": "The text to be inserted in to the CommentContentRange."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation | \"Replace\" | \"Start\" | \"End\" | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Replace', 'Start', 'End', 'Before', or 'After'."
            }
          ],
          "returns": {
            "type": "Word.CommentContentRange",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.CommentContentRangeLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.CommentContentRange",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.CommentContentRange",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.CommentContentRange",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.CommentContentRangeUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.CommentContentRange",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.CommentContentRange object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.CommentContentRangeData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.CommentContentRangeData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CommentContentRange",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CommentContentRange",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word/word.commentcontentrange"
    ]
  }
}