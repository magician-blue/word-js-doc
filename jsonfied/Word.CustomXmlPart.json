{
  "class": {
    "name": "Word.CustomXmlPart",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.4"
    },
    "description": "Represents a custom XML part.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml\n\n// Adds a custom XML part.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load(\"id\");\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(\"Added custom XML part:\", readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n  await context.sync();\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "builtIn",
      "type": "boolean",
      "description": "Gets a value that indicates whether the CustomXmlPart is built-in.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "documentElement",
      "type": "Word.CustomXmlNode",
      "description": "Gets the root element of a bound region of data in the document. If the region is empty, the property returns Nothing.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "errors",
      "type": "Word.CustomXmlValidationErrorCollection",
      "description": "Gets a CustomXmlValidationErrorCollection object that provides access to any XML validation errors.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "id",
      "type": "string",
      "description": "Gets the ID of the custom XML part.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml\n\n// Adds a custom XML part.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load(\"id\");\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(\"Added custom XML part:\", readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "namespaceManager",
      "type": "Word.CustomXmlPrefixMappingCollection",
      "description": "Gets the set of namespace prefix mappings used against the current CustomXmlPart object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "namespaceUri",
      "type": "string",
      "description": "Gets the namespace URI of the custom XML part.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Gets the namespace URI from a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    customXmlPart.load(\"namespaceUri\");\n    await context.sync();\n\n    const namespaceUri = customXmlPart.namespaceUri;\n    console.log(`Namespace URI: ${JSON.stringify(namespaceUri)}`);\n  } else {\n    console.warn(\"Didn't find custom XML part.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "schemaCollection",
      "type": "Word.CustomXmlSchemaCollection",
      "description": "Specifies a CustomXmlSchemaCollection object representing the set of schemas attached to a bound region of data in the document.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "xml",
      "type": "string",
      "description": "Gets the XML representation of the current CustomXmlPart object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "addNode",
      "kind": "create",
      "description": "Adds a node to the XML tree.",
      "signatures": [
        {
          "params": [
            {
              "name": "parent",
              "type": "Word.CustomXmlNode",
              "required": true,
              "description": "The parent node to which the new node will be added."
            },
            {
              "name": "options",
              "type": "Word.CustomXmlAddNodeOptions",
              "required": false,
              "description": "Optional. The options that define the node to be added."
            }
          ],
          "returns": {
            "type": "OfficeExtension.ClientResult<number>",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the custom XML part.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml\n\n// Original XML: <Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Deletes a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    let customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xmlBlob = customXmlPart.getXml();\n    customXmlPart.delete();\n    customXmlPart = context.document.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n    await context.sync();\n\n    if (customXmlPart.isNullObject) {\n      console.log(`The XML part with the ID ${xmlPartIDSetting.value} has been deleted.`);\n\n      // Delete the associated setting too.\n      xmlPartIDSetting.delete();\n\n      await context.sync();\n    } else {\n      const readableXml = addLineBreaksToXML(xmlBlob.value);\n      console.error(`This is strange. The XML part with the id ${xmlPartIDSetting.value} wasn't deleted:`, readableXml);\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to delete.\");\n  }\n});\n\n...\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Deletes a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    let customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xmlBlob = customXmlPart.getXml();\n    customXmlPart.delete();\n    customXmlPart = context.document.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n    await context.sync();\n\n    if (customXmlPart.isNullObject) {\n      console.log(`The XML part with the ID ${xmlPartIDSetting.value} has been deleted.`);\n\n      // Delete the associated setting too.\n      xmlPartIDSetting.delete();\n\n      await context.sync();\n    } else {\n      const readableXml = addLineBreaksToXML(xmlBlob.value);\n      console.error(\n        `This is strange. The XML part with the id ${xmlPartIDSetting.value} wasn't deleted:`,\n        readableXml\n      );\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to delete.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "deleteAttribute",
      "kind": "delete",
      "description": "Deletes an attribute with the given name from the element identified by xpath.",
      "signatures": [
        {
          "params": [
            {
              "name": "xpath",
              "type": "string",
              "required": true,
              "description": "Absolute path to the single element in XPath notation."
            },
            {
              "name": "namespaceMappings",
              "type": "{ [key: string]: string; }",
              "required": true,
              "description": "An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: \"http://calendartypes.org/xsds/GregorianCalendar\"}`. The property names (such as \"greg\") can be any string that doesn't used reserved XPath characters, such as the forward slash \"/\"."
            },
            {
              "name": "name",
              "type": "string",
              "required": true,
              "description": "Name of the attribute."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "deleteElement",
      "kind": "delete",
      "description": "Deletes the element identified by xpath.",
      "signatures": [
        {
          "params": [
            {
              "name": "xpath",
              "type": "string",
              "required": true,
              "description": "Absolute path to the single element in XPath notation."
            },
            {
              "name": "namespaceMappings",
              "type": "{ [key: string]: string; }",
              "required": true,
              "description": "An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: \"http://calendartypes.org/xsds/GregorianCalendar\"}`. The property names (such as \"greg\") can be any string that doesn't used reserved XPath characters, such as the forward slash \"/\"."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getXml",
      "kind": "read",
      "description": "Gets the full XML content of the custom XML part.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Adds a custom XML part.\n// If you want to populate the CustomXml.namespaceUri property, you must include the xmlns attribute.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load([\"id\", \"namespaceUri\"]);\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(`Added custom XML part with namespace URI ${customXmlPart.namespaceUri}:`, readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartIdNS\", customXmlPart.id);\n\n  await context.sync();\n});\n\n...\n\n// Adds a custom XML part.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load(\"id\");\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(\"Added custom XML part:\", readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertAttribute",
      "kind": "write",
      "description": "Inserts an attribute with the given name and value to the element identified by xpath.",
      "signatures": [
        {
          "params": [
            {
              "name": "xpath",
              "type": "string",
              "required": true,
              "description": "Absolute path to the single element in XPath notation."
            },
            {
              "name": "namespaceMappings",
              "type": "{ [key: string]: string; }",
              "required": true,
              "description": "An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: \"http://calendartypes.org/xsds/GregorianCalendar\"}`. The property names (such as \"greg\") can be any string that doesn't used reserved XPath characters, such as the forward slash \"/\"."
            },
            {
              "name": "name",
              "type": "string",
              "required": true,
              "description": "Name of the attribute."
            },
            {
              "name": "value",
              "type": "string",
              "required": true,
              "description": "Value of the attribute."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Inserts an attribute into a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n\n    // The insertAttribute method inserts an attribute with the given name and value into the element identified by the xpath parameter.\n    customXmlPart.insertAttribute(\n      \"/contoso:Reviewers\",\n      { contoso: \"http://schemas.contoso.com/review/1.0\" },\n      \"Nation\",\n      \"US\"\n    );\n    const xmlBlob = customXmlPart.getXml();\n    await context.sync();\n\n    const readableXml = addLineBreaksToXML(xmlBlob.value);\n    console.log(\"Successfully inserted attribute:\", readableXml);\n  } else {\n    console.warn(\"Didn't find custom XML part to insert attribute into.\");\n  }\n});\n\n...\n\n// Original XML: <Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Inserts an attribute into a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n\n    // The insertAttribute method inserts an attribute with the given name and value into the element identified by the xpath parameter.\n    customXmlPart.insertAttribute(\"/Reviewers\", { contoso: \"http://schemas.contoso.com/review/1.0\" }, \"Nation\", \"US\");\n    const xmlBlob = customXmlPart.getXml();\n    await context.sync();\n\n    const readableXml = addLineBreaksToXML(xmlBlob.value);\n    console.log(\"Successfully inserted attribute:\", readableXml);\n  } else {\n    console.warn(\"Didn't find custom XML part to insert attribute into.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertElement",
      "kind": "write",
      "description": "Inserts the given XML under the parent element identified by xpath at child position index.",
      "signatures": [
        {
          "params": [
            {
              "name": "xpath",
              "type": "string",
              "required": true,
              "description": "Absolute path to the single parent element in XPath notation."
            },
            {
              "name": "xml",
              "type": "string",
              "required": true,
              "description": "XML content to be inserted."
            },
            {
              "name": "namespaceMappings",
              "type": "{ [key: string]: string; }",
              "required": true,
              "description": "An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: \"http://calendartypes.org/xsds/GregorianCalendar\"}`. The property names (such as \"greg\") can be any string that doesn't used reserved XPath characters, such as the forward slash \"/\"."
            },
            {
              "name": "index",
              "type": "number",
              "required": false,
              "description": "Zero-based position at which the new XML to be inserted. If omitted, the XML will be appended as the last child of this parent."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Inserts an element into a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n\n    // The insertElement method inserts the given XML under the parent element identified by the xpath parameter at the provided child position index.\n    customXmlPart.insertElement(\n      \"/contoso:Reviewers\",\n      \"<Lead>Mark</Lead>\",\n      { contoso: \"http://schemas.contoso.com/review/1.0\" },\n      0\n    );\n    const xmlBlob = customXmlPart.getXml();\n    await context.sync();\n\n    const readableXml = addLineBreaksToXML(xmlBlob.value);\n    console.log(\"Successfully inserted element:\", readableXml);\n  } else {\n    console.warn(\"Didn't find custom XML part to insert element into.\");\n  }\n});\n\n...\n\n// Original XML: <Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Inserts an element into a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n\n    // The insertElement method inserts the given XML under the parent element identified by the xpath parameter at the provided child position index.\n    customXmlPart.insertElement(\n      \"/Reviewers\",\n      \"<Lead>Mark</Lead>\",\n      { contoso: \"http://schemas.contoso.com/review/1.0\" },\n      0\n    );\n    const xmlBlob = customXmlPart.getXml();\n    await context.sync();\n\n    const readableXml = addLineBreaksToXML(xmlBlob.value);\n    console.log(\"Successfully inserted element:\", readableXml);\n  } else {\n    console.warn(\"Didn't find custom XML part to insert element into.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.CustomXmlPartLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "loadXml",
      "kind": "load",
      "description": "Populates the CustomXmlPart object from an XML string.",
      "signatures": [
        {
          "params": [
            {
              "name": "xml",
              "type": "string",
              "required": true,
              "description": "The XML string to load."
            }
          ],
          "returns": {
            "type": "OfficeExtension.ClientResult<boolean>",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "query",
      "kind": "read",
      "description": "Queries the XML content of the custom XML part.",
      "signatures": [
        {
          "params": [
            {
              "name": "xpath",
              "type": "string",
              "required": true,
              "description": "An XPath query."
            },
            {
              "name": "namespaceMappings",
              "type": "{ [key: string]: string; }",
              "required": true,
              "description": "An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: \"http://calendartypes.org/xsds/GregorianCalendar\"}`. The property names (such as \"greg\") can be any string that doesn't used reserved XPath characters, such as the forward slash \"/\"."
            }
          ],
          "returns": {
            "type": "OfficeExtension.ClientResult<string[]>",
            "description": "An array where each item represents an entry matched by the XPath query."
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Queries a custom XML part for elements matching the search terms.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xpathToQueryFor = \"/contoso:Reviewers\";\n    const clientResult = customXmlPart.query(xpathToQueryFor, {\n      contoso: \"http://schemas.contoso.com/review/1.0\"\n    });\n\n    await context.sync();\n\n    console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);\n    for (let i = 0; i < clientResult.value.length; i++) {\n      console.log(clientResult.value[i]);\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to query.\");\n  }\n});\n\n...\n\n// Original XML: <Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Queries a custom XML part for elements matching the search terms.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xpathToQueryFor = \"/Reviewers/Reviewer\";\n    const clientResult = customXmlPart.query(xpathToQueryFor, {\n      contoso: \"http://schemas.contoso.com/review/1.0\"\n    });\n\n    await context.sync();\n\n    console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);\n    for (let i = 0; i < clientResult.value.length; i++) {\n      console.log(clientResult.value[i]);\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to query.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "selectNodes",
      "kind": "read",
      "description": "Selects a collection of nodes from a custom XML part.",
      "signatures": [
        {
          "params": [
            {
              "name": "xPath",
              "type": "string",
              "required": true,
              "description": "The XPath expression to evaluate."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlNodeCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "selectSingleNode",
      "kind": "read",
      "description": "Selects a single node within a custom XML part matching an XPath expression.",
      "signatures": [
        {
          "params": [
            {
              "name": "xPath",
              "type": "string",
              "required": true,
              "description": "The XPath expression to evaluate."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlNode",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.CustomXmlPartUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.CustomXmlPart",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "setXml",
      "kind": "write",
      "description": "Sets the full XML content of the custom XML part.",
      "signatures": [
        {
          "params": [
            {
              "name": "xml",
              "type": "string",
              "required": true,
              "description": "XML content to be set."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Replaces a custom XML part.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const originalXmlBlob = customXmlPart.getXml();\n    await context.sync();\n\n    let readableXml = addLineBreaksToXML(originalXmlBlob.value);\n    console.log(\"Original custom XML part:\", readableXml);\n\n    // The setXml method replaces the entire XML part.\n    customXmlPart.setXml(\n      \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>\"\n    );\n    const updatedXmlBlob = customXmlPart.getXml();\n    await context.sync();\n\n    readableXml = addLineBreaksToXML(updatedXmlBlob.value);\n    console.log(\"Replaced custom XML part:\", readableXml);\n  } else {\n    console.warn(\"Didn't find custom XML part to replace.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.CustomXmlPart object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.CustomXmlPartData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.CustomXmlPartData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension.clientrequestcontext-trackedobjects-member). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension.clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "updateAttribute",
      "kind": "write",
      "description": "Updates the value of an attribute with the given name of the element identified by xpath.",
      "signatures": [
        {
          "params": [
            {
              "name": "xpath",
              "type": "string",
              "required": true,
              "description": "Absolute path to the single element in XPath notation."
            },
            {
              "name": "namespaceMappings",
              "type": "{ [key: string]: string; }",
              "required": true,
              "description": "An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: \"http://calendartypes.org/xsds/GregorianCalendar\"}`. The property names (such as \"greg\") can be any string that doesn't used reserved XPath characters, such as the forward slash \"/\"."
            },
            {
              "name": "name",
              "type": "string",
              "required": true,
              "description": "Name of the attribute."
            },
            {
              "name": "value",
              "type": "string",
              "required": true,
              "description": "New value of the attribute."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "updateElement",
      "kind": "write",
      "description": "Updates the XML of the element identified by xpath.",
      "signatures": [
        {
          "params": [
            {
              "name": "xpath",
              "type": "string",
              "required": true,
              "description": "Absolute path to the single element in XPath notation."
            },
            {
              "name": "xml",
              "type": "string",
              "required": true,
              "description": "New XML content to be stored."
            },
            {
              "name": "namespaceMappings",
              "type": "{ [key: string]: string; }",
              "required": true,
              "description": "An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: \"http://calendartypes.org/xsds/GregorianCalendar\"}`. The property names (such as \"greg\") can be any string that doesn't used reserved XPath characters, such as the forward slash \"/\"."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part.yaml",
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml"
    ]
  }
}