{
  "class": {
    "name": "Word.ParagraphCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi 1.1",
      "status": null
    },
    "description": "Contains a collection of [Word.Paragraph](/en-us/javascript/api/word/word.paragraph) objects.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml\n\n// Inserts an image anchored to the last paragraph.\nawait Word.run(async (context) => {\n  context.document.body.paragraphs\n    .getLast()\n    .insertParagraph(\"\", \"After\")\n    .insertInlinePictureFromBase64(base64Image, \"End\");\n\n  await context.sync();\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "items",
      "type": "Word.Paragraph[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml\n\n// This example starts a new list with the second paragraph.\nawait Word.run(async (context) => {\n  const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;\n  paragraphs.load(\"$none\");\n\n  await context.sync();\n\n  // Start new list using the second paragraph.\n  const list: Word.List = paragraphs.items[1].startNewList();\n  list.load(\"$none\");\n\n  await context.sync();\n\n  // To add new items to the list, use Start or End on the insertLocation parameter.\n  list.insertParagraph(\"New list item at the start of the list\", \"Start\");\n  const paragraph: Word.Paragraph = list.insertParagraph(\"New list item at the end of the list (set to list level 5)\", \"End\");\n\n  // Set up list level for the list item.\n  paragraph.listItem.level = 4;\n\n  // To add paragraphs outside the list, use Before or After.\n  list.insertParagraph(\"New paragraph goes after (not part of the list)\", \"After\");\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Returns a `Paragraph` object that represents a new, blank paragraph added to the document.",
      "signatures": [
        {
          "params": [
            {
              "name": "range",
              "type": "Word.Range",
              "required": true,
              "description": "The range before which you want the new paragraph to be added. The new paragraph doesn't replace the range."
            }
          ],
          "returns": {
            "type": "Word.Paragraph",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "closeUp",
      "kind": null,
      "description": "Removes any spacing before the specified paragraphs.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "decreaseSpacing",
      "kind": null,
      "description": "Decreases the spacing before and after paragraphs in six-point increments.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first paragraph in this collection. Throws an `ItemNotFound` error if the collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Paragraph",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Gets annotations found in the selected paragraph.\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  const annotations: Word.AnnotationCollection = paragraph.getAnnotations();\n  annotations.load(\"id,state,critiqueAnnotation\");\n\n  await context.sync();\n\n  console.log(\"Annotations found:\");\n\n  for (let i = 0; i < annotations.items.length; i++) {\n    const annotation: Word.Annotation = annotations.items[i];\n\n    console.log(`ID ${annotation.id} - state '${annotation.state}':`, annotation.critiqueAnnotation.critique);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first paragraph in this collection. If the collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Paragraph",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getLast",
      "kind": "read",
      "description": "Gets the last paragraph in this collection. Throws an `ItemNotFound` error if the collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Paragraph",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml\n\n// Inserts an image anchored to the last paragraph.\nawait Word.run(async (context) => {\n  context.document.body.paragraphs\n    .getLast()\n    .insertParagraph(\"\", \"After\")\n    .insertInlinePictureFromBase64(base64Image, \"End\");\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getLastOrNullObject",
      "kind": "read",
      "description": "Gets the last paragraph in this collection. If the collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Paragraph",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "increaseSpacing",
      "kind": null,
      "description": "Increases the spacing before and after paragraphs in six-point increments.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "indent",
      "kind": null,
      "description": "Indents the paragraphs by one level.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "indentCharacterWidth",
      "kind": null,
      "description": "Indents the paragraphs in the collection by the specified number of characters.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": "number",
              "required": true,
              "description": "The number of characters by which the specified paragraphs are to be indented."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "indentFirstLineCharacterWidth",
      "kind": null,
      "description": "Indents the first line of the paragraphs in the collection by the specified number of characters.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": "number",
              "required": true,
              "description": "The number of characters by which the first line of each specified paragraph is to be indented."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.ParagraphCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.ParagraphCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.ParagraphCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// This example shows how to get the paragraphs in the Word document\n// along with their text and font size properties.\n// \n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a proxy object for the paragraphs collection.\n    const paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the text and font properties.\n    // It is best practice to always specify the property set. Otherwise, all properties are\n    // returned in on the object.\n    paragraphs.load('text, font/size');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n\n    // Insert code that works with the paragraphs loaded by paragraphs.load().\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "openOrCloseUp",
      "kind": null,
      "description": "Toggles spacing before paragraphs.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "openUp",
      "kind": null,
      "description": "Sets spacing before the specified paragraphs to 12 points.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outdent",
      "kind": null,
      "description": "Removes one level of indent for the paragraphs.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outlineDemote",
      "kind": null,
      "description": "Applies the next heading level style (Heading 1 through Heading 8) to the specified paragraphs.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outlineDemoteToBody",
      "kind": null,
      "description": "Demotes the specified paragraphs to body text by applying the Normal style.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "outlinePromote",
      "kind": null,
      "description": "Applies the previous heading level style (Heading 1 through Heading 8) to the paragraphs in the collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "space1",
      "kind": null,
      "description": "Sets the specified paragraphs to single spacing.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "space1Pt5",
      "kind": null,
      "description": "Sets the specified paragraphs to 1.5-line spacing.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "space2",
      "kind": null,
      "description": "Sets the specified paragraphs to double spacing.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "tabHangingIndent",
      "kind": null,
      "description": "Sets a hanging indent to the specified number of tab stops.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": "number",
              "required": true,
              "description": "The number of tab stops to indent (if positive) or the number of tab stops to remove from the indent (if negative)."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "tabIndent",
      "kind": null,
      "description": "Sets the left indent for the specified paragraphs to the specified number of tab stops.",
      "signatures": [
        {
          "params": [
            {
              "name": "count",
              "type": "number",
              "required": true,
              "description": "The number of tab stops to indent (if positive) or the number of tab stops to remove from the indent (if negative)."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.ParagraphCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.ParagraphCollectionData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ParagraphCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ParagraphCollection",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word",
      "https://docs.microsoft.com/en-us/javascript/api/office/officeextension.clientobject"
    ]
  }
}