{
  "class": {
    "name": "Word.ParagraphFormat",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.5"
    },
    "description": "Represents a style of paragraph in a document.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: // Sets certain aspects of the specified style's paragraph format e.g., the left indent size and the alignment.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to update its paragraph format.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    style.paragraphFormat.leftIndent = 30;\n    style.paragraphFormat.alignment = Word.Alignment.centered;\n    console.log(`Successfully the paragraph format of the '${styleName}' style.`);\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "alignment",
      "type": "Word.Alignment | \"Mixed\" | \"Unknown\" | \"Left\" | \"Centered\" | \"Right\" | \"Justified\"",
      "description": "Specifies the alignment for the specified paragraphs.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Sets certain aspects of the specified style's paragraph format e.g., the left indent size and the alignment.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to update its paragraph format.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    style.paragraphFormat.leftIndent = 30;\n    style.paragraphFormat.alignment = Word.Alignment.centered;\n    console.log(`Successfully the paragraph format of the '${styleName}' style.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "firstLineIndent",
      "type": "number",
      "description": "Specifies the value (in points) for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "keepTogether",
      "type": "boolean",
      "description": "Specifies whether all lines in the specified paragraphs remain on the same page when Microsoft Word repaginates the document.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "keepWithNext",
      "type": "boolean",
      "description": "Specifies whether the specified paragraph remains on the same page as the paragraph that follows it when Microsoft Word repaginates the document.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "leftIndent",
      "type": "number",
      "description": "Specifies the left indent.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: // Sets certain aspects of the specified style's paragraph format e.g., the left indent size and the alignment.\nawait Word.run(async (context) => {\n  const styleName = (document.getElementById(\"style-name\") as HTMLInputElement).value;\n  if (styleName == \"\") {\n    console.warn(\"Enter a style name to update its paragraph format.\");\n    return;\n  }\n\n  const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);\n  style.load();\n  await context.sync();\n\n  if (style.isNullObject) {\n    console.warn(`There's no existing style with the name '${styleName}'.`);\n  } else {\n    style.paragraphFormat.leftIndent = 30;\n    style.paragraphFormat.alignment = Word.Alignment.centered;\n    console.log(`Successfully the paragraph format of the '${styleName}' style.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lineSpacing",
      "type": "number",
      "description": "Specifies the line spacing (in points) for the specified paragraphs.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "lineUnitAfter",
      "type": "number",
      "description": "Specifies the amount of spacing (in gridlines) after the specified paragraphs.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "lineUnitBefore",
      "type": "number",
      "description": "Specifies the amount of spacing (in gridlines) before the specified paragraphs.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "mirrorIndents",
      "type": "boolean",
      "description": "Specifies whether left and right indents are the same width.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "outlineLevel",
      "type": "Word.OutlineLevel | \"OutlineLevel1\" | \"OutlineLevel2\" | \"OutlineLevel3\" | \"OutlineLevel4\" | \"OutlineLevel5\" | \"OutlineLevel6\" | \"OutlineLevel7\" | \"OutlineLevel8\" | \"OutlineLevel9\" | \"OutlineLevelBodyText\"",
      "description": "Specifies the outline level for the specified paragraphs.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "rightIndent",
      "type": "number",
      "description": "Specifies the right indent (in points) for the specified paragraphs.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "spaceAfter",
      "type": "number",
      "description": "Specifies the amount of spacing (in points) after the specified paragraph or text column.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "spaceBefore",
      "type": "number",
      "description": "Specifies the spacing (in points) before the specified paragraphs.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "widowControl",
      "type": "boolean",
      "description": "Specifies whether the first and last lines in the specified paragraph remain on the same page as the rest of the paragraph when Microsoft Word repaginates the document.",
      "since": "WordApi 1.5",
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.ParagraphFormatLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.ParagraphFormat",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.ParagraphFormat",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.ParagraphFormat",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.ParagraphFormatUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.ParagraphFormat",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.ParagraphFormat object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.ParagraphFormatData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.ParagraphFormatData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ParagraphFormat",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ParagraphFormat",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word",
      "https://docs.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets",
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml"
    ]
  }
}