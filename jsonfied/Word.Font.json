{
  "class": {
    "name": "Word.Font",
    "package": "https://learn.microsoft.com/en-us/javascript/api/word",
    "extends": [
      "https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientobject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.1"
    },
    "description": "Represents a font.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Change the font color\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to change the font color of the current selection.\n    selection.font.color = 'blue';\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The font color of the selection has been changed.');\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "allCaps",
      "type": "boolean",
      "description": "Specifies whether the font is formatted as all capital letters, which makes lowercase letters appear as uppercase letters. The possible values are as follows:\n- true: All the text has the All Caps attribute.\n- false: None of the text has the All Caps attribute.\n- null: Returned if some, but not all, of the text has the All Caps attribute.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "bold",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the font is bold. True if the font is formatted as bold, otherwise, false.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Bold format text\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to make the current selection bold.\n    selection.font.bold = true;\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The selection is now bold.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "boldBidirectional",
      "type": "boolean",
      "description": "Specifies whether the font is formatted as bold in a right-to-left language document. The possible values are as follows:\n- true: All the text is bold.\n- false: None of the text is bold.\n- null: Returned if some, but not all, of the text is bold.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "borders",
      "type": "Word.BorderUniversalCollection",
      "description": "Returns a BorderUniversalCollection object that represents all the borders for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "color",
      "type": "string",
      "description": "Specifies the color for the specified font. You can provide the value in the '#RRGGBB' format or the color name.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Change the font color\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to change the font color of the current selection.\n    selection.font.color = 'blue';\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The font color of the selection has been changed.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "colorIndex",
      "type": "Word.ColorIndex | \"Auto\" | \"Black\" | \"Blue\" | \"Turquoise\" | \"BrightGreen\" | \"Pink\" | \"Red\" | \"Yellow\" | \"White\" | \"DarkBlue\" | \"Teal\" | \"Green\" | \"Violet\" | \"DarkRed\" | \"DarkYellow\" | \"Gray50\" | \"Gray25\" | \"ClassicRed\" | \"ClassicBlue\" | \"ByAuthor\"",
      "description": "Specifies a ColorIndex value that represents the color for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "colorIndexBidirectional",
      "type": "Word.ColorIndex | \"Auto\" | \"Black\" | \"Blue\" | \"Turquoise\" | \"BrightGreen\" | \"Pink\" | \"Red\" | \"Yellow\" | \"White\" | \"DarkBlue\" | \"Teal\" | \"Green\" | \"Violet\" | \"DarkRed\" | \"DarkYellow\" | \"Gray50\" | \"Gray25\" | \"ClassicRed\" | \"ClassicBlue\" | \"ByAuthor\"",
      "description": "Specifies the color for the Font object in a right-to-left language document.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "contextualAlternates",
      "type": "boolean",
      "description": "Specifies whether contextual alternates are enabled for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "diacriticColor",
      "type": "string",
      "description": "Specifies the color to be used for diacritics for the Font object. You can provide the value in the '#RRGGBB' format.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "disableCharacterSpaceGrid",
      "type": "boolean",
      "description": "Specifies whether Microsoft Word ignores the number of characters per line for the corresponding Font object.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "doubleStrikeThrough",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the font has a double strikethrough. True if the font is formatted as double strikethrough text, otherwise, false.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "emboss",
      "type": "boolean",
      "description": "Specifies whether the font is formatted as embossed. The possible values are as follows:\n- true: All the text is embossed.\n- false: None of the text is embossed.\n- null: Returned if some, but not all, of the text is embossed.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "emphasisMark",
      "type": "Word.EmphasisMark | \"None\" | \"OverSolidCircle\" | \"OverComma\" | \"OverWhiteCircle\" | \"UnderSolidCircle\"",
      "description": "Specifies an EmphasisMark value that represents the emphasis mark for a character or designated character string.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "engrave",
      "type": "boolean",
      "description": "Specifies whether the font is formatted as engraved. The possible values are as follows:\n- true: All the text is engraved.\n- false: None of the text is engraved.\n- null: Returned if some, but not all, of the text is engraved.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "fill",
      "type": "Word.FillFormat",
      "description": "Returns a FillFormat object that contains fill formatting properties for the font used by the range of text.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "glow",
      "type": "Word.GlowFormat",
      "description": "Returns a GlowFormat object that represents the glow formatting for the font used by the range of text.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "hidden",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the font is tagged as hidden. True if the font is formatted as hidden text, otherwise, false.",
      "since": "WordApiDesktop 1.2",
      "examples": []
    },
    {
      "name": "highlightColor",
      "type": "string",
      "description": "Specifies the highlight color. To set it, use a value either in the '#RRGGBB' format or the color name. To remove highlight color, set it to null. The returned highlight color can be in the '#RRGGBB' format, an empty string for mixed highlight colors, or null for no highlight color. Note: Only the default highlight colors are available in Office for Windows Desktop. These are \"Yellow\", \"Lime\", \"Turquoise\", \"Pink\", \"Blue\", \"Red\", \"DarkBlue\", \"Teal\", \"Green\", \"Purple\", \"DarkRed\", \"Olive\", \"Gray\", \"LightGray\", and \"Black\". When the add-in runs in Office for Windows Desktop, any other color is converted to the closest color when applied to the font.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Highlight selected text\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to highlight the current selection.\n    selection.font.highlightColor = '#FFFF00'; // Yellow\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The selection has been highlighted.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "italic",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the font is italicized. True if the font is italicized, otherwise, false.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "italicBidirectional",
      "type": "boolean",
      "description": "Specifies whether the font is italicized in a right-to-left language document. The possible values are as follows:\n- true: All the text is italicized.\n- false: None of the text is italicized.\n- null: Returned if some, but not all, of the text is italicized.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "kerning",
      "type": "number",
      "description": "Specifies the minimum font size for which Microsoft Word will adjust kerning automatically.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "ligature",
      "type": "Word.Ligature | \"None\" | \"Standard\" | \"Contextual\" | \"StandardContextual\" | \"Historical\" | \"StandardHistorical\" | \"ContextualHistorical\" | \"StandardContextualHistorical\" | \"Discretional\" | \"StandardDiscretional\" | \"ContextualDiscretional\" | \"StandardContextualDiscretional\" | \"HistoricalDiscretional\" | \"StandardHistoricalDiscretional\" | \"ContextualHistoricalDiscretional\" | \"All\"",
      "description": "Specifies the ligature setting for the Font object.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "line",
      "type": "Word.LineFormat",
      "description": "Returns a LineFormat object that specifies the formatting for a line.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "name",
      "type": "string",
      "description": "Specifies a value that represents the name of the font.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Change the font name\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to change the current selection's font name.\n    selection.font.name = 'Arial';\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The font name has changed.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "nameAscii",
      "type": "string",
      "description": "Specifies the font used for Latin text (characters with character codes from 0 (zero) through 127).",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "nameBidirectional",
      "type": "string",
      "description": "Specifies the font name in a right-to-left language document.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "nameFarEast",
      "type": "string",
      "description": "Specifies the East Asian font name.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "nameOther",
      "type": "string",
      "description": "Specifies the font used for characters with codes from 128 through 255.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "numberForm",
      "type": "Word.NumberForm | \"Default\" | \"Lining\" | \"OldStyle\"",
      "description": "Specifies the number form setting for an OpenType font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "numberSpacing",
      "type": "Word.NumberSpacing | \"Default\" | \"Proportional\" | \"Tabular\"",
      "description": "Specifies the number spacing setting for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "outline",
      "type": "boolean",
      "description": "Specifies if the font is formatted as outlined. The possible values are as follows:\n- true: All the text is outlined.\n- false: None of the text is outlined.\n- null: Returned if some, but not all, of the text is outlined.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "position",
      "type": "number",
      "description": "Specifies the position of text (in points) relative to the base line.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "reflection",
      "type": "Word.ReflectionFormat",
      "description": "Returns a ReflectionFormat object that represents the reflection formatting for a shape.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "scaling",
      "type": "number",
      "description": "Specifies the scaling percentage applied to the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "shadow",
      "type": "boolean",
      "description": "Specifies if the font is formatted as shadowed. The possible values are as follows:\n- true: All the text is shadowed.\n- false: None of the text is shadowed.\n- null: Returned if some, but not all, of the text is shadowed.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "size",
      "type": "number",
      "description": "Specifies a value that represents the font size in points.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Change the font size\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to change the current selection's font size.\n    selection.font.size = 20;\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The font size has changed.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "sizeBidirectional",
      "type": "number",
      "description": "Specifies the font size in points for right-to-left text.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "smallCaps",
      "type": "boolean",
      "description": "Specifies whether the font is formatted as small caps, which makes lowercase letters appear as small uppercase letters. The possible values are as follows:\n- true: All the text has the Small Caps attribute.\n- false: None of the text has the Small Caps attribute.\n- null: Returned if some, but not all, of the text has the Small Caps attribute.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "spacing",
      "type": "number",
      "description": "Specifies the spacing between characters.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "strikeThrough",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the font has a strikethrough. True if the font is formatted as strikethrough text, otherwise, false.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Strike format text\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to strikethrough the font of the current selection.\n    selection.font.strikeThrough = true;\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The selection now has a strikethrough.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "stylisticSet",
      "type": "Word.StylisticSet | \"Default\" | \"Set01\" | \"Set02\" | \"Set03\" | \"Set04\" | \"Set05\" | \"Set06\" | \"Set07\" | \"Set08\" | \"Set09\" | \"Set10\" | \"Set11\" | \"Set12\" | \"Set13\" | \"Set14\" | \"Set15\" | \"Set16\" | \"Set17\" | \"Set18\" | \"Set19\" | \"Set20\"",
      "description": "Specifies the stylistic set for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "subscript",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the font is a subscript. True if the font is formatted as subscript, otherwise, false.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "superscript",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the font is a superscript. True if the font is formatted as superscript, otherwise, false.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "textColor",
      "type": "Word.ColorFormat",
      "description": "Returns a ColorFormat object that represents the color for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "textShadow",
      "type": "Word.ShadowFormat",
      "description": "Returns a ShadowFormat object that specifies the shadow formatting for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "threeDimensionalFormat",
      "type": "Word.ThreeDimensionalFormat",
      "description": "Returns a ThreeDimensionalFormat object that contains 3-dimensional (3D) effect formatting properties for the font.",
      "since": "WordApi BETA",
      "examples": []
    },
    {
      "name": "underline",
      "type": "Word.UnderlineType | \"Mixed\" | \"None\" | \"Hidden\" | \"DotLine\" | \"Single\" | \"Word\" | \"Double\" | \"Thick\" | \"Dotted\" | \"DottedHeavy\" | \"DashLine\" | \"DashLineHeavy\" | \"DashLineLong\" | \"DashLineLongHeavy\" | \"DotDashLine\" | \"DotDashLineHeavy\" | \"TwoDotDashLine\" | \"TwoDotDashLineHeavy\" | \"Wave\" | \"WaveHeavy\" | \"WaveDouble\"",
      "description": "Specifies a value that indicates the font's underline type. 'None' if the font isn't underlined.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Underline format text\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Create a range proxy object for the current selection.\n    const selection = context.document.getSelection();\n\n    // Queue a command to underline the current selection.\n    selection.font.underline = Word.UnderlineType.single;\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The selection now has an underline style.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "underlineColor",
      "type": "string",
      "description": "Specifies the color of the underline for the Font object. You can provide the value in the '#RRGGBB' format.",
      "since": "WordApi BETA",
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "decreaseFontSize",
      "kind": "write",
      "description": "Decreases the font size to the next available size.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "increaseFontSize",
      "kind": "write",
      "description": "Increases the font size to the next available size.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.FontLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.Font",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.Font",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.Font",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "reset",
      "kind": "write",
      "description": "Removes manual character formatting.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.FontUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.Font",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "setAsTemplateDefault",
      "kind": "configure",
      "description": "Sets the specified font formatting as the default for the active document and all new documents based on the active template.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.Font object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.FontData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.FontData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Font",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Font",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.font"
    ]
  }
}