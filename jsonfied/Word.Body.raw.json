```json
{
  "class": {
    "name": "Body",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.1"
    },
    "description": "Represents the body of a document or a section.",
    "examples": [
      {
        "description": "Get the body object and read its font size.",
        "usage_code": "await Word.run(async (context) => {\n    // Create a proxy object for the document body.\n    const body = context.document.body;\n    body.load(\"font/size\");\n\n    await context.sync();\n\n    console.log(\"Font size: \" + body.font.size);\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "contentControls",
      "type": "Word.ContentControlCollection",
      "description": "Gets the collection of rich text content control objects in the body.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "endnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of endnotes in the body.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "fields",
      "type": "Word.FieldCollection",
      "description": "Gets the collection of field objects in the body.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": "Gets all fields in the document body.",
          "usage_code": "await Word.run(async (context) => {\n  const fields: Word.FieldCollection = context.document.body.fields.load(\"items\");\n\n  await context.sync();\n\n  if (fields.items.length === 0) {\n    console.log(\"No fields in this document.\");\n  } else {\n    fields.load([\"code\", \"result\"]);\n    await context.sync();\n\n    for (let i = 0; i < fields.items.length; i++) {\n      console.log(`Field ${i + 1}'s code: ${fields.items[i].code}`, `Field ${i + 1}'s result: ${JSON.stringify(fields.items[i].result)}`);\n    }\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "font",
      "type": "Word.Font",
      "description": "Gets the text format of the body. Use this to get and set font name, size, color and other properties.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": "Gets the style and the font size, font name, and font color properties on the body object.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to load font and style information for the document body.\n  body.load(\"font/size, font/name, font/color, style\");\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  // Show font-related property values on the body object.\n  const results =\n    \"Font size: \" +\n    body.font.size +\n    \"; Font name: \" +\n    body.font.name +\n    \"; Font color: \" +\n    body.font.color +\n    \"; Body style: \" +\n    body.style;\n\n  console.log(results);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "footnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of footnotes in the body.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": "Gets the footnotes in the document body.",
          "usage_code": "await Word.run(async (context) => {\n  const footnotes: Word.NoteItemCollection = context.document.body.footnotes;\n  footnotes.load(\"length\");\n  await context.sync();\n\n  console.log(\"Number of footnotes in the document body: \" + footnotes.items.length);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "inlinePictures",
      "type": "Word.InlinePictureCollection",
      "description": "Gets the collection of InlinePicture objects in the body. The collection doesn't include floating images.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": "Gets the first image in the document.",
          "usage_code": "await Word.run(async (context) => {\n  const firstPicture: Word.InlinePicture = context.document.body.inlinePictures.getFirst();\n  firstPicture.load(\"width, height, imageFormat\");\n\n  await context.sync();\n  console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`, `Image format: ${firstPicture.imageFormat}`);\n  // Get the image encoded as Base64.\n  const base64 = firstPicture.getBase64ImageSrc();\n\n  await context.sync();\n  console.log(base64.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lists",
      "type": "Word.ListCollection",
      "description": "Gets the collection of list objects in the body.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Gets information about the first list in the document.",
          "usage_code": "await Word.run(async (context) => {\n  const lists: Word.ListCollection = context.document.body.lists;\n  lists.load(\"items\");\n\n  await context.sync();\n\n  if (lists.items.length === 0) {\n    console.warn(\"There are no lists in this document.\");\n    return;\n  }\n  \n  // Get the first list.\n  const list: Word.List = lists.getFirst();\n  list.load(\"levelTypes,levelExistences\");\n\n  await context.sync();\n\n  const levelTypes  = list.levelTypes;\n  console.log(\"Level types of the first list:\");\n  for (let i = 0; i < levelTypes.length; i++) {\n    console.log(`- Level ${i + 1} (index ${i}): ${levelTypes[i]}`);\n  }\n\n  const levelExistences = list.levelExistences;\n  console.log(\"Level existences of the first list:\");\n  for (let i = 0; i < levelExistences.length; i++) {\n    console.log(`- Level ${i + 1} (index ${i}): ${levelExistences[i]}`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "paragraphs",
      "type": "Word.ParagraphCollection",
      "description": "Gets the collection of paragraph objects in the body.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": "Counts how many times each term appears in the document.",
          "usage_code": "await Word.run(async (context) => {\n  const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;\n  paragraphs.load(\"text\");\n  await context.sync();\n\n  // Split up the document text using existing spaces as the delimiter.\n  let text = [];\n  paragraphs.items.forEach((item) => {\n    let paragraph = item.text.trim();\n    if (paragraph) {\n      paragraph.split(\" \").forEach((term) => {\n        let currentTerm = term.trim();\n        if (currentTerm) {\n          text.push(currentTerm);\n        }\n      });\n    }\n  });\n\n  // Determine the list of unique terms.\n  let makeTextDistinct = new Set(text);\n  let distinctText = Array.from(makeTextDistinct);\n  let allSearchResults = [];\n\n  for (let i = 0; i < distinctText.length; i++) {\n    let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });\n    results.load(\"text\");\n\n    // Map each search term with its results.\n    let correlatedResults = {\n      searchTerm: distinctText[i],\n      hits: results\n    };\n\n    allSearchResults.push(correlatedResults);\n  }\n\n  await context.sync();\n\n  // Display the count for each search term.\n  allSearchResults.forEach((result) => {\n    let length = result.hits.items.length;\n\n    console.log(\"Search term: \" + result.searchTerm + \" => Count: \" + length);\n  });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "parentBody",
      "type": "Word.Body",
      "description": "Gets the parent body of the body. For example, a table cell body's parent body could be a header. Throws an `ItemNotFound` error if there isn't a parent body.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentBodyOrNullObject",
      "type": "Word.Body",
      "description": "Gets the parent body of the body. For example, a table cell body's parent body could be a header. If there isn't a parent body, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentContentControl",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the body. Throws an `ItemNotFound` error if there isn't a parent content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "parentContentControlOrNullObject",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the body. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentSection",
      "type": "Word.Section",
      "description": "Gets the parent section of the body. Throws an `ItemNotFound` error if there isn't a parent section.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentSectionOrNullObject",
      "type": "Word.Section",
      "description": "Gets the parent section of the body. If there isn't a parent section, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "shapes",
      "type": "Word.ShapeCollection",
      "description": "Gets the collection of shape objects in the body, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.",
      "since": "WordApiDesktop 1.2",
      "examples": [
        {
          "description": "Gets text boxes in main document.",
          "usage_code": "await Word.run(async (context) => {\n  // Gets text boxes in main document.\n  const shapes: Word.ShapeCollection = context.document.body.shapes;\n  shapes.load();\n  await context.sync();\n\n  if (shapes.items.length > 0) {\n    shapes.items.forEach(function(shape, index) {\n      if (shape.type === Word.ShapeType.textBox) {\n        console.log(`Shape ${index} in the main document has a text box. Properties:`, shape);\n      }\n    });\n  } else {\n    console.log(\"No shapes found in main document.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "style",
      "type": "string",
      "description": "Specifies the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the \"styleBuiltIn\" property.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "styleBuiltIn",
      "type": "Word.BuiltInStyleName | \"Other\" | \"Normal\" | \"Heading1\" | \"Heading2\" | \"Heading3\" | \"Heading4\" | \"Heading5\" | \"Heading6\" | \"Heading7\" | \"Heading8\" | \"Heading9\" | \"Toc1\" | \"Toc2\" | \"Toc3\" | \"Toc4\" | \"Toc5\" | \"Toc6\" | \"Toc7\" | \"Toc8\" | \"Toc9\" | \"FootnoteText\" | \"Header\" | \"Footer\" | \"Caption\" | \"FootnoteReference\" | \"EndnoteReference\" | \"EndnoteText\" | \"Title\" | \"Subtitle\" | \"Hyperlink\" | \"Strong\" | \"Emphasis\" | \"NoSpacing\" | \"ListParagraph\" | \"Quote\" | \"IntenseQuote\" | \"SubtleEmphasis\" | \"IntenseEmphasis\" | \"SubtleReference\" | \"IntenseReference\" | \"BookTitle\" | \"Bibliography\" | \"TocHeading\" | \"TableGrid\" | \"PlainTable1\" | \"PlainTable2\" | \"PlainTable3\" | \"PlainTable4\" | \"PlainTable5\" | \"TableGridLight\" | \"GridTable1Light\" | \"GridTable1Light_Accent1\" | \"GridTable1Light_Accent2\" | \"GridTable1Light_Accent3\" | \"GridTable1Light_Accent4\" | \"GridTable1Light_Accent5\" | \"GridTable1Light_Accent6\" | \"GridTable2\" | \"GridTable2_Accent1\" | \"GridTable2_Accent2\" | \"GridTable2_Accent3\" | \"GridTable2_Accent4\" | \"GridTable2_Accent5\" | \"GridTable2_Accent6\" | \"GridTable3\" | \"GridTable3_Accent1\" | \"GridTable3_Accent2\" | \"GridTable3_Accent3\" | \"GridTable3_Accent4\" | \"GridTable3_Accent5\" | \"GridTable3_Accent6\" | \"GridTable4\" | \"GridTable4_Accent1\" | \"GridTable4_Accent2\" | \"GridTable4_Accent3\" | \"GridTable4_Accent4\" | \"GridTable4_Accent5\" | \"GridTable4_Accent6\" | \"GridTable5Dark\" | \"GridTable5Dark_Accent1\" | \"GridTable5Dark_Accent2\" | \"GridTable5Dark_Accent3\" | \"GridTable5Dark_Accent4\" | \"GridTable5Dark_Accent5\" | \"GridTable5Dark_Accent6\" | \"GridTable6Colorful\" | \"GridTable6Colorful_Accent1\" | \"GridTable6Colorful_Accent2\" | \"GridTable6Colorful_Accent3\" | \"GridTable6Colorful_Accent4\" | \"GridTable6Colorful_Accent5\" | \"GridTable6Colorful_Accent6\" | \"GridTable7Colorful\" | \"GridTable7Colorful_Accent1\" | \"GridTable7Colorful_Accent2\" | \"GridTable7Colorful_Accent3\" | \"GridTable7Colorful_Accent4\" | \"GridTable7Colorful_Accent5\" | \"GridTable7Colorful_Accent6\" | \"ListTable1Light\" | \"ListTable1Light_Accent1\" | \"ListTable1Light_Accent2\" | \"ListTable1Light_Accent3\" | \"ListTable1Light_Accent4\" | \"ListTable1Light_Accent5\" | \"ListTable1Light_Accent6\" | \"ListTable2\" | \"ListTable2_Accent1\" | \"ListTable2_Accent2\" | \"ListTable2_Accent3\" | \"ListTable2_Accent4\" | \"ListTable2_Accent5\" | \"ListTable2_Accent6\" | \"ListTable3\" | \"ListTable3_Accent1\" | \"ListTable3_Accent2\" | \"ListTable3_Accent3\" | \"ListTable3_Accent4\" | \"ListTable3_Accent5\" | \"ListTable3_Accent6\" | \"ListTable4\" | \"ListTable4_Accent1\" | \"ListTable4_Accent2\" | \"ListTable4_Accent3\" | \"ListTable4_Accent4\" | \"ListTable4_Accent5\" | \"ListTable4_Accent6\" | \"ListTable5Dark\" | \"ListTable5Dark_Accent1\" | \"ListTable5Dark_Accent2\" | \"ListTable5Dark_Accent3\" | \"ListTable5Dark_Accent4\" | \"ListTable5Dark_Accent5\" | \"ListTable5Dark_Accent6\" | \"ListTable6Colorful\" | \"ListTable6Colorful_Accent1\" | \"ListTable6Colorful_Accent2\" | \"ListTable6Colorful_Accent3\" | \"ListTable6Colorful_Accent4\" | \"ListTable6Colorful_Accent5\" | \"ListTable6Colorful_Accent6\" | \"ListTable7Colorful\" | \"ListTable7Colorful_Accent1\" | \"ListTable7Colorful_Accent2\" | \"ListTable7Colorful_Accent3\" | \"ListTable7Colorful_Accent4\" | \"ListTable7Colorful_Accent5\" | \"ListTable7Colorful_Accent6\"",
      "description": "Specifies the built-in style name for the body. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the \"style\" property.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "tables",
      "type": "Word.TableCollection",
      "description": "Gets the collection of table objects in the body.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Gets the content of the first cell in the first table.",
          "usage_code": "await Word.run(async (context) => {\n  const firstCell: Word.Body = context.document.body.tables.getFirst().getCell(0, 0).body;\n  firstCell.load(\"text\");\n\n  await context.sync();\n  console.log(\"First cell's text is: \" + firstCell.text);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "text",
      "type": "string",
      "description": "Gets the text of the body. Use the insertText method to insert text.",
      "since": "WordApi 1.1",
      "examples": [
        {
          "description": "Gets the text content of the body.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to load the text in document body.\n  body.load(\"text\");\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  console.log(\"Body contents (text): \" + body.text);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "type",
      "type": "Word.BodyType | \"Unknown\" | \"MainDoc\" | \"Section\" | \"Header\" | \"Footer\" | \"TableCell\" | \"Footnote\" | \"Endnote\" | \"NoteItem\" | \"Shape\"",
      "description": "Gets the type of the body. The type can be 'MainDoc', 'Section', 'Header', 'Footer', or 'TableCell'. Additional types âFootnoteâ, âEndnoteâ, and âNoteItemâ are supported in WordAPIOnline 1.1 and later.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Gets the referenced note's item type and body type, which are both \"Footnote\".",
          "usage_code": "await Word.run(async (context) => {\n  const footnotes: Word.NoteItemCollection = context.document.body.footnotes;\n  footnotes.load(\"items\");\n  await context.sync();\n\n  const referenceNumber = (document.getElementById(\"input-reference\") as HTMLInputElement).value;\n  const mark = (referenceNumber as number) - 1;\n  const item: Word.NoteItem = footnotes.items[mark];\n  console.log(`Note type of footnote ${referenceNumber}: ${item.type}`);\n\n  item.body.load(\"type\");\n  await context.sync();\n\n  console.log(`Body type of note: ${item.body.type}`);\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "clear",
      "kind": "delete",
      "description": "Clears the contents of the body object. The user can perform the undo operation on the cleared content.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Clears out the content from the document body.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to clear the contents of the body.\n  body.clear();\n\n  console.log(\"Cleared the body contents.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getComments",
      "kind": "read",
      "description": "Gets comments associated with the body.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CommentCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Gets the comments in the document body.",
          "usage_code": "await Word.run(async (context) => {\n  const comments: Word.CommentCollection = context.document.body.getComments();\n\n  // Load objects to log in the console.\n  comments.load();\n  await context.sync();\n\n  console.log(\"All comments:\", comments);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getContentControls",
      "kind": "read",
      "description": "Gets the currently supported content controls in the body.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.ContentControlOptions",
              "required": false,
              "description": "Optional. Options that define which content controls are returned."
            }
          ],
          "returns": {
            "type": "Word.ContentControlCollection",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getHtml",
      "kind": "serialize",
      "description": "Gets an HTML representation of the body object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use `Body.getOoxml()` and convert the returned XML to HTML.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Gets the HTML that represents the content of the body.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to get the HTML contents of the body.\n  const bodyHTML = body.getHtml();\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  console.log(\"Body contents (HTML): \" + bodyHTML.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getOoxml",
      "kind": "serialize",
      "description": "Gets the OOXML (Office Open XML) representation of the body object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Gets the OOXML that represents the content of the body.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to get the OOXML contents of the body.\n  const bodyOOXML = body.getOoxml();\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  console.log(\"Body contents (OOXML): \" + bodyOOXML.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getRange",
      "kind": "read",
      "description": "Gets the whole body, or the starting or ending point of the body, as a range.",
      "signatures": [
        {
          "params": [
            {
              "name": "rangeLocation",
              "type": "Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | Word.RangeLocation.after | Word.RangeLocation.content | \"Whole\" | \"Start\" | \"End\" | \"After\" | \"Content\"",
              "required": false,
              "description": "Optional. The range location must be 'Whole', 'Start', 'End', 'After', or 'Content'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getReviewedText",
      "kind": "read",
      "description": "Gets reviewed text based on ChangeTrackingVersion selection.",
      "signatures": [
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": "Word.ChangeTrackingVersion",
              "required": false,
              "description": "Optional. The value must be 'Original' or 'Current'. The default is 'Current'."
            }
          ],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": "\"Original\" | \"Current\"",
              "required": false,
              "description": "Optional. The value must be 'Original' or 'Current'. The default is 'Current'."
            }
          ],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getTrackedChanges",
      "kind": "read",
      "description": "Gets the collection of the TrackedChange objects in the body.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TrackedChangeCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Gets all tracked changes.",
          "usage_code": "await Word.run(async (context) => {\n  const body: Word.Body = context.document.body;\n  const trackedChanges: Word.TrackedChangeCollection = body.getTrackedChanges();\n  trackedChanges.load();\n  await context.sync();\n\n  console.log(trackedChanges);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertBreak",
      "kind": "create",
      "description": "Inserts a break at the specified location in the main document.",
      "signatures": [
        {
          "params": [
            {
              "name": "breakType",
              "type": "Word.BreakType | \"Page\" | \"Next\" | \"SectionNext\" | \"SectionContinuous\" | \"SectionEven\" | \"SectionOdd\" | \"Line\"",
              "required": true,
              "description": "Required. The break type to add to the body."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.start | Word.InsertLocation.end | \"Start\" | \"End\"",
              "required": true,
              "description": "Required. The value must be 'Start' or 'End'."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Inserts a page break at the beginning of the document.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to insert a page break at the start of the document body.\n  body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  console.log(\"Added a page break at the start of the document body.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertContentControl",
      "kind": "create",
      "description": "Wraps the Body object with a content control.",
      "signatures": [
        {
          "params": [
            {
              "name": "contentControlType",
              "type": "Word.ContentControlType.richText | Word.ContentControlType.plainText | Word.ContentControlType.checkBox | Word.ContentControlType.dropDownList | Word.ContentControlType.comboBox | \"RichText\" | \"PlainText\" | \"CheckBox\" | \"DropDownList\" | \"ComboBox\"",
              "required": false,
              "description": "Optional. Content control type to insert. Must be 'RichText', 'PlainText', 'CheckBox', 'DropDownList', or 'ComboBox'. The default is 'RichText'."
            }
          ],
          "returns": {
            "type": "Word.ContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Creates a content control using the document body.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to wrap the body in a content control.\n  body.insertContentControl();\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  console.log(\"Wrapped the body in a content control.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertFileFromBase64",
      "kind": "create",
      "description": "Inserts a document into the body at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64File",
              "type": "string",
              "required": true,
              "description": "Required. The Base64-encoded content of a .docx file."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | \"Replace\" | \"Start\" | \"End\"",
              "required": true,
              "description": "Required. The value must be 'Replace', 'Start', or 'End'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Inserts the body from the external document at the beginning of this document.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to insert the Base64-encoded string representation of the body of the selected .docx file at the beginning of the current document.\n  body.insertFileFromBase64(externalDocument, Word.InsertLocation.start);\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  console.log(\"Added Base64-encoded text to the beginning of the document body.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertHtml",
      "kind": "create",
      "description": "Inserts HTML at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "html",
              "type": "string",
              "required": true,
              "description": "Required. The HTML to be inserted in the document."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | \"Replace\" | \"Start\" | \"End\"",
              "required": true,
              "description": "Required. The value must be 'Replace', 'Start', or 'End'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Inserts the HTML at the beginning of this document.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Queue a command to insert HTML at the beginning of the document.\n  body.insertHtml(\"<strong>This is text inserted with body.insertHtml()</strong>\", Word.InsertLocation.start);\n\n  // Synchronize the document state by executing the queued commands, and return a promise to indicate task completion.\n  await context.sync();\n\n  console.log(\"HTML added to the beginning of the document body.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertInlinePictureFromBase64",
      "kind": "create",
      "description": "Inserts a picture into the body at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64EncodedImage",
              "type": "string",
              "required": true,
              "description": "Required. The Base64-encoded image to be inserted in the body."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.start | Word.InsertLocation.end | \"Start\" | \"End\"",
              "required": true,
              "description": "Required. The value must be 'Start' or 'End'."
            }
          ],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Inserts an image inline at the beginning of this document.",
          "usage_code": "await Word.run(async (context) => {\n  // Create a proxy object for the document body.\n  const body: Word.Body = context.document.body;\n\n  // Base64-encoded image to insert inline.\n  const base64EncodedImg =\n    \"iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6