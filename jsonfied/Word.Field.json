{
  "class": {
    "name": "Field",
    "package": "word",
    "extends": ["OfficeExtension.ClientObject"],
    "api_set": { "name": "WordApi", "status": "1.4" },
    "description": "Represents a field.\n\n[ API set: WordApi 1.4 ]\n\nImportant: To learn more about which fields can be inserted, see the Word.Range.insertField API introduced in requirement set 1.5. Support for managing fields is similar to what's available in the Word UI. However, the Word UI on the web primarily only supports fields as read-only (see Field codes in Word for the web). To learn more about Word UI clients that more fully support fields, see the product list at the beginning of Insert, edit, and view fields in Word.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets the first field in the document.\nawait Word.run(async (context) => {\n  const field: Word.Field = context.document.body.fields.getFirstOrNullObject();\n  field.load([\"code\", \"result\", \"locked\", \"type\", \"data\", \"kind\"]);\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"This document has no fields.\");\n  } else {\n    console.log(\"Code of first field: \" + field.code, \"Result of first field: \" + JSON.stringify(field.result), \"Type of first field: \" + field.type, \"Is the first field locked? \" + field.locked, \"Kind of the first field: \" + field.kind);\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "code",
      "type": "string",
      "description": "Specifies the field's code instruction.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets the first field in the document.\nawait Word.run(async (context) => {\n  const field: Word.Field = context.document.body.fields.getFirstOrNullObject();\n  field.load([\"code\", \"result\", \"locked\", \"type\", \"data\", \"kind\"]);\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"This document has no fields.\");\n  } else {\n    console.log(\"Code of first field: \" + field.code, \"Result of first field: \" + JSON.stringify(field.result), \"Type of first field: \" + field.type, \"Is the first field locked? \" + field.locked, \"Kind of the first field: \" + field.kind);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "data",
      "type": "string",
      "description": "Specifies data in an \"Addin\" field. If the field isn't an \"Addin\" field, it is null and it will throw a general exception when code attempts to set it.",
      "since": "WordApi 1.5",
      "examples": []
    },
    {
      "name": "kind",
      "type": "Word.FieldKind | \"None\" | \"Hot\" | \"Warm\" | \"Cold\"",
      "description": "Gets the field's kind.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets the first field in the document.\nawait Word.run(async (context) => {\n  const field: Word.Field = context.document.body.fields.getFirstOrNullObject();\n  field.load([\"code\", \"result\", \"locked\", \"type\", \"data\", \"kind\"]);\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"This document has no fields.\");\n  } else {\n    console.log(\"Code of first field: \" + field.code, \"Result of first field: \" + JSON.stringify(field.result), \"Type of first field: \" + field.type, \"Is the first field locked? \" + field.locked, \"Kind of the first field: \" + field.kind);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "linkFormat",
      "type": "Word.LinkFormat",
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n\nGets a LinkFormat object that represents the link options of the field.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "locked",
      "type": "boolean",
      "description": "Specifies whether the field is locked. true if the field is locked, false otherwise.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets the first field in the selection and toggles between setting it to locked or unlocked.\nawait Word.run(async (context) => {\n  let field = context.document.getSelection().fields.getFirstOrNullObject();\n  field.load([\"code\", \"result\", \"type\", \"locked\"]);\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"The selection has no fields.\");\n  } else {\n    console.log(`The first field in the selection is currently ${field.locked ? \"locked\" : \"unlocked\"}.`);\n    field.locked = !field.locked;\n    await context.sync();\n\n    console.log(`The first field in the selection is now ${field.locked ? \"locked\" : \"unlocked\"}.`);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "oleFormat",
      "type": "Word.OleFormat",
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n\nGets an OleFormat object that represents the OLE characteristics (other than linking) for the field.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": []
    },
    {
      "name": "parentBody",
      "type": "Word.Body",
      "description": "Gets the parent body of the field.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets the parent body of the first field in the document.\nawait Word.run(async (context) => {\n  const field: Word.Field = context.document.body.fields.getFirstOrNullObject();\n  field.load(\"parentBody/text\");\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"This document has no fields.\");\n  } else {\n    const parentBody: Word.Body = field.parentBody;\n    console.log(\"Text of first field's parent body: \" + JSON.stringify(parentBody.text));\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "parentContentControl",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the field. Throws an ItemNotFound error if there isn't a parent content control.",
      "since": "WordApi 1.4",
      "examples": []
    },
    {
      "name": "parentContentControlOrNullObject",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the field. If there isn't a parent content control, then this method will return an object with its isNullObject property set to true. For further information, see *OrNullObject methods and properties.",
      "since": "WordApi 1.4",
      "examples": []
    },
    {
      "name": "parentTable",
      "type": "Word.Table",
      "description": "Gets the table that contains the field. Throws an ItemNotFound error if it isn't contained in a table.",
      "since": "WordApi 1.4",
      "examples": []
    },
    {
      "name": "parentTableCell",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the field. Throws an ItemNotFound error if it isn't contained in a table cell.",
      "since": "WordApi 1.4",
      "examples": []
    },
    {
      "name": "parentTableCellOrNullObject",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the field. If it isn't contained in a table cell, then this method will return an object with its isNullObject property set to true. For further information, see *OrNullObject methods and properties.",
      "since": "WordApi 1.4",
      "examples": []
    },
    {
      "name": "parentTableOrNullObject",
      "type": "Word.Table",
      "description": "Gets the table that contains the field. If it isn't contained in a table, then this method will return an object with its isNullObject property set to true. For further information, see *OrNullObject methods and properties.",
      "since": "WordApi 1.4",
      "examples": []
    },
    {
      "name": "result",
      "type": "Word.Range",
      "description": "Gets the field's result data.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets the first field in the document.\nawait Word.run(async (context) => {\n  const field: Word.Field = context.document.body.fields.getFirstOrNullObject();\n  field.load([\"code\", \"result\", \"locked\", \"type\", \"data\", \"kind\"]);\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"This document has no fields.\");\n  } else {\n    console.log(\"Code of first field: \" + field.code, \"Result of first field: \" + JSON.stringify(field.result), \"Type of first field: \" + field.type, \"Is the first field locked? \" + field.locked, \"Kind of the first field: \" + field.kind);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "showCodes",
      "type": "boolean",
      "description": "Specifies whether the field codes are displayed for the specified field. true if the field codes are displayed, false otherwise.",
      "since": "WordApiDesktop 1.1",
      "examples": []
    },
    {
      "name": "type",
      "type": "Word.FieldType | \"Addin\" | \"AddressBlock\" | \"Advance\" | \"Ask\" | \"Author\" | \"AutoText\" | \"AutoTextList\" | \"BarCode\" | \"Bibliography\" | \"BidiOutline\" | \"Citation\" | \"Comments\" | \"Compare\" | \"CreateDate\" | \"Data\" | \"Database\" | \"Date\" | \"DisplayBarcode\" | \"DocProperty\" | \"DocVariable\" | \"EditTime\" | \"Embedded\" | \"EQ\" | \"Expression\" | \"FileName\" | \"FileSize\" | \"FillIn\" | \"FormCheckbox\" | \"FormDropdown\" | \"FormText\" | \"GotoButton\" | \"GreetingLine\" | \"Hyperlink\" | \"If\" | \"Import\" | \"Include\" | \"IncludePicture\" | \"IncludeText\" | \"Index\" | \"Info\" | \"Keywords\" | \"LastSavedBy\" | \"Link\" | \"ListNum\" | \"MacroButton\" | \"MergeBarcode\" | \"MergeField\" | \"MergeRec\" | \"MergeSeq\" | \"Next\" | \"NextIf\" | \"NoteRef\" | \"NumChars\" | \"NumPages\" | \"NumWords\" | \"OCX\" | \"Page\" | \"PageRef\" | \"Print\" | \"PrintDate\" | \"Private\" | \"Quote\" | \"RD\" | \"Ref\" | \"RevNum\" | \"SaveDate\" | \"Section\" | \"SectionPages\" | \"Seq\" | \"Set\" | \"Shape\" | \"SkipIf\" | \"StyleRef\" | \"Subject\" | \"Subscriber\" | \"Symbol\" | \"TA\" | \"TC\" | \"Template\" | \"Time\" | \"Title\" | \"TOA\" | \"TOC\" | \"UserAddress\" | \"UserInitials\" | \"UserName\" | \"XE\" | \"Empty\" | \"Others\" | \"Undefined\"",
      "description": "Gets the field's type.",
      "since": "WordApi 1.5",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets the first field in the document.\nawait Word.run(async (context) => {\n  const field: Word.Field = context.document.body.fields.getFirstOrNullObject();\n  field.load([\"code\", \"result\", \"locked\", \"type\", \"data\", \"kind\"]);\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"This document has no fields.\");\n  } else {\n    console.log(\"Code of first field: \" + field.code, \"Result of first field: \" + JSON.stringify(field.result), \"Type of first field: \" + field.type, \"Is the first field locked? \" + field.locked, \"Kind of the first field: \" + field.kind);\n  }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "copyToClipboard",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n\nCopies the field to the Clipboard.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "cut",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n\nRemoves the field from the document and places it on the Clipboard.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the field.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Deletes the first field in the document.\nawait Word.run(async (context) => {\n  const field: Word.Field = context.document.body.fields.getFirstOrNullObject();\n  field.load();\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"This document has no fields.\");\n  } else {\n    field.delete();\n    await context.sync();\n\n    console.log(\"The first field in the document was deleted.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "doClick",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n\nClicks the field.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "getNext",
      "kind": "read",
      "description": "Gets the next field. Throws an ItemNotFound error if this field is the last one.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "Word.Field", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "getNextOrNullObject",
      "kind": "read",
      "description": "Gets the next field. If this field is the last one, then this method will return an object with its isNullObject property set to true. For further information, see *OrNullObject methods and properties.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "Word.Field", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            { "name": "options", "type": "Word.Interfaces.FieldLoadOptions", "required": false, "description": "Provides options for which properties of the object to load." }
          ],
          "returns": { "type": "Word.Field", "description": null }
        },
        {
          "params": [
            { "name": "propertyNames", "type": "string | string[]", "required": false, "description": "A comma-delimited string or an array of strings that specify the properties to load." }
          ],
          "returns": { "type": "Word.Field", "description": null }
        },
        {
          "params": [
            { "name": "propertyNamesAndPaths", "type": "{ select?: string; expand?: string; }", "required": false, "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load." }
          ],
          "returns": { "type": "Word.Field", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "select",
      "kind": null,
      "description": "Selects the field.",
      "signatures": [
        {
          "params": [
            { "name": "selectionMode", "type": "Word.SelectionMode", "required": false, "description": "Optional. The selection mode must be 'Select', 'Start', or 'End'. 'Select' is the default." }
          ],
          "returns": { "type": "void", "description": null }
        },
        {
          "params": [
            { "name": "selectionMode", "type": "\"Select\" | \"Start\" | \"End\"", "required": false, "description": "Optional. The selection mode must be 'Select', 'Start', or 'End'. 'Select' is the default." }
          ],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Gets and updates the first field in the selection.\nawait Word.run(async (context) => {\n  let field = context.document.getSelection().fields.getFirstOrNullObject();\n  field.load([\"code\", \"result\", \"type\", \"locked\"]);\n\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"No field in selection.\");\n  } else {\n    console.log(\"Before updating:\", \"Code of first field: \" + field.code, \"Result of first field: \" + JSON.stringify(field.result));\n\n    field.updateResult();\n    field.select();\n    await context.sync();\n\n    field.load([\"code\", \"result\"]);\n    await context.sync();\n\n    console.log(\"After updating:\", \"Code of first field: \" + field.code, \"Result of first field: \" + JSON.stringify(field.result));\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": null,
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            { "name": "properties", "type": "Interfaces.FieldUpdateData", "required": true, "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called." },
            { "name": "options", "type": "OfficeExtension.UpdateOptions", "required": false, "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties." }
          ],
          "returns": { "type": "void", "description": null }
        },
        {
          "params": [
            { "name": "properties", "type": "Word.Field", "required": true, "description": null }
          ],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.Field object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.FieldData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "Word.Interfaces.FieldData", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "Word.Field", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "unlink",
      "kind": null,
      "description": "Note: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n\nReplaces the field with its most recent result.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "Word.Field", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "updateResult",
      "kind": null,
      "description": "Updates the field.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": []
    },
    {
      "name": "updateSource",
      "kind": null,
      "description": "Saves the changes made to the results of an INCLUDETEXT field back to the source document.",
      "signatures": [
        {
          "params": [],
          "returns": { "type": "void", "description": null }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": ["https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml"]
  }
}