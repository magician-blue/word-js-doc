{
  "class": {
    "name": "InlinePicture",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.1"
    },
    "description": "Represents an inline picture.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml\n\n// Inserts an image anchored to the last paragraph.\nawait Word.run(async (context) => {\n  context.document.body.paragraphs\n    .getLast()\n    .insertParagraph(\"\", \"After\")\n    .insertInlinePictureFromBase64(base64Image, \"End\");\n\n  await context.sync();\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "altTextDescription",
      "type": "string",
      "description": "Specifies a string that represents the alternative text associated with the inline image.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "altTextTitle",
      "type": "string",
      "description": "Specifies a string that contains the title for the inline image.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "height",
      "type": "number",
      "description": "Specifies a number that describes the height of the inline image.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "hyperlink",
      "type": "string",
      "description": "Specifies a hyperlink on the image. Use a '#' to separate the address part from the optional location part.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "imageFormat",
      "type": "Word.ImageFormat | \"Unsupported\" | \"Undefined\" | \"Bmp\" | \"Jpeg\" | \"Gif\" | \"Tiff\" | \"Png\" | \"Icon\" | \"Exif\" | \"Wmf\" | \"Emf\" | \"Pict\" | \"Pdf\" | \"Svg\"",
      "description": "Gets the format of the inline image.",
      "since": "WordApiDesktop 1.1",
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml\n\n// Gets the first image in the document.\nawait Word.run(async (context) => {\n  const firstPicture: Word.InlinePicture = context.document.body.inlinePictures.getFirst();\n  firstPicture.load(\"width, height, imageFormat\");\n\n  await context.sync();\n  console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`, `Image format: ${firstPicture.imageFormat}`);\n  // Get the image encoded as Base64.\n  const base64 = firstPicture.getBase64ImageSrc();\n\n  await context.sync();\n  console.log(base64.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lockAspectRatio",
      "type": "boolean",
      "description": "Specifies a value that indicates whether the inline image retains its original proportions when you resize it.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "paragraph",
      "type": "Word.Paragraph",
      "description": "Gets the parent paragraph that contains the inline image.",
      "since": "WordApi 1.2",
      "examples": []
    },
    {
      "name": "parentContentControl",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the inline image. Throws an ItemNotFound error if there isn't a parent content control.",
      "since": "WordApi 1.1",
      "examples": []
    },
    {
      "name": "parentContentControlOrNullObject",
      "type": "Word.ContentControl",
      "description": "Gets the content control that contains the inline image. If there isn't a parent content control, then this method will return an object with its isNullObject property set to true. For further information, see [OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTable",
      "type": "Word.Table",
      "description": "Gets the table that contains the inline image. Throws an ItemNotFound error if it isn't contained in a table.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTableCell",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the inline image. Throws an ItemNotFound error if it isn't contained in a table cell.",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTableCellOrNullObject",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the inline image. If it isn't contained in a table cell, then this method will return an object with its isNullObject property set to true. For further information, see [OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "parentTableOrNullObject",
      "type": "Word.Table",
      "description": "Gets the table that contains the inline image. If it isn't contained in a table, then this method will return an object with its isNullObject property set to true. For further information, see [OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "since": "WordApi 1.3",
      "examples": []
    },
    {
      "name": "width",
      "type": "number",
      "description": "Specifies a number that describes the width of the inline image.",
      "since": "WordApi 1.1",
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the inline picture from the document.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getBase64ImageSrc",
      "kind": "read",
      "description": "Gets the Base64-encoded string representation of the inline image.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<string>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml\n\n// Gets the first image in the document.\nawait Word.run(async (context) => {\n  const firstPicture: Word.InlinePicture = context.document.body.inlinePictures.getFirst();\n  firstPicture.load(\"width, height, imageFormat\");\n\n  await context.sync();\n  console.log(`Image dimensions: ${firstPicture.width} x ${firstPicture.height}`, `Image format: ${firstPicture.imageFormat}`);\n  // Get the image encoded as Base64.\n  const base64 = firstPicture.getBase64ImageSrc();\n\n  await context.sync();\n  console.log(base64.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getNext",
      "kind": "read",
      "description": "Gets the next inline image. Throws an ItemNotFound error if this inline image is the last one.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// To use this snippet, add an inline picture to the document and assign it an alt text title.\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the first inline picture.\n    const firstPicture = context.document.body.inlinePictures.getFirstOrNullObject();\n\n    // Queue a command to load the alternative text title of the picture.\n    firstPicture.load('altTextTitle');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    if (firstPicture.isNullObject) {\n        console.log('There are no inline pictures in this document.')\n    } else {\n        console.log(firstPicture.altTextTitle);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getNextOrNullObject",
      "kind": "read",
      "description": "Gets the next inline image. If this inline image is the last one, then this method will return an object with its isNullObject property set to true. For further information, see [OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// To use this snippet, add an inline picture to the document and assign it an alt text title.\n// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n    \n    // Create a proxy object for the first inline picture.\n    const firstPicture = context.document.body.inlinePictures.getFirstOrNullObject();\n\n    // Queue a command to load the alternative text title of the picture.\n    firstPicture.load('altTextTitle');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    if (firstPicture.isNullObject) {\n        console.log('There are no inline pictures in this document.')\n    } else {\n        console.log(firstPicture.altTextTitle);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getRange",
      "kind": "read",
      "description": "Gets the picture, or the starting or ending point of the picture, as a range.",
      "signatures": [
        {
          "params": [
            {
              "name": "rangeLocation",
              "type": "Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | \"Whole\" | \"Start\" | \"End\"",
              "required": false,
              "description": "The range location must be 'Whole', 'Start', or 'End'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertBreak",
      "kind": null,
      "description": "Inserts a break at the specified location in the main document.",
      "signatures": [
        {
          "params": [
            {
              "name": "breakType",
              "type": "Word.BreakType | \"Page\" | \"Next\" | \"SectionNext\" | \"SectionContinuous\" | \"SectionEven\" | \"SectionOdd\" | \"Line\"",
              "required": true,
              "description": "The break type to add."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.before | Word.InsertLocation.after | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Before' or 'After'."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertContentControl",
      "kind": "create",
      "description": "Wraps the inline picture with a rich text content control.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ContentControl",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertFileFromBase64",
      "kind": null,
      "description": "Inserts a document at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64File",
              "type": "string",
              "required": true,
              "description": "The Base64-encoded content of a .docx file."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.before | Word.InsertLocation.after | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Before' or 'After'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertHtml",
      "kind": null,
      "description": "Inserts HTML at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "html",
              "type": "string",
              "required": true,
              "description": "The HTML to be inserted."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.before | Word.InsertLocation.after | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Before' or 'After'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertInlinePictureFromBase64",
      "kind": "create",
      "description": "Inserts an inline picture at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64EncodedImage",
              "type": "string",
              "required": true,
              "description": "The Base64-encoded image to be inserted."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.replace | Word.InsertLocation.before | Word.InsertLocation.after | \"Replace\" | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Replace', 'Before', or 'After'."
            }
          ],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertOoxml",
      "kind": null,
      "description": "Inserts OOXML at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "ooxml",
              "type": "string",
              "required": true,
              "description": "The OOXML to be inserted."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.before | Word.InsertLocation.after | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Before' or 'After'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertParagraph",
      "kind": "create",
      "description": "Inserts a paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "paragraphText",
              "type": "string",
              "required": true,
              "description": "The paragraph text to be inserted."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.before | Word.InsertLocation.after | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Before' or 'After'."
            }
          ],
          "returns": {
            "type": "Word.Paragraph",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertText",
      "kind": null,
      "description": "Inserts text at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "text",
              "type": "string",
              "required": true,
              "description": "Text to be inserted."
            },
            {
              "name": "insertLocation",
              "type": "Word.InsertLocation.before | Word.InsertLocation.after | \"Before\" | \"After\"",
              "required": true,
              "description": "The value must be 'Before' or 'After'."
            }
          ],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.InlinePictureLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "select",
      "kind": null,
      "description": "Selects the inline picture. This causes Word to scroll to the selection.",
      "signatures": [
        {
          "params": [
            {
              "name": "selectionMode",
              "type": "Word.SelectionMode",
              "required": false,
              "description": "The selection mode must be 'Select', 'Start', or 'End'. 'Select' is the default."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "selectionMode",
              "type": "\"Select\" | \"Start\" | \"End\"",
              "required": false,
              "description": "The selection mode must be 'Select', 'Start', or 'End'. 'Select' is the default."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.InlinePictureUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.InlinePicture",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.InlinePicture object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.InlinePictureData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.InlinePictureData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.InlinePicture",
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word"
    ]
  }
}