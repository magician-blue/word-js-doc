{
  "class": {
    "name": "Word.Range",
    "package": null,
    "extends": [],
    "api_set": {
      "name": null,
      "status": null
    },
    "description": "**Package:** [word](/en-us/javascript/api/word)",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml\n\n// Gets the range of the first comment in the selected content.\nawait Word.run(async (context) => {\n  const comment: Word.Comment = context.document.getSelection().getComments().getFirstOrNullObject();\n  comment.load(\"contentRange\");\n  const range: Word.Range = comment.getRange();\n  range.load(\"text\");\n  await context.sync();\n\n  if (comment.isNullObject) {\n    console.warn(\"No comments in the selection, so no range to get.\");\n    return;\n  }\n\n  console.log(`Comment location: ${range.text}`);\n  const contentRange: Word.CommentContentRange = comment.contentRange;\n  console.log(\"Comment content range:\", contentRange);\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "bold",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "boldBidirectional",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "bookmarks",
      "type": "Word.BookmarkCollection",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "borders",
      "type": "Word.BorderUniversalCollection",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "case",
      "type": "Word.CharacterCase | \"Next\" | \"Lower\" | \"Upper\" | \"TitleWord\" | \"TitleSentence\" | \"Toggle\" | \"HalfWidth\" | \"FullWidth\" | \"Katakana\" | \"Hiragana\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "characterWidth",
      "type": "Word.CharacterWidth | \"Half\" | \"Full\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "combineCharacters",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "contentControls",
      "type": "Word.ContentControlCollection",
      "description": "Gets the collection of content control objects in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": []
    },
    {
      "name": "disableCharacterSpaceGrid",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "emphasisMark",
      "type": "Word.EmphasisMark | \"None\" | \"OverSolidCircle\" | \"OverComma\" | \"OverWhiteCircle\" | \"UnderSolidCircle\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "end",
      "type": "number",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "endnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of endnotes in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "fields",
      "type": "Word.FieldCollection",
      "description": "Gets the collection of field objects in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "fitTextWidth",
      "type": "number",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "font",
      "type": "Word.Font",
      "description": "Gets the text format of the range. Use this to get and set font name, size, color, and other properties.",
      "since": null,
      "examples": []
    },
    {
      "name": "footnotes",
      "type": "Word.NoteItemCollection",
      "description": "Gets the collection of footnotes in the range.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml\n\n// Gets the footnotes in the selected document range.\nawait Word.run(async (context) => {\n  const footnotes: Word.NoteItemCollection = context.document.getSelection().footnotes;\n  footnotes.load(\"length\");\n  await context.sync();\n\n  console.log(\"Number of footnotes in the selected range: \" + footnotes.items.length);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "frames",
      "type": null,
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "grammarChecked",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "hasNoProofing",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "highlightColorIndex",
      "type": "Word.ColorIndex | \"Auto\" | \"Black\" | \"Blue\" | \"Turquoise\" | \"BrightGreen\" | \"Pink\" | \"Red\" | \"Yellow\" | \"White\" | \"DarkBlue\" | \"Teal\" | \"Green\" | \"Violet\" | \"DarkRed\" | \"DarkYellow\" | \"Gray50\" | \"Gray25\" | \"ClassicRed\" | \"ClassicBlue\" | \"ByAuthor\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "horizontalInVertical",
      "type": "Word.HorizontalInVerticalType | \"None\" | \"FitInLine\" | \"ResizeLine\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "hyperlink",
      "type": "string",
      "description": "Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a '#' to separate the address part from the optional location part.",
      "since": null,
      "examples": []
    },
    {
      "name": "hyperlinks",
      "type": "Word.HyperlinkCollection",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "id",
      "type": "string",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "inlinePictures",
      "type": "Word.InlinePictureCollection",
      "description": "Gets the collection of inline picture objects in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "isEmpty",
      "type": "boolean",
      "description": "Checks whether the range length is zero.",
      "since": null,
      "examples": []
    },
    {
      "name": "isEndOfRowMark",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "isTextVisibleOnScreen",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "italic",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "italicBidirectional",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "kana",
      "type": "Word.Kana | \"Katakana\" | \"Hiragana\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "languageDetected",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "languageId",
      "type": "Word.LanguageId | \"Afrikaans\" | \"Albanian\" | \"Amharic\" | \"Arabic\" | \"ArabicAlgeria\" | \"ArabicBahrain\" | \"ArabicEgypt\" | \"ArabicIraq\" | \"ArabicJordan\" | \"ArabicKuwait\" | \"ArabicLebanon\" | \"ArabicLibya\" | \"ArabicMorocco\" | \"ArabicOman\" | \"ArabicQatar\" | \"ArabicSyria\" | \"ArabicTunisia\" | \"ArabicUAE\" | \"ArabicYemen\" | \"Armenian\" | \"Assamese\" | \"AzeriCyrillic\" | \"AzeriLatin\" | \"Basque\" | \"BelgianDutch\" | \"BelgianFrench\" | \"Bengali\" | \"Bulgarian\" | \"Burmese\" | \"Belarusian\" | \"Catalan\" | \"Cherokee\" | \"ChineseHongKongSAR\" | \"ChineseMacaoSAR\" | \"ChineseSingapore\" | \"Croatian\" | \"Czech\" | \"Danish\" | \"Divehi\" | \"Dutch\" | \"Edo\" | \"EnglishAUS\" | \"EnglishBelize\" | \"EnglishCanadian\" | \"EnglishCaribbean\" | \"EnglishIndonesia\" | \"EnglishIreland\" | \"EnglishJamaica\" | \"EnglishNewZealand\" | \"EnglishPhilippines\" | \"EnglishSouthAfrica\" | \"EnglishTrinidadTobago\" | \"EnglishUK\" | \"EnglishUS\" | \"EnglishZimbabwe\" | \"Estonian\" | \"Faeroese\" | \"Filipino\" | \"Finnish\" | \"French\" | \"FrenchCameroon\" | \"FrenchCanadian\" | \"FrenchCongoDRC\" | \"FrenchCotedIvoire\" | \"FrenchHaiti\" | \"FrenchLuxembourg\" | \"FrenchMali\" | \"FrenchMonaco\" | \"FrenchMorocco\" | \"FrenchReunion\" | \"FrenchSenegal\" | \"FrenchWestIndies\" | \"FrisianNetherlands\" | \"Fulfulde\" | \"GaelicIreland\" | \"GaelicScotland\" | \"Galician\" | \"Georgian\" | \"German\" | \"GermanAustria\" | \"GermanLiechtenstein\" | \"GermanLuxembourg\" | \"Greek\" | \"Guarani\" | \"Gujarati\" | \"Hausa\" | \"Hawaiian\" | \"Hebrew\" | \"Hindi\" | \"Hungarian\" | \"Ibibio\" | \"Icelandic\" | \"Igbo\" | \"Indonesian\" | \"Inuktitut\" | \"Italian\" | \"Japanese\" | \"Kannada\" | \"Kanuri\" | \"Kashmiri\" | \"Kazakh\" | \"Khmer\" | \"Kirghiz\" | \"Konkani\" | \"Korean\" | \"Kyrgyz\" | \"LanguageNone\" | \"Lao\" | \"Latin\" | \"Latvian\" | \"Lithuanian\" | \"MacedonianFYROM\" | \"Malayalam\" | \"MalayBruneiDarussalam\" | \"Malaysian\" | \"Maltese\" | \"Manipuri\" | \"Marathi\" | \"MexicanSpanish\" | \"Mongolian\" | \"Nepali\" | \"NoProofing\" | \"NorwegianBokmol\" | \"NorwegianNynorsk\" | \"Oriya\" | \"Oromo\" | \"Pashto\" | \"Persian\" | \"Polish\" | \"Portuguese\" | \"PortugueseBrazil\" | \"Punjabi\" | \"RhaetoRomanic\" | \"Romanian\" | \"RomanianMoldova\" | \"Russian\" | \"RussianMoldova\" | \"SamiLappish\" | \"Sanskrit\" | \"SerbianCyrillic\" | \"SerbianLatin\" | \"Sesotho\" | \"SimplifiedChinese\" | \"Sindhi\" | \"SindhiPakistan\" | \"Sinhalese\" | \"Slovak\" | \"Slovenian\" | \"Somali\" | \"Sorbian\" | \"Spanish\" | \"SpanishArgentina\" | \"SpanishBolivia\" | \"SpanishChile\" | \"SpanishColombia\" | \"SpanishCostaRica\" | \"SpanishDominicanRepublic\" | \"SpanishEcuador\" | \"SpanishElSalvador\" | \"SpanishGuatemala\" | \"SpanishHonduras\" | \"SpanishModernSort\" | \"SpanishNicaragua\" | \"SpanishPanama\" | \"SpanishParaguay\" | \"SpanishPeru\" | \"SpanishPuertoRico\" | \"SpanishUruguay\" | \"SpanishVenezuela\" | \"Sutu\" | \"Swahili\" | \"Swedish\" | \"SwedishFinland\" | \"SwissFrench\" | \"SwissGerman\" | \"SwissItalian\" | \"Syriac\" | \"Tajik\" | \"Tamazight\" | \"TamazightLatin\" | \"Tamil\" | \"Tatar\" | \"Telugu\" | \"Thai\" | \"Tibetan\" | \"TigrignaEritrea\" | \"TigrignaEthiopic\" | \"TraditionalChinese\" | \"Tsonga\" | \"Tswana\" | \"Turkish\" | \"Turkmen\" | \"Ukrainian\" | \"Urdu\" | \"UzbekCyrillic\" | \"UzbekLatin\" | \"Venda\" | \"Vietnamese\" | \"Welsh\" | \"Xhosa\" | \"Yi\" | \"Yiddish\" | \"Yoruba\" | \"Zulu\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "languageIdFarEast",
      "type": "Word.LanguageId | \"Afrikaans\" | \"Albanian\" | \"Amharic\" | \"Arabic\" | \"ArabicAlgeria\" | \"ArabicBahrain\" | \"ArabicEgypt\" | \"ArabicIraq\" | \"ArabicJordan\" | \"ArabicKuwait\" | \"ArabicLebanon\" | \"ArabicLibya\" | \"ArabicMorocco\" | \"ArabicOman\" | \"ArabicQatar\" | \"ArabicSyria\" | \"ArabicTunisia\" | \"ArabicUAE\" | \"ArabicYemen\" | \"Armenian\" | \"Assamese\" | \"AzeriCyrillic\" | \"AzeriLatin\" | \"Basque\" | \"BelgianDutch\" | \"BelgianFrench\" | \"Bengali\" | \"Bulgarian\" | \"Burmese\" | \"Belarusian\" | \"Catalan\" | \"Cherokee\" | \"ChineseHongKongSAR\" | \"ChineseMacaoSAR\" | \"ChineseSingapore\" | \"Croatian\" | \"Czech\" | \"Danish\" | \"Divehi\" | \"Dutch\" | \"Edo\" | \"EnglishAUS\" | \"EnglishBelize\" | \"EnglishCanadian\" | \"EnglishCaribbean\" | \"EnglishIndonesia\" | \"EnglishIreland\" | \"EnglishJamaica\" | \"EnglishNewZealand\" | \"EnglishPhilippines\" | \"EnglishSouthAfrica\" | \"EnglishTrinidadTobago\" | \"EnglishUK\" | \"EnglishUS\" | \"EnglishZimbabwe\" | \"Estonian\" | \"Faeroese\" | \"Filipino\" | \"Finnish\" | \"French\" | \"FrenchCameroon\" | \"FrenchCanadian\" | \"FrenchCongoDRC\" | \"FrenchCotedIvoire\" | \"FrenchHaiti\" | \"FrenchLuxembourg\" | \"FrenchMali\" | \"FrenchMonaco\" | \"FrenchMorocco\" | \"FrenchReunion\" | \"FrenchSenegal\" | \"FrenchWestIndies\" | \"FrisianNetherlands\" | \"Fulfulde\" | \"GaelicIreland\" | \"GaelicScotland\" | \"Galician\" | \"Georgian\" | \"German\" | \"GermanAustria\" | \"GermanLiechtenstein\" | \"GermanLuxembourg\" | \"Greek\" | \"Guarani\" | \"Gujarati\" | \"Hausa\" | \"Hawaiian\" | \"Hebrew\" | \"Hindi\" | \"Hungarian\" | \"Ibibio\" | \"Icelandic\" | \"Igbo\" | \"Indonesian\" | \"Inuktitut\" | \"Italian\" | \"Japanese\" | \"Kannada\" | \"Kanuri\" | \"Kashmiri\" | \"Kazakh\" | \"Khmer\" | \"Kirghiz\" | \"Konkani\" | \"Korean\" | \"Kyrgyz\" | \"LanguageNone\" | \"Lao\" | \"Latin\" | \"Latvian\" | \"Lithuanian\" | \"MacedonianFYROM\" | \"Malayalam\" | \"MalayBruneiDarussalam\" | \"Malaysian\" | \"Maltese\" | \"Manipuri\" | \"Marathi\" | \"MexicanSpanish\" | \"Mongolian\" | \"Nepali\" | \"NoProofing\" | \"NorwegianBokmol\" | \"NorwegianNynorsk\" | \"Oriya\" | \"Oromo\" | \"Pashto\" | \"Persian\" | \"Polish\" | \"Portuguese\" | \"PortugueseBrazil\" | \"Punjabi\" | \"RhaetoRomanic\" | \"Romanian\" | \"RomanianMoldova\" | \"Russian\" | \"RussianMoldova\" | \"SamiLappish\" | \"Sanskrit\" | \"SerbianCyrillic\" | \"SerbianLatin\" | \"Sesotho\" | \"SimplifiedChinese\" | \"Sindhi\" | \"SindhiPakistan\" | \"Sinhalese\" | \"Slovak\" | \"Slovenian\" | \"Somali\" | \"Sorbian\" | \"Spanish\" | \"SpanishArgentina\" | \"SpanishBolivia\" | \"SpanishChile\" | \"SpanishColombia\" | \"SpanishCostaRica\" | \"SpanishDominicanRepublic\" | \"SpanishEcuador\" | \"SpanishElSalvador\" | \"SpanishGuatemala\" | \"SpanishHonduras\" | \"SpanishModernSort\" | \"SpanishNicaragua\" | \"SpanishPanama\" | \"SpanishParaguay\" | \"SpanishPeru\" | \"SpanishPuertoRico\" | \"SpanishUruguay\" | \"SpanishVenezuela\" | \"Sutu\" | \"Swahili\" | \"Swedish\" | \"SwedishFinland\" | \"SwissFrench\" | \"SwissGerman\" | \"SwissItalian\" | \"Syriac\" | \"Tajik\" | \"Tamazight\" | \"TamazightLatin\" | \"Tamil\" | \"Tatar\" | \"Telugu\" | \"Thai\" | \"Tibetan\" | \"TigrignaEritrea\" | \"TigrignaEthiopic\" | \"TraditionalChinese\" | \"Tsonga\" | \"Tswana\" | \"Turkish\" | \"Turkmen\" | \"Ukrainian\" | \"Urdu\" | \"UzbekCyrillic\" | \"UzbekLatin\" | \"Venda\" | \"Vietnamese\" | \"Welsh\" | \"Xhosa\" | \"Yi\" | \"Yiddish\" | \"Yoruba\" | \"Zulu\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "languageIdOther",
      "type": "Word.LanguageId | \"Afrikaans\" | \"Albanian\" | \"Amharic\" | \"Arabic\" | \"ArabicAlgeria\" | \"ArabicBahrain\" | \"ArabicEgypt\" | \"ArabicIraq\" | \"ArabicJordan\" | \"ArabicKuwait\" | \"ArabicLebanon\" | \"ArabicLibya\" | \"ArabicMorocco\" | \"ArabicOman\" | \"ArabicQatar\" | \"ArabicSyria\" | \"ArabicTunisia\" | \"ArabicUAE\" | \"ArabicYemen\" | \"Armenian\" | \"Assamese\" | \"AzeriCyrillic\" | \"AzeriLatin\" | \"Basque\" | \"BelgianDutch\" | \"BelgianFrench\" | \"Bengali\" | \"Bulgarian\" | \"Burmese\" | \"Belarusian\" | \"Catalan\" | \"Cherokee\" | \"ChineseHongKongSAR\" | \"ChineseMacaoSAR\" | \"ChineseSingapore\" | \"Croatian\" | \"Czech\" | \"Danish\" | \"Divehi\" | \"Dutch\" | \"Edo\" | \"EnglishAUS\" | \"EnglishBelize\" | \"EnglishCanadian\" | \"EnglishCaribbean\" | \"EnglishIndonesia\" | \"EnglishIreland\" | \"EnglishJamaica\" | \"EnglishNewZealand\" | \"EnglishPhilippines\" | \"EnglishSouthAfrica\" | \"EnglishTrinidadTobago\" | \"EnglishUK\" | \"EnglishUS\" | \"EnglishZimbabwe\" | \"Estonian\" | \"Faeroese\" | \"Filipino\" | \"Finnish\" | \"French\" | \"FrenchCameroon\" | \"FrenchCanadian\" | \"FrenchCongoDRC\" | \"FrenchCotedIvoire\" | \"FrenchHaiti\" | \"FrenchLuxembourg\" | \"FrenchMali\" | \"FrenchMonaco\" | \"FrenchMorocco\" | \"FrenchReunion\" | \"FrenchSenegal\" | \"FrenchWestIndies\" | \"FrisianNetherlands\" | \"Fulfulde\" | \"GaelicIreland\" | \"GaelicScotland\" | \"Galician\" | \"Georgian\" | \"German\" | \"GermanAustria\" | \"GermanLiechtenstein\" | \"GermanLuxembourg\" | \"Greek\" | \"Guarani\" | \"Gujarati\" | \"Hausa\" | \"Hawaiian\" | \"Hebrew\" | \"Hindi\" | \"Hungarian\" | \"Ibibio\" | \"Icelandic\" | \"Igbo\" | \"Indonesian\" | \"Inuktitut\" | \"Italian\" | \"Japanese\" | \"Kannada\" | \"Kanuri\" | \"Kashmiri\" | \"Kazakh\" | \"Khmer\" | \"Kirghiz\" | \"Konkani\" | \"Korean\" | \"Kyrgyz\" | \"LanguageNone\" | \"Lao\" | \"Latin\" | \"Latvian\" | \"Lithuanian\" | \"MacedonianFYROM\" | \"Malayalam\" | \"MalayBruneiDarussalam\" | \"Malaysian\" | \"Maltese\" | \"Manipuri\" | \"Marathi\" | \"MexicanSpanish\" | \"Mongolian\" | \"Nepali\" | \"NoProofing\" | \"NorwegianBokmol\" | \"NorwegianNynorsk\" | \"Oriya\" | \"Oromo\" | \"Pashto\" | \"Persian\" | \"Polish\" | \"Portuguese\" | \"PortugueseBrazil\" | \"Punjabi\" | \"RhaetoRomanic\" | \"Romanian\" | \"RomanianMoldova\" | \"Russian\" | \"RussianMoldova\" | \"SamiLappish\" | \"Sanskrit\" | \"SerbianCyrillic\" | \"SerbianLatin\" | \"Sesotho\" | \"SimplifiedChinese\" | \"Sindhi\" | \"SindhiPakistan\" | \"Sinhalese\" | \"Slovak\" | \"Slovenian\" | \"Somali\" | \"Sorbian\" | \"Spanish\" | \"SpanishArgentina\" | \"SpanishBolivia\" | \"SpanishChile\" | \"SpanishColombia\" | \"SpanishCostaRica\" | \"SpanishDominicanRepublic\" | \"SpanishEcuador\" | \"SpanishElSalvador\" | \"SpanishGuatemala\" | \"SpanishHonduras\" | \"SpanishModernSort\" | \"SpanishNicaragua\" | \"SpanishPanama\" | \"SpanishParaguay\" | \"SpanishPeru\" | \"SpanishPuertoRico\" | \"SpanishUruguay\" | \"SpanishVenezuela\" | \"Sutu\" | \"Swahili\" | \"Swedish\" | \"SwedishFinland\" | \"SwissFrench\" | \"SwissGerman\" | \"SwissItalian\" | \"Syriac\" | \"Tajik\" | \"Tamazight\" | \"TamazightLatin\" | \"Tamil\" | \"Tatar\" | \"Telugu\" | \"Thai\" | \"Tibetan\" | \"TigrignaEritrea\" | \"TigrignaEthiopic\" | \"TraditionalChinese\" | \"Tsonga\" | \"Tswana\" | \"Turkish\" | \"Turkmen\" | \"Ukrainian\" | \"Urdu\" | \"UzbekCyrillic\" | \"UzbekLatin\" | \"Venda\" | \"Vietnamese\" | \"Welsh\" | \"Xhosa\" | \"Yi\" | \"Yiddish\" | \"Yoruba\" | \"Zulu\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "listFormat",
      "type": "Word.ListFormat",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "lists",
      "type": "Word.ListCollection",
      "description": "Gets the collection of list objects in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "pages",
      "type": "Word.PageCollection",
      "description": "Gets the collection of pages in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "paragraphs",
      "type": "Word.ParagraphCollection",
      "description": "Gets the collection of paragraph objects in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentBody",
      "type": "Word.Body",
      "description": "Gets the parent body of the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentContentControl",
      "type": "Word.ContentControl",
      "description": "Gets the currently supported content control that contains the range. Throws an `ItemNotFound` error if there isn't a parent content control.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-checkbox-content-control.yaml\n\n// Toggles the isChecked property of the first checkbox content control found in the selection.\nawait Word.run(async (context) => {\n  const selectedRange: Word.Range = context.document.getSelection();\n  let selectedContentControl = selectedRange\n    .getContentControls({\n      types: [Word.ContentControlType.checkBox]\n    })\n    .getFirstOrNullObject();\n  selectedContentControl.load(\"id,checkboxContentControl/isChecked\");\n\n  await context.sync();\n\n  if (selectedContentControl.isNullObject) {\n    const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;\n    parentContentControl.load(\"id,type,checkboxContentControl/isChecked\");\n    await context.sync();\n\n    if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.checkBox) {\n      console.warn(\"No checkbox content control is currently selected.\");\n      return;\n    } else {\n      selectedContentControl = parentContentControl;\n    }\n  }\n\n  const isCheckedBefore = selectedContentControl.checkboxContentControl.isChecked;\n  console.log(\"isChecked state before:\", `id: ${selectedContentControl.id} ... isChecked: ${isCheckedBefore}`);\n  selectedContentControl.checkboxContentControl.isChecked = !isCheckedBefore;\n  selectedContentControl.load(\"id,checkboxContentControl/isChecked\");\n  await context.sync();\n\n  console.log(\n    \"isChecked state after:\",\n    `id: ${selectedContentControl.id} ... isChecked: ${selectedContentControl.checkboxContentControl.isChecked}`\n  );\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "parentContentControlOrNullObject",
      "type": "Word.ContentControl",
      "description": "Gets the currently supported content control that contains the range. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see *OrNullObject methods and properties.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTable",
      "type": "Word.Table",
      "description": "Gets the table that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTableCell",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table cell.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTableCellOrNullObject",
      "type": "Word.TableCell",
      "description": "Gets the table cell that contains the range. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see *OrNullObject methods and properties.",
      "since": null,
      "examples": []
    },
    {
      "name": "parentTableOrNullObject",
      "type": "Word.Table",
      "description": "Gets the table that contains the range. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see *OrNullObject methods and properties.",
      "since": null,
      "examples": []
    },
    {
      "name": "sections",
      "type": "Word.SectionCollection",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "shading",
      "type": "Word.ShadingUniversal",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "shapes",
      "type": "Word.ShapeCollection",
      "description": "Gets the collection of shape objects anchored in the range, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.",
      "since": null,
      "examples": []
    },
    {
      "name": "showAll",
      "type": null,
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "spellingChecked",
      "type": "boolean",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "start",
      "type": "number",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "storyLength",
      "type": "number",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "storyType",
      "type": "Word.StoryType | \"MainText\" | \"Footnotes\" | \"Endnotes\" | \"Comments\" | \"TextFrame\" | \"EvenPagesHeader\" | \"PrimaryHeader\" | \"EvenPagesFooter\" | \"PrimaryFooter\" | \"FirstPageHeader\" | \"FirstPageFooter\" | \"FootnoteSeparator\" | \"FootnoteContinuationSeparator\" | \"FootnoteContinuationNotice\" | \"EndnoteSeparator\" | \"EndnoteContinuationSeparator\" | \"EndnoteContinuationNotice\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "style",
      "type": "string",
      "description": "Specifies the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the \"styleBuiltIn\" property.",
      "since": null,
      "examples": []
    },
    {
      "name": "styleBuiltIn",
      "type": "Word.BuiltInStyleName | \"Other\" | \"Normal\" | \"Heading1\" | \"Heading2\" | \"Heading3\" | \"Heading4\" | \"Heading5\" | \"Heading6\" | \"Heading7\" | \"Heading8\" | \"Heading9\" | \"Toc1\" | \"Toc2\" | \"Toc3\" | \"Toc4\" | \"Toc5\" | \"Toc6\" | \"Toc7\" | \"Toc8\" | \"Toc9\" | \"FootnoteText\" | \"Header\" | \"Footer\" | \"Caption\" | \"FootnoteReference\" | \"EndnoteReference\" | \"EndnoteText\" | \"Title\" | \"Subtitle\" | \"Hyperlink\" | \"Strong\" | \"Emphasis\" | \"NoSpacing\" | \"ListParagraph\" | \"Quote\" | \"IntenseQuote\" | \"SubtleEmphasis\" | \"IntenseEmphasis\" | \"SubtleReference\" | \"IntenseReference\" | \"BookTitle\" | \"Bibliography\" | \"TocHeading\" | \"TableGrid\" | \"PlainTable1\" | \"PlainTable2\" | \"PlainTable3\" | \"PlainTable4\" | \"PlainTable5\" | \"TableGridLight\" | \"GridTable1Light\" | \"GridTable1Light_Accent1\" | \"GridTable1Light_Accent2\" | \"GridTable1Light_Accent3\" | \"GridTable1Light_Accent4\" | \"GridTable1Light_Accent5\" | \"GridTable1Light_Accent6\" | \"GridTable2\" | \"GridTable2_Accent1\" | \"GridTable2_Accent2\" | \"GridTable2_Accent3\" | \"GridTable2_Accent4\" | \"GridTable2_Accent5\" | \"GridTable2_Accent6\" | \"GridTable3\" | \"GridTable3_Accent1\" | \"GridTable3_Accent2\" | \"GridTable3_Accent3\" | \"GridTable3_Accent4\" | \"GridTable3_Accent5\" | \"GridTable3_Accent6\" | \"GridTable4\" | \"GridTable4_Accent1\" | \"GridTable4_Accent2\" | \"GridTable4_Accent3\" | \"GridTable4_Accent4\" | \"GridTable4_Accent5\" | \"GridTable4_Accent6\" | \"GridTable5Dark\" | \"GridTable5Dark_Accent1\" | \"GridTable5Dark_Accent2\" | \"GridTable5Dark_Accent3\" | \"GridTable5Dark_Accent4\" | \"GridTable5Dark_Accent5\" | \"GridTable5Dark_Accent6\" | \"GridTable6Colorful\" | \"GridTable6Colorful_Accent1\" | \"GridTable6Colorful_Accent2\" | \"GridTable6Colorful_Accent3\" | \"GridTable6Colorful_Accent4\" | \"GridTable6Colorful_Accent5\" | \"GridTable6Colorful_Accent6\" | \"GridTable7Colorful\" | \"GridTable7Colorful_Accent1\" | \"GridTable7Colorful_Accent2\" | \"GridTable7Colorful_Accent3\" | \"GridTable7Colorful_Accent4\" | \"GridTable7Colorful_Accent5\" | \"GridTable7Colorful_Accent6\" | \"ListTable1Light\" | \"ListTable1Light_Accent1\" | \"ListTable1Light_Accent2\" | \"ListTable1Light_Accent3\" | \"ListTable1Light_Accent4\" | \"ListTable1Light_Accent5\" | \"ListTable1Light_Accent6\" | \"ListTable2\" | \"ListTable2_Accent1\" | \"ListTable2_Accent2\" | \"ListTable2_Accent3\" | \"ListTable2_Accent4\" | \"ListTable2_Accent5\" | \"ListTable2_Accent6\" | \"ListTable3\" | \"ListTable3_Accent1\" | \"ListTable3_Accent2\" | \"ListTable3_Accent3\" | \"ListTable3_Accent4\" | \"ListTable3_Accent5\" | \"ListTable3_Accent6\" | \"ListTable4\" | \"ListTable4_Accent1\" | \"ListTable4_Accent2\" | \"ListTable4_Accent3\" | \"ListTable4_Accent4\" | \"ListTable4_Accent5\" | \"ListTable4_Accent6\" | \"ListTable5Dark\" | \"ListTable5Dark_Accent1\" | \"ListTable5Dark_Accent2\" | \"ListTable5Dark_Accent3\" | \"ListTable5Dark_Accent4\" | \"ListTable5Dark_Accent5\" | \"ListTable5Dark_Accent6\" | \"ListTable6Colorful\" | \"ListTable6Colorful_Accent1\" | \"ListTable6Colorful_Accent2\" | \"ListTable6Colorful_Accent3\" | \"ListTable6Colorful_Accent4\" | \"ListTable6Colorful_Accent5\" | \"ListTable6Colorful_Accent6\" | \"ListTable7Colorful\" | \"ListTable7Colorful_Accent1\" | \"ListTable7Colorful_Accent2\" | \"ListTable7Colorful_Accent3\" | \"ListTable7Colorful_Accent4\" | \"ListTable7Colorful_Accent5\" | \"ListTable7Colorful_Accent6\"",
      "description": "Specifies the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the \"style\" property.",
      "since": null,
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml\n\nawait Word.run(async (context) => {\n    const header: Word.Range = context.document.body.insertText(\"This is a sample Heading 1 Title!!\\n\",\n        \"Start\" /*this means at the beginning of the body */);\n    header.styleBuiltIn = Word.BuiltInStyleName.heading1;\n\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "tableColumns",
      "type": "Word.TableColumnCollection",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "tables",
      "type": "Word.TableCollection",
      "description": "Gets the collection of table objects in the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "text",
      "type": "string",
      "description": "Gets the text of the range.",
      "since": null,
      "examples": []
    },
    {
      "name": "twoLinesInOne",
      "type": "Word.TwoLinesInOneType | \"None\" | \"NoBrackets\" | \"Parentheses\" | \"SquareBrackets\" | \"AngleBrackets\" | \"CurlyBrackets\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    },
    {
      "name": "underline",
      "type": "Word.Underline | \"None\" | \"Single\" | \"Words\" | \"Double\" | \"Dotted\" | \"Thick\" | \"Dash\" | \"DotDash\" | \"DotDotDash\" | \"Wavy\" | \"WavyHeavy\" | \"DottedHeavy\" | \"DashHeavy\" | \"DotDashHeavy\" | \"DotDotDashHeavy\" | \"DashLong\" | \"DashLongHeavy\" | \"WavyDouble\"",
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "since": null,
      "examples": []
    }
  ],
  "methods": [
    {
      "name": "clear",
      "kind": "delete",
      "description": "Clears the contents of the range object. The user can perform the undo operation on the cleared content.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to clear the contents of the proxy range object.\n    range.clear();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Cleared the selection (range object)');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "compareLocationWith",
      "kind": null,
      "description": "Compares this range's location with another range's location.",
      "signatures": [
        {
          "params": [
            {
              "name": "range",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/compare-location.yaml\n\n// Compares the location of one paragraph in relation to another paragraph.\nawait Word.run(async (context) => {\n  const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;\n  paragraphs.load(\"items\");\n\n  await context.sync();\n\n  const firstParagraphAsRange: Word.Range = paragraphs.items[0].getRange();\n  const secondParagraphAsRange: Word.Range = paragraphs.items[1].getRange();\n\n  const comparedLocation = firstParagraphAsRange.compareLocationWith(secondParagraphAsRange);\n\n  await context.sync();\n\n  const locationValue: Word.LocationRelation = comparedLocation.value;\n  console.log(`Location of the first paragraph in relation to the second paragraph: ${locationValue}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the range and its content from the document.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to delete the range object.\n    range.delete();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Deleted the selection (range object)');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "detectLanguage",
      "kind": null,
      "description": "> **Note**: This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "expandTo",
      "kind": null,
      "description": "Returns a new range that extends from this range in either direction to cover another range. This range isn't changed. Throws an `ItemNotFound` error if the two ranges don't have a union.",
      "signatures": [
        {
          "params": [
            {
              "name": "range",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml\n\nawait Word.run(async (context) => {\n  // Get the complete sentence (as range) associated with the insertion point.\n  const sentences: Word.RangeCollection = context.document\n    .getSelection()\n    .getTextRanges([\".\"] /* Using the \".\" as delimiter */, false /*means without trimming spaces*/);\n  sentences.load(\"$none\");\n  await context.sync();\n\n  // Expand the range to the end of the paragraph to get all the complete sentences.\n  const sentencesToTheEndOfParagraph: Word.RangeCollection = sentences.items[0]\n    .getRange()\n    .expandTo(\n      context.document\n        .getSelection()\n        .paragraphs.getFirst()\n        .getRange(Word.RangeLocation.end)\n    )\n    .getTextRanges([\".\"], false /* Don't trim spaces*/);\n  sentencesToTheEndOfParagraph.load(\"text\");\n  await context.sync();\n\n  for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {\n    console.log(sentencesToTheEndOfParagraph.items[i].text);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "expandToOrNullObject",
      "kind": null,
      "description": "Returns a new range that extends from this range in either direction to cover another range. This range isn't changed. If the two ranges don't have a union, then this method will return an object with its `isNullObject` property set to `true`. For further information, see *OrNullObject methods and properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "range",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getBookmarks",
      "kind": "read",
      "description": "Gets the names all bookmarks in or overlapping the range. A bookmark is hidden if its name starts with the underscore character.",
      "signatures": [
        {
          "params": [
            {
              "name": "includeHidden",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "includeAdjacent",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getComments",
      "kind": "read",
      "description": "Gets comments associated with the range.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml\n\n// Gets the comments in the selected content.\nawait Word.run(async (context) => {\n  const comments: Word.CommentCollection = context.document.getSelection().getComments();\n\n  // Load objects to log in the console.\n  comments.load();\n  await context.sync();\n\n  console.log(\"Comments:\", comments);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getContentControls",
      "kind": "read",
      "description": "Gets the currently supported content controls in the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-checkbox-content-control.yaml\n\n// Deletes the first checkbox content control found in the selection.\nawait Word.run(async (context) => {\n  const selectedRange: Word.Range = context.document.getSelection();\n  let selectedContentControl = selectedRange\n    .getContentControls({\n      types: [Word.ContentControlType.checkBox]\n    })\n    .getFirstOrNullObject();\n  selectedContentControl.load(\"id\");\n\n  await context.sync();\n\n  if (selectedContentControl.isNullObject) {\n    const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;\n    parentContentControl.load(\"id,type\");\n    await context.sync();\n\n    if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.checkBox) {\n      console.warn(\"No checkbox content control is currently selected.\");\n      return;\n    } else {\n      selectedContentControl = parentContentControl;\n    }\n  }\n\n  console.log(`About to delete checkbox content control with id: ${selectedContentControl.id}`);\n  selectedContentControl.delete(false);\n  await context.sync();\n\n  console.log(\"Deleted checkbox content control.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getHtml",
      "kind": "read",
      "description": "Gets an HTML representation of the range object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use `Range.getOoxml()` and convert the returned XML to HTML.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to get the HTML of the current selection.\n    const html = range.getHtml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The HTML read from the document was: ' + html.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getHyperlinkRanges",
      "kind": "read",
      "description": "Gets hyperlink child ranges within the range.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "await Word.run(async (context) => {\n    // Get the entire document body.\n    const bodyRange = context.document.body.getRange(Word.RangeLocation.whole);\n\n    // Get all the ranges that only consist of hyperlinks.\n    const hyperLinks = bodyRange.getHyperlinkRanges();\n    hyperLinks.load(\"hyperlink\");\n    await context.sync();\n\n    // Log each hyperlink.\n    hyperLinks.items.forEach((linkRange) => {\n        console.log(linkRange.hyperlink);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getNextTextRange",
      "kind": "read",
      "description": "Gets the next text range by using punctuation marks and/or other ending marks. Throws an `ItemNotFound` error if this text range is the last one.",
      "signatures": [
        {
          "params": [
            {
              "name": "endingMarks",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimSpacing",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getNextTextRangeOrNullObject",
      "kind": "read",
      "description": "Gets the next text range by using punctuation marks and/or other ending marks. If this text range is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see *OrNullObject methods and properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "endingMarks",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimSpacing",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "getOoxml",
      "kind": "read",
      "description": "Gets the OOXML representation of the range object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to get the OOXML of the current selection.\n    const ooxml = range.getOoxml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('The OOXML read from the document was:  ' + ooxml.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getRange",
      "kind": "read",
      "description": "Clones the range, or gets the starting or ending point of the range as a new range.",
      "signatures": [
        {
          "params": [
            {
              "name": "rangeLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-dropdown-list-content-control.yaml\n\n// Places a dropdown list content control at the end of the selection.\nawait Word.run(async (context) => {\n  let selection = context.document.getSelection();\n  selection.getRange(Word.RangeLocation.end).insertContentControl(Word.ContentControlType.dropDownList);\n  await context.sync();\n\n  console.log(\"Dropdown list content control inserted at the end of the selection.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getReviewedText",
      "kind": "read",
      "description": "Gets reviewed text based on ChangeTrackingVersion selection.",
      "signatures": [
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "changeTrackingVersion",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-change-tracking.yaml\n\n// Gets the reviewed text.\nawait Word.run(async (context) => {\n  const range: Word.Range = context.document.getSelection();\n  const before = range.getReviewedText(Word.ChangeTrackingVersion.original);\n  const after = range.getReviewedText(Word.ChangeTrackingVersion.current);\n\n  await context.sync();\n\n  console.log(\"Reviewed text (before):\", before.value, \"Reviewed text (after):\", after.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getTextRanges",
      "kind": "read",
      "description": "Gets the text child ranges in the range by using punctuation marks and/or other ending marks.",
      "signatures": [
        {
          "params": [
            {
              "name": "endingMarks",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimSpacing",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml\n\nawait Word.run(async (context) => {\n  // Get the complete sentence (as range) associated with the insertion point.\n  const sentences: Word.RangeCollection = context.document\n    .getSelection()\n    .getTextRanges([\".\"] /* Using the \".\" as delimiter */, false /*means without trimming spaces*/);\n  sentences.load(\"$none\");\n  await context.sync();\n\n  // Expand the range to the end of the paragraph to get all the complete sentences.\n  const sentencesToTheEndOfParagraph: Word.RangeCollection = sentences.items[0]\n    .getRange()\n    .expandTo(\n      context.document\n        .getSelection()\n        .paragraphs.getFirst()\n        .getRange(Word.RangeLocation.end)\n    )\n    .getTextRanges([\".\"], false /* Don't trim spaces*/);\n  sentencesToTheEndOfParagraph.load(\"text\");\n  await context.sync();\n\n  for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {\n    console.log(sentencesToTheEndOfParagraph.items[i].text);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getTrackedChanges",
      "kind": "read",
      "description": "Gets the collection of the TrackedChange objects in the range.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "highlight",
      "kind": null,
      "description": "Highlights the range temporarily without changing document content. To highlight the text permanently, set the range's Font.HighlightColor.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertBookmark",
      "kind": "create",
      "description": "Inserts a bookmark on the range. If a bookmark of the same name exists somewhere, it is deleted first.",
      "signatures": [
        {
          "params": [
            {
              "name": "name",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertBreak",
      "kind": "create",
      "description": "Inserts a break at the specified location in the main document.",
      "signatures": [
        {
          "params": [
            {
              "name": "breakType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to insert a page break after the selected text.\n    range.insertBreak(Word.BreakType.page, Word.InsertLocation.after);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Inserted a page break after the selected text.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertCanvas",
      "kind": "create",
      "description": "Inserts a floating canvas in front of text with its anchor at the beginning of the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertComment",
      "kind": "create",
      "description": "Insert a comment on the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "commentText",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml\n\n// Sets a comment on the selected content.\nawait Word.run(async (context) => {\n  const text = (document.getElementById(\"comment-text\") as HTMLInputElement).value;\n  const comment: Word.Comment = context.document.getSelection().insertComment(text);\n\n  // Load object to log in the console.\n  comment.load();\n  await context.sync();\n\n  console.log(\"Comment inserted:\", comment);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertContentControl",
      "kind": "create",
      "description": "Wraps the Range object with a content control.",
      "signatures": [
        {
          "params": [
            {
              "name": "contentControlType",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml\n\n// Simulates creation of a template. First searches the document for instances of the string \"Contractor\",\n// then changes the format  of each search result,\n// then wraps each search result within a content control,\n// finally sets a tag and title property on each content control.\nawait Word.run(async (context) => {\n    const results: Word.RangeCollection = context.document.body.search(\"Contractor\");\n    results.load(\"font/bold\");\n\n    // Check to make sure these content controls haven't been added yet.\n    const customerContentControls: Word.ContentControlCollection = context.document.contentControls.getByTag(\"customer\");\n    customerContentControls.load(\"text\");\n    await context.sync();\n\n  if (customerContentControls.items.length === 0) {\n    for (let i = 0; i < results.items.length; i++) { \n        results.items[i].font.bold = true;\n        let cc: Word.ContentControl = results.items[i].insertContentControl();\n        cc.tag = \"customer\";  // This value is used in the next step of this sample.\n        cc.title = \"Customer Name \" + i;\n    }\n  }\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertEndnote",
      "kind": "create",
      "description": "Inserts an endnote. The endnote reference is placed after the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "insertText",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertField",
      "kind": "create",
      "description": "Inserts a field at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "fieldType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "text",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "removeFormatting",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "fieldType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "text",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "removeFormatting",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-fields.yaml\n\n// Inserts a Date field before selection.\nawait Word.run(async (context) => {\n  const range: Word.Range = context.document.getSelection().getRange();\n\n  const field: Word.Field = range.insertField(Word.InsertLocation.before, Word.FieldType.date, '\\\\@ \"M/d/yyyy h:mm am/pm\"', true);\n\n  field.load(\"result,code\");\n  await context.sync();\n\n  if (field.isNullObject) {\n    console.log(\"There are no fields in this document.\");\n  } else {\n    console.log(\"Code of the field: \" + field.code, \"Result of the field: \" + JSON.stringify(field.result));\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertFileFromBase64",
      "kind": "create",
      "description": "Inserts a document at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64File",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to insert base64 encoded .docx at the beginning of the range.\n    // You'll need to implement getBase64() to make this work.\n    range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Added base64 encoded text to the beginning of the range.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertFootnote",
      "kind": "create",
      "description": "Inserts a footnote. The footnote reference is placed after the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "insertText",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml\n\n// Sets a footnote on the selected content.\nawait Word.run(async (context) => {\n  const text = (document.getElementById(\"input-footnote\") as HTMLInputElement).value;\n  const footnote: Word.NoteItem = context.document.getSelection().insertFootnote(text);\n  await context.sync();\n\n  console.log(\"Inserted footnote.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertGeometricShape",
      "kind": "create",
      "description": "Inserts a geometric shape in front of text with its anchor at the beginning of the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "geometricShapeType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "geometricShapeType",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertHtml",
      "kind": "create",
      "description": "Inserts HTML at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "html",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to insert HTML in to the beginning of the range.\n    range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('HTML added to the beginning of the range.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertInlinePictureFromBase64",
      "kind": "create",
      "description": "Inserts a picture at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64EncodedImage",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-shapes-text-boxes.yaml\n\nawait Word.run(async (context) => {\n  // Inserts a picture at the start of the first text box.\n  const firstShapeWithTextBox: Word.Shape = context.document.body.shapes\n    .getByTypes([Word.ShapeType.textBox])\n    .getFirst();\n  firstShapeWithTextBox.load(\"type/body\");\n  await context.sync();\n\n  const startRange: Word.Range = firstShapeWithTextBox.body.getRange(Word.RangeLocation.start);\n  const newPic: Word.InlinePicture = startRange.insertInlinePictureFromBase64(\n    getPictureBase64(),\n    Word.InsertLocation.start\n  );\n  newPic.load();\n  await context.sync();\n\n  console.log(\"New inline picture properties:\", newPic);\n});\n\n...\n\n// Returns Base64-encoded image data for a sample picture.\nconst pictureBase64 =\n\"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\";\nreturn pictureBase64;",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertOoxml",
      "kind": "create",
      "description": "Inserts OOXML at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "ooxml",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to insert OOXML in to the beginning of the range.\n    range.insertOoxml(\"<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>\", Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('OOXML added to the beginning of the range.');\n});\n\n// Read \"Create better add-ins for Word with Office Open XML\" for guidance on working with OOXML.\n// https://learn.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertParagraph",
      "kind": "create",
      "description": "Inserts a paragraph at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "paragraphText",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to insert the paragraph after the range.\n    range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Paragraph added to the end of the range.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertPictureFromBase64",
      "kind": "create",
      "description": "Inserts a floating picture in front of text with its anchor at the beginning of the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "base64EncodedImage",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertTable",
      "kind": "create",
      "description": "Inserts a table with the specified number of rows and columns.",
      "signatures": [
        {
          "params": [
            {
              "name": "rowCount",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "columnCount",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "values",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "insertText",
      "kind": "create",
      "description": "Inserts text at the specified location.",
      "signatures": [
        {
          "params": [
            {
              "name": "text",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertLocation",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to insert the paragraph at the end of the range.\n    range.insertText('New text inserted into the range.', Word.InsertLocation.end);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Text added to the end of the range.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insertTextBox",
      "kind": "create",
      "description": "Inserts a floating text box in front of text with its anchor at the beginning of the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "text",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "insertShapeOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-shapes-text-boxes.yaml\n\nawait Word.run(async (context) => {\n  // Inserts a text box at the beginning of the selection.\n  const range: Word.Range = context.document.getSelection();\n  const insertShapeOptions: Word.InsertShapeOptions = {\n    top: 0,\n    left: 0,\n    height: 100,\n    width: 100\n  };\n\n  const newTextBox: Word.Shape = range.insertTextBox(\"placeholder text\", insertShapeOptions);\n  await context.sync();\n\n  console.log(\"Inserted a text box at the beginning of the current selection.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "intersectWith",
      "kind": null,
      "description": "Returns a new range as the intersection of this range with another range. This range isn't changed. Throws an `ItemNotFound` error if the two ranges aren't overlapped or adjacent.",
      "signatures": [
        {
          "params": [
            {
              "name": "range",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "intersectWithOrNullObject",
      "kind": null,
      "description": "Returns a new range as the intersection of this range with another range. This range isn't changed. If the two ranges aren't overlapped or adjacent, then this method will return an object with its `isNullObject` property set to `true`. For further information, see *OrNullObject methods and properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "range",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "removeHighlight",
      "kind": "delete",
      "description": "Removes the highlight added by the Highlight function if any.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "search",
      "kind": null,
      "description": "Performs a search with the specified SearchOptions on the scope of the range object. The search results are a collection of range objects.",
      "signatures": [
        {
          "params": [
            {
              "name": "searchText",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "searchOptions",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "select",
      "kind": null,
      "description": "Selects and navigates the Word UI to the range.",
      "signatures": [
        {
          "params": [
            {
              "name": "selectionMode",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "selectionMode",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": null,
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    const range = context.document.getSelection();\n\n    // Queue a command to insert HTML in to the beginning of the range.\n    range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);\n\n    // Queue a command to select the HTML that was inserted.\n    range.select();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log('Selected the range.');\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "split",
      "kind": null,
      "description": "Splits the range into child ranges by using delimiters.",
      "signatures": [
        {
          "params": [
            {
              "name": "delimiters",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "multiParagraphs",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimDelimiters",
              "type": null,
              "required": true,
              "description": null
            },
            {
              "name": "trimSpacing",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.Range` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RangeData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": []
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word"
    ]
  }
}