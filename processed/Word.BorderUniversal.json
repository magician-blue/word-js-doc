{
  "class": {
    "name": "Word.BorderUniversal",
    "package": "word",
    "extends": [
      "ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents the BorderUniversal object, which manages borders for a range, paragraph, table, or frame.",
    "examples": []
  },
  "properties": [
    {
      "name": "artStyle",
      "type": "Word.PageBorderArt | \"Apples\" | \"MapleMuffins\" | \"CakeSlice\" | \"CandyCorn\" | \"IceCreamCones\" | \"ChampagneBottle\" | \"PartyGlass\" | \"ChristmasTree\" | \"Trees\" | \"PalmsColor\" | \"Balloons3Colors\" | \"BalloonsHotAir\" | \"PartyFavor\" | \"ConfettiStreamers\" | \"Hearts\" | \"HeartBalloon\" | \"Stars3D\" | \"StarsShadowed\" | \"Stars\" | \"Sun\" | \"Earth2\" | \"Earth1\" | \"PeopleHats\" | \"Sombrero\" | \"Pencils\" | \"Packages\" | \"Clocks\" | \"Firecrackers\" | \"Rings\" | \"MapPins\" | \"Confetti\" | \"CreaturesButterfly\" | \"CreaturesLadyBug\" | \"CreaturesFish\" | \"BirdsFlight\" | \"ScaredCat\" | \"Bats\" | \"FlowersRoses\" | \"FlowersRedRose\" | \"Poinsettias\" | \"Holly\" | \"FlowersTiny\" | \"FlowersPansy\" | \"FlowersModern2\" | \"FlowersModern1\" | \"WhiteFlowers\" | \"Vine\" | \"FlowersDaisies\" | \"FlowersBlockPrint\" | \"DecoArchColor\" | \"Fans\" | \"Film\" | \"Lightning1\" | \"Compass\" | \"DoubleD\" | \"ClassicalWave\" | \"ShadowedSquares\" | \"TwistedLines1\" | \"Waveline\" | \"Quadrants\" | \"CheckedBarColor\" | \"Swirligig\" | \"PushPinNote1\" | \"PushPinNote2\" | \"Pumpkin1\" | \"EggsBlack\" | \"Cup\" | \"HeartGray\" | \"GingerbreadMan\" | \"BabyPacifier\" | \"BabyRattle\" | \"Cabins\" | \"HouseFunky\" | \"StarsBlack\" | \"Snowflakes\" | \"SnowflakeFancy\" | \"Skyrocket\" | \"Seattle\" | \"MusicNotes\" | \"PalmsBlack\" | \"MapleLeaf\" | \"PaperClips\" | \"ShorebirdTracks\" | \"People\" | \"PeopleWaving\" | \"EclipsingSquares2\" | \"Hypnotic\" | \"DiamondsGray\" | \"DecoArch\" | \"DecoBlocks\" | \"CirclesLines\" | \"Papyrus\" | \"Woodwork\" | \"WeavingBraid\" | \"WeavingRibbon\" | \"WeavingAngles\" | \"ArchedScallops\" | \"Safari\" | \"CelticKnotwork\" | \"CrazyMaze\" | \"EclipsingSquares1\" | \"Birds\" | \"FlowersTeacup\" | \"Northwest\" | \"Southwest\" | \"Tribal6\" | \"Tribal4\" | \"Tribal3\" | \"Tribal2\" | \"Tribal5\" | \"XIllusions\" | \"ZanyTriangles\" | \"Pyramids\" | \"PyramidsAbove\" | \"ConfettiGrays\" | \"ConfettiOutline\" | \"ConfettiWhite\" | \"Mosaic\" | \"Lightning2\" | \"HeebieJeebies\" | \"LightBulb\" | \"Gradient\" | \"TriangleParty\" | \"TwistedLines2\" | \"Moons\" | \"Ovals\" | \"DoubleDiamonds\" | \"ChainLink\" | \"Triangles\" | \"Tribal1\" | \"MarqueeToothed\" | \"SharksTeeth\" | \"Sawtooth\" | \"SawtoothGray\" | \"PostageStamp\" | \"WeavingStrips\" | \"ZigZag\" | \"CrossStitch\" | \"Gems\" | \"CirclesRectangles\" | \"CornerTriangles\" | \"CreaturesInsects\" | \"ZigZagStitch\" | \"Checkered\" | \"CheckedBarBlack\" | \"Marquee\" | \"BasicWhiteDots\" | \"BasicWideMidline\" | \"BasicWideOutline\" | \"BasicWideInline\" | \"BasicThinLines\" | \"BasicWhiteDashes\" | \"BasicWhiteSquares\" | \"BasicBlackSquares\" | \"BasicBlackDashes\" | \"BasicBlackDots\" | \"StarsTop\" | \"CertificateBanner\" | \"Handmade1\" | \"Handmade2\" | \"TornPaper\" | \"TornPaperBlack\" | \"CouponCutoutDashes\" | \"CouponCutoutDots\"",
      "description": "Specifies the graphical page-border design for the document.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Apply a decorative stars border design to the first paragraph in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph in the document\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Set the art style to a decorative stars design\n    paragraph.border.artStyle = \"Stars3D\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "artWidth",
      "type": "number",
      "description": "Specifies the width (in points) of the graphical page border specified in the artStyle property.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the graphical page border width to 24 points for the first paragraph in the document",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    \n    // Set the art width to 24 points\n    border.artWidth = 24;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "color",
      "type": "string",
      "description": "Specifies the color for the BorderUniversal object. You can provide the value in the '#RRGGBB' format.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the border color of the first paragraph to red using the hex color format",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    \n    border.color = \"#FF0000\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "colorIndex",
      "type": "Word.ColorIndex | \"Auto\" | \"Black\" | \"Blue\" | \"Turquoise\" | \"BrightGreen\" | \"Pink\" | \"Red\" | \"Yellow\" | \"White\" | \"DarkBlue\" | \"Teal\" | \"Green\" | \"Violet\" | \"DarkRed\" | \"DarkYellow\" | \"Gray50\" | \"Gray25\" | \"ClassicRed\" | \"ClassicBlue\" | \"ByAuthor\"",
      "description": "Specifies the color for the BorderUniversal or Word.Font object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the border color of the first paragraph to red using the colorIndex property",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    \n    // Set the border color to red\n    border.colorIndex = \"Red\";\n    border.visible = true;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a BorderUniversal object to synchronize border properties with the Office host application",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph in the document\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get the border object for the paragraph\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    \n    // Access the request context from the border object\n    const borderContext = border.context;\n    \n    // Use the context to load and sync border properties\n    border.load(\"type,color,width\");\n    await borderContext.sync();\n    \n    console.log(`Border type: ${border.type}`);\n    console.log(`Border color: ${border.color}`);\n    console.log(`Border width: ${border.width}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "inside",
      "type": "boolean",
      "description": "Returns true if an inside border can be applied to the specified object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check if an inside border can be applied to a table and display the result in the console",
          "usage_code": "await Word.run(async (context) => {\n    const table = context.document.body.tables.getFirst();\n    const borders = table.getBorder(Word.BorderLocation.inside);\n    borders.load(\"inside\");\n    \n    await context.sync();\n    \n    console.log(`Can apply inside border: ${borders.inside}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isVisible",
      "type": "boolean",
      "description": "Specifies whether the border is visible.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Make the border of the first paragraph invisible",
          "usage_code": "await Word.run(async (context) => {\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    const border = firstParagraph.getBorder(Word.BorderLocation.top);\n    \n    border.isVisible = false;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lineStyle",
      "type": "Word.BorderLineStyle | \"None\" | \"Single\" | \"Dot\" | \"DashSmallGap\" | \"DashLargeGap\" | \"DashDot\" | \"DashDotDot\" | \"Double\" | \"Triple\" | \"ThinThickSmallGap\" | \"ThickThinSmallGap\" | \"ThinThickThinSmallGap\" | \"ThinThickMedGap\" | \"ThickThinMedGap\" | \"ThinThickThinMedGap\" | \"ThinThickLargeGap\" | \"ThickThinLargeGap\" | \"ThinThickThinLargeGap\" | \"SingleWavy\" | \"DoubleWavy\" | \"DashDotStroked\" | \"Emboss3D\" | \"Engrave3D\" | \"Outset\" | \"Inset\"",
      "description": "Specifies the line style of the border.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a paragraph's bottom border to use a double-line style",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const border = paragraph.getBorder(Word.BorderLocation.bottom);\n    \n    border.lineStyle = \"Double\";\n    border.visible = true;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lineWidth",
      "type": "Word.LineWidth | \"Pt025\" | \"Pt050\" | \"Pt075\" | \"Pt100\" | \"Pt150\" | \"Pt225\" | \"Pt300\" | \"Pt450\" | \"Pt600\"",
      "description": "Specifies the line width of an object's border.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the border line width of the first paragraph to 2.25 points",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    border.lineWidth = Word.LineWidth.pt225;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.BorderUniversalLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.BorderUniversal",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.BorderUniversal",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.BorderUniversal",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get and display the border color of the first paragraph in the document",
          "usage_code": "await Word.run(async (context) => {\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    const border = firstParagraph.getBorder(Word.BorderLocation.top);\n    \n    // Load the color property of the border\n    border.load(\"color\");\n    \n    await context.sync();\n    \n    console.log(\"Border color: \" + border.color);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.BorderUniversalUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.BorderUniversal",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Set multiple border properties at once for the first paragraph, including color, line style, and width",
          "usage_code": "await Word.run(async (context) => {\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    const border = firstParagraph.getBorder(Word.BorderLocation.top);\n    \n    // Set multiple border properties at once\n    border.set({\n        color: \"#FF0000\",\n        lineStyle: Word.BorderLineStyle.single,\n        width: 3\n    });\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.BorderUniversal object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.BorderUniversalData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.BorderUniversalData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get a paragraph's border properties as a plain JavaScript object and log it to the console for inspection or serialization.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph in the document\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get the border object for the paragraph\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    \n    // Load border properties\n    border.load(\"type, color, width, visible\");\n    \n    await context.sync();\n    \n    // Convert the border object to a plain JavaScript object\n    const borderData = border.toJSON();\n    \n    // Now you can use the plain object for logging, serialization, etc.\n    console.log(\"Border properties:\", borderData);\n    console.log(\"Border color:\", borderData.color);\n    console.log(\"Border width:\", borderData.width);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.BorderUniversal",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Apply a border to a paragraph and track it across multiple sync calls to modify its properties without getting an InvalidObjectPath error",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    \n    // Track the border object for use across multiple sync calls\n    border.track();\n    \n    await context.sync();\n    \n    // Now we can safely modify the border properties after sync\n    border.type = Word.BorderType.single;\n    border.color = \"#FF0000\";\n    border.width = 2;\n    \n    await context.sync();\n    \n    // Can continue to work with the tracked border object\n    border.width = 4;\n    \n    await context.sync();\n    \n    // Untrack when done to free up memory\n    border.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.BorderUniversal",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Apply a border to a paragraph, then untrack the border object to free memory after the operation is complete.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get the border object and track it\n    const border = paragraph.getBorder(Word.BorderLocation.top);\n    border.track();\n    border.load(\"type\");\n    \n    await context.sync();\n    \n    // Apply border settings\n    border.type = Word.BorderType.single;\n    border.color = \"#0000FF\";\n    border.width = 2;\n    \n    await context.sync();\n    \n    // Untrack the border object to release memory\n    border.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word",
      "https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientobject",
      "https://learn.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.pageborderart",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.requestcontext",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.colorindex",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.borderlinestyle",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.linewidth",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.interfaces.borderuniversalloadoptions",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.borderuniversal",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.interfaces.borderuniversalupdatedata",
      "https://learn.microsoft.com/en-us/javascript/api/office/officeextension.updateoptions",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.interfaces.borderuniversaldata"
    ]
  }
}