{
  "class": {
    "name": "FrameCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents the collection of [Word.Frame](/en-us/javascript/api/word/word.frame) objects.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a FrameCollection to verify the connection between the add-in and Word before performing operations on frames.",
          "usage_code": "await Word.run(async (context) => {\n    const frames = context.document.body.getFrames();\n    \n    // Access the request context associated with the FrameCollection\n    const frameContext = frames.context;\n    \n    // Verify the context is valid by checking if it matches the current context\n    if (frameContext === context) {\n        console.log(\"FrameCollection is properly connected to the Word context\");\n        \n        // Load and sync using the context\n        frames.load(\"items\");\n        await context.sync();\n        \n        console.log(`Found ${frames.items.length} frames in the document`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Frame[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all frames in the document and log the count and text content of each frame to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the frame collection from the document body\n    const frames = context.document.body.framesets.getFirst().frames;\n    \n    // Load the items property to access the array of frames\n    frames.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the loaded frames using the items property\n    console.log(`Total frames: ${frames.items.length}`);\n    \n    // Iterate through each frame in the items array\n    for (let i = 0; i < frames.items.length; i++) {\n        const frame = frames.items[i];\n        frame.load(\"text\");\n        await context.sync();\n        \n        console.log(`Frame ${i + 1}: ${frame.text}`);\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Returns a `Frame` object that represents a new frame added to a range, selection, or document.",
      "signatures": [
        {
          "params": [
            {
              "name": "range",
              "type": "Word.Range",
              "required": true,
              "description": "The range where the frame will be added."
            }
          ],
          "returns": {
            "type": "Word.Frame",
            "description": "A `Frame` object that represents the new frame."
          }
        }
      ],
      "examples": [
        {
          "description": "Add a frame around the first paragraph in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph in the document\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    firstParagraph.load(\"text\");\n    \n    await context.sync();\n    \n    // Add a frame around the first paragraph\n    const frame = context.document.frames.add(firstParagraph.getRange());\n    \n    await context.sync();\n    \n    console.log(\"Frame added around the first paragraph\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the `FrameCollection` object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Delete all frames from the active Word document",
          "usage_code": "await Word.run(async (context) => {\n    // Get all frames in the document\n    const frames = context.document.body.frameSet.frames;\n    \n    // Load the frame collection\n    frames.load(\"items\");\n    await context.sync();\n    \n    // Delete all frames\n    frames.delete();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a `Frame` object by its index in the collection.",
      "signatures": [
        {
          "params": [
            {
              "name": "index",
              "type": "number",
              "required": true,
              "description": "The location of a `Frame` object."
            }
          ],
          "returns": {
            "type": "Word.Frame",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the first frame in the document and change its border color to red.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of frames in the document\n    const frames = context.document.body.frames;\n    \n    // Get the first frame by index\n    const firstFrame = frames.getItem(0);\n    \n    // Load the frame's properties\n    firstFrame.load(\"borderColor\");\n    \n    await context.sync();\n    \n    // Change the border color to red\n    firstFrame.borderColor = \"#FF0000\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.FrameCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.FrameCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.FrameCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.FrameCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the text content of all frames in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get all frames in the document\n    const frames = context.document.body.frameCollection;\n    \n    // Load the text content property for all frames\n    frames.load(\"items/textContent\");\n    \n    await context.sync();\n    \n    // Display the text content of each frame\n    frames.items.forEach((frame, index) => {\n        console.log(`Frame ${index + 1}: ${frame.textContent}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.FrameCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FrameCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.FrameCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export frame collection data to JSON format for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get all frames in the document\n    const frames = context.document.body.framesets.getFirst().frames;\n    \n    // Load properties needed for the frames\n    frames.load(\"items\");\n    \n    await context.sync();\n    \n    // Convert the frame collection to a plain JavaScript object\n    const framesJSON = frames.toJSON();\n    \n    // Log the JSON representation (can be used for debugging or data export)\n    console.log(JSON.stringify(framesJSON, null, 2));\n    \n    // The framesJSON object contains an \"items\" array with frame data\n    console.log(`Number of frames: ${framesJSON.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.FrameCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track all frames in the document to monitor and work with them across multiple sync calls without getting InvalidObjectPath errors",
          "usage_code": "await Word.run(async (context) => {\n    // Get all frames in the document\n    const frames = context.document.body.frames;\n    \n    // Track the frames collection for use across sync calls\n    frames.track();\n    \n    // Load frame properties\n    frames.load(\"items\");\n    await context.sync();\n    \n    // Now we can safely work with frames across multiple sync calls\n    console.log(`Found ${frames.items.length} frames`);\n    \n    // Perform operations across sync boundaries\n    for (let i = 0; i < frames.items.length; i++) {\n        frames.items[i].load(\"width,height\");\n    }\n    await context.sync();\n    \n    // Access properties after another sync\n    frames.items.forEach((frame, index) => {\n        console.log(`Frame ${index}: ${frame.width}x${frame.height}`);\n    });\n    \n    // Untrack when done to release memory\n    frames.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.FrameCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load frame collection, process the frames, then untrack the collection to free memory after use",
          "usage_code": "await Word.run(async (context) => {\n    // Get the frames collection from the document body\n    const frames = context.document.body.framesets.getFirst().frames;\n    \n    // Track the collection for processing\n    frames.track();\n    \n    // Load properties we need\n    frames.load(\"items\");\n    await context.sync();\n    \n    // Process the frames (e.g., log count)\n    console.log(`Found ${frames.items.length} frames`);\n    \n    // Untrack the collection to release memory\n    frames.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word"
    ]
  }
}