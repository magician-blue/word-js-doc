{
  "class": {
    "name": "Bookmark",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi BETA",
      "status": "PREVIEW ONLY"
    },
    "description": "Represents a single bookmark in a document, selection, or range. The `Bookmark` object is a member of the `Bookmark` collection. The [Word.BookmarkCollection](/en-us/javascript/api/word/word.bookmarkcollection) includes all the bookmarks listed in the Bookmark dialog box (Insert menu).",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a bookmark to load and read its properties",
          "usage_code": "await Word.run(async (context) => {\n    // Get a bookmark by name\n    const bookmark = context.document.getBookmarkByName(\"MyBookmark\");\n    \n    // Access the context property to use it for loading properties\n    const requestContext = bookmark.context;\n    \n    // Use the context to load bookmark properties\n    bookmark.load(\"name,range/text\");\n    await requestContext.sync();\n    \n    console.log(`Bookmark name: ${bookmark.name}`);\n    console.log(`Bookmark text: ${bookmark.range.text}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "end",
      "type": "number",
      "description": "Specifies the ending character position of the bookmark.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the ending character position of a bookmark named \"Introduction\" and display it in the console.",
          "usage_code": "await Word.run(async (context) => {\n    const bookmark = context.document.getBookmarkByName(\"Introduction\");\n    bookmark.load(\"end\");\n    \n    await context.sync();\n    \n    console.log(`The bookmark ends at character position: ${bookmark.end}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isColumn",
      "type": "boolean",
      "description": "Returns `true` if the bookmark is a table column.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check if a bookmark named \"MyBookmark\" is a table column and display an appropriate message based on the result.",
          "usage_code": "await Word.run(async (context) => {\n    const bookmark = context.document.getBookmarkByName(\"MyBookmark\");\n    bookmark.load(\"isColumn\");\n    \n    await context.sync();\n    \n    if (bookmark.isColumn) {\n        console.log(\"The bookmark represents a table column.\");\n    } else {\n        console.log(\"The bookmark is not a table column.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isEmpty",
      "type": "boolean",
      "description": "Returns `true` if the bookmark is empty.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check if a bookmark named \"Section1\" is empty and display an alert message based on the result.",
          "usage_code": "await Word.run(async (context) => {\n    const bookmark = context.document.getBookmarkByName(\"Section1\");\n    bookmark.load(\"isEmpty\");\n    \n    await context.sync();\n    \n    if (bookmark.isEmpty) {\n        console.log(\"The bookmark 'Section1' is empty (contains no content).\");\n    } else {\n        console.log(\"The bookmark 'Section1' contains content.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "name",
      "type": "string",
      "description": "Returns the name of the `Bookmark` object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the name of the first bookmark in the document and display it in the console.",
          "usage_code": "await Word.run(async (context) => {\n    const bookmarks = context.document.body.bookmarks;\n    bookmarks.load(\"items\");\n    \n    await context.sync();\n    \n    if (bookmarks.items.length > 0) {\n        const firstBookmark = bookmarks.items[0];\n        firstBookmark.load(\"name\");\n        \n        await context.sync();\n        \n        console.log(\"Bookmark name: \" + firstBookmark.name);\n    } else {\n        console.log(\"No bookmarks found in the document.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "range",
      "type": "Word.Range",
      "description": "Returns a `Range` object that represents the portion of the document that's contained in the `Bookmark` object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the text content from a bookmark named \"Introduction\" and display it in the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bookmark by name\n    const bookmark = context.document.bookmarks.getByName(\"Introduction\");\n    \n    // Get the range of the bookmark\n    const bookmarkRange = bookmark.range;\n    \n    // Load the text property of the range\n    bookmarkRange.load(\"text\");\n    \n    await context.sync();\n    \n    // Display the bookmark's text content\n    console.log(\"Bookmark text: \" + bookmarkRange.text);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "start",
      "type": "number",
      "description": "Specifies the starting character position of the bookmark.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the starting character position of a bookmark named \"Introduction\" and display it in the console.",
          "usage_code": "await Word.run(async (context) => {\n    const bookmark = context.document.getBookmarkByName(\"Introduction\");\n    bookmark.load(\"start\");\n    \n    await context.sync();\n    \n    console.log(`The bookmark starts at character position: ${bookmark.start}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "storyType",
      "type": "Word.StoryType | \"MainText\" | \"Footnotes\" | \"Endnotes\" | \"Comments\" | \"TextFrame\" | \"EvenPagesHeader\" | \"PrimaryHeader\" | \"EvenPagesFooter\" | \"PrimaryFooter\" | \"FirstPageHeader\" | \"FirstPageFooter\" | \"FootnoteSeparator\" | \"FootnoteContinuationSeparator\" | \"FootnoteContinuationNotice\" | \"EndnoteSeparator\" | \"EndnoteContinuationSeparator\" | \"EndnoteContinuationNotice\"",
      "description": "Returns the story type for the bookmark.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the story type of a bookmark to determine where in the document it is located (e.g., main text, header, footer, footnotes)",
          "usage_code": "await Word.run(async (context) => {\n    // Get a bookmark by name\n    const bookmark = context.document.getBookmarkByName(\"MyBookmark\");\n    \n    // Load the storyType property\n    bookmark.load(\"storyType\");\n    \n    await context.sync();\n    \n    // Display the story type\n    console.log(`Bookmark is located in: ${bookmark.storyType}`);\n    \n    // You can use the story type to determine bookmark location\n    if (bookmark.storyType === Word.StoryType.mainText) {\n        console.log(\"Bookmark is in the main document body\");\n    } else if (bookmark.storyType === Word.StoryType.primaryHeader) {\n        console.log(\"Bookmark is in the primary header\");\n    } else if (bookmark.storyType === Word.StoryType.footnotes) {\n        console.log(\"Bookmark is in the footnotes section\");\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "copyTo",
      "kind": "create",
      "description": "Copies this bookmark to the new bookmark specified in the `name` argument and returns a `Bookmark` object.",
      "signatures": [
        {
          "params": [
            {
              "name": "name",
              "type": "string",
              "required": true,
              "description": "The name of the new bookmark."
            }
          ],
          "returns": {
            "type": "Word.Bookmark",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Copy an existing bookmark named \"Introduction\" to create a new bookmark named \"IntroductionCopy\" in the document.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bookmark named \"Introduction\"\n    const originalBookmark = context.document.body.bookmarks.getByName(\"Introduction\");\n    \n    // Copy the bookmark to a new bookmark named \"IntroductionCopy\"\n    const copiedBookmark = originalBookmark.copyTo(\"IntroductionCopy\");\n    \n    // Load the name property to verify the copy\n    copiedBookmark.load(\"name\");\n    \n    await context.sync();\n    \n    console.log(`Bookmark copied successfully: ${copiedBookmark.name}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the bookmark.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Delete a bookmark named \"Section1\" from the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bookmark by name\n    const bookmark = context.document.getBookmarkByName(\"Section1\");\n    \n    // Delete the bookmark\n    bookmark.delete();\n    \n    await context.sync();\n    console.log(\"Bookmark 'Section1' has been deleted.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.BookmarkLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.Bookmark",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.Bookmark",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.Bookmark",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the name and text content of the first bookmark in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first bookmark in the document\n    const bookmarks = context.document.body.bookmarks;\n    bookmarks.load(\"items\");\n    await context.sync();\n    \n    if (bookmarks.items.length > 0) {\n        const firstBookmark = bookmarks.items[0];\n        \n        // Load specific properties of the bookmark\n        firstBookmark.load(\"name, text\");\n        await context.sync();\n        \n        // Display the loaded properties\n        console.log(`Bookmark name: ${firstBookmark.name}`);\n        console.log(`Bookmark text: ${firstBookmark.text}`);\n    } else {\n        console.log(\"No bookmarks found in the document\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "select",
      "kind": "read",
      "description": "Selects the bookmark.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Select a bookmark named \"Introduction\" in the document to highlight its location for the user",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bookmark named \"Introduction\"\n    const bookmark = context.document.bookmarks.getByName(\"Introduction\");\n    \n    // Select the bookmark\n    bookmark.select();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "configure",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.BookmarkUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.Bookmark",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Update multiple properties of a bookmark at once, setting both its name and retrieving its text content",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first bookmark in the document\n    const bookmarks = context.document.body.bookmarks;\n    bookmarks.load(\"items\");\n    await context.sync();\n    \n    if (bookmarks.items.length > 0) {\n        const bookmark = bookmarks.items[0];\n        \n        // Set multiple properties at once using the set() method\n        bookmark.set({\n            name: \"UpdatedBookmarkName\"\n        });\n        \n        // Load properties to verify the changes\n        bookmark.load(\"name, range/text\");\n        await context.sync();\n        \n        console.log(`Bookmark name: ${bookmark.name}`);\n        console.log(`Bookmark text: ${bookmark.range.text}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.Bookmark` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BookmarkData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.BookmarkData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a bookmark's properties to JSON format for logging or data transfer purposes",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first bookmark in the document\n    const bookmarks = context.document.body.bookmarks;\n    bookmarks.load(\"items\");\n    await context.sync();\n    \n    if (bookmarks.items.length > 0) {\n        const bookmark = bookmarks.items[0];\n        \n        // Load properties we want to serialize\n        bookmark.load(\"name, type, range/text\");\n        await context.sync();\n        \n        // Convert bookmark to plain JavaScript object\n        const bookmarkData = bookmark.toJSON();\n        \n        // Now you can use the plain object for logging or data transfer\n        console.log(\"Bookmark as JSON:\", JSON.stringify(bookmarkData, null, 2));\n        console.log(\"Bookmark name:\", bookmarkData.name);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Bookmark",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a bookmark object across multiple sync calls to maintain its reference while modifying its properties and content outside of a single batch operation.",
          "usage_code": "await Word.run(async (context) => {\n    // Get a bookmark by name\n    const bookmark = context.document.getBookmarkByName(\"MyBookmark\");\n    bookmark.load(\"name,range/text\");\n    \n    // Track the bookmark to use it across multiple sync calls\n    bookmark.track();\n    \n    await context.sync();\n    \n    console.log(`Original bookmark text: ${bookmark.range.text}`);\n    \n    // Modify the bookmark's range in a subsequent operation\n    bookmark.range.insertText(\" - Updated\", Word.InsertLocation.end);\n    \n    await context.sync();\n    \n    console.log(`Updated bookmark text: ${bookmark.range.text}`);\n    \n    // Untrack when done to free up memory\n    bookmark.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Bookmark",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load a bookmark, use its properties, then untrack it to free memory when done",
          "usage_code": "await Word.run(async (context) => {\n    // Get a bookmark by name\n    const bookmark = context.document.getBookmarkByName(\"MyBookmark\");\n    \n    // Load properties to use them\n    bookmark.load(\"name,range/text\");\n    await context.sync();\n    \n    // Use the bookmark\n    console.log(`Bookmark: ${bookmark.name}, Text: ${bookmark.range.text}`);\n    \n    // Untrack the bookmark to release memory\n    bookmark.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word",
      "/en-us/javascript/api/word/word.bookmarkcollection",
      "/en-us/javascript/api/office/officeextension.clientobject",
      "/en-us/javascript/api/word/word.requestcontext",
      "/en-us/javascript/api/word/word.range",
      "/en-us/javascript/api/word/word.storytype",
      "/en-us/javascript/api/word/word.bookmark",
      "/en-us/javascript/api/word/word.interfaces.bookmarkloadoptions",
      "/en-us/javascript/api/word/word.interfaces.bookmarkupdatedata",
      "/en-us/javascript/api/office/officeextension.updateoptions",
      "/en-us/javascript/api/word/word.interfaces.bookmarkdata",
      "/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member"
    ]
  }
}