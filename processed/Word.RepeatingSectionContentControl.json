{
  "class": {
    "name": "Word.RepeatingSectionContentControl",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents the RepeatingSectionContentControl object.",
    "examples": []
  },
  "properties": [
    {
      "name": "allowInsertDeleteSection",
      "type": "boolean",
      "description": "Specifies whether users can add or remove sections from this repeating section content control by using the user interface.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Prevent users from adding or removing sections in a repeating section content control through the UI",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]).getFirst();\n    const repeatingSection = repeatingSections.parentContentControlOrNullObject as Word.RepeatingSectionContentControl;\n    \n    repeatingSection.load(\"allowInsertDeleteSection\");\n    await context.sync();\n    \n    // Disable the ability to insert or delete sections\n    repeatingSection.allowInsertDeleteSection = false;\n    \n    await context.sync();\n    console.log(\"Users can no longer add or remove sections from this repeating section\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "appearance",
      "type": "Word.ContentControlAppearance | \"BoundingBox\" | \"Tags\" | \"Hidden\"",
      "description": "Specifies the appearance of the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the appearance of a repeating section content control to show bounding box borders",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSectionContentControl = repeatingSectionContentControls.getFirstOrNullObject();\n    \n    // Load the content control\n    repeatingSectionContentControl.load(\"appearance\");\n    await context.sync();\n    \n    // Set the appearance to show bounding box\n    if (!repeatingSectionContentControl.isNullObject) {\n        repeatingSectionContentControl.appearance = Word.ContentControlAppearance.boundingBox;\n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "color",
      "type": "string",
      "description": "Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the color of a repeating section content control to blue (#0000FF)",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionContentControl = context.document.contentControls\n        .getByTypes([Word.ContentControlType.repeatingSectionItem])\n        .getFirst();\n    \n    // Set the color to blue\n    repeatingSectionContentControl.color = \"#0000FF\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a repeating section content control to verify the connection is established before performing operations on the control.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject();\n    \n    // Load the repeating section\n    repeatingSection.load(\"id\");\n    await context.sync();\n    \n    if (!repeatingSection.isNullObject) {\n        // Access the context property to verify connection\n        const requestContext = repeatingSection.context;\n        \n        // Use the context to perform operations\n        console.log(\"Request context is available:\", requestContext !== null);\n        console.log(\"Repeating section ID:\", repeatingSection.id);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "id",
      "type": "string",
      "description": "Returns the identification for the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the ID of a repeating section content control and display it in the console for tracking purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSectionCC = repeatingSectionContentControls.getFirstOrNullObject();\n    \n    // Load the id property\n    repeatingSectionCC.load(\"id\");\n    \n    await context.sync();\n    \n    if (!repeatingSectionCC.isNullObject) {\n        // Access and display the content control ID\n        console.log(\"Repeating Section Content Control ID: \" + repeatingSectionCC.id);\n    } else {\n        console.log(\"No repeating section content control found.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isTemporary",
      "type": "boolean",
      "description": "Specifies whether to remove the content control from the active document when the user edits the contents of the control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a repeating section content control to be automatically removed when the user edits its contents",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSectionContentControl = repeatingSectionContentControls.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    repeatingSectionContentControl.load(\"isTemporary\");\n    await context.sync();\n    \n    // Set the content control to be temporary (removed when user edits it)\n    repeatingSectionContentControl.isTemporary = true;\n    \n    await context.sync();\n    console.log(\"Repeating section content control set to temporary\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "level",
      "type": "Word.ContentControlLevel | \"Inline\" | \"Paragraph\" | \"Row\" | \"Cell\"",
      "description": "Returns the level of the content controlâwhether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check the level of a repeating section content control and display it in the console to determine if it's inline, paragraph-level, row-level, or cell-level.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const firstRepeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    // Load the level property\n    firstRepeatingSection.load(\"level\");\n    \n    await context.sync();\n    \n    if (!firstRepeatingSection.isNullObject) {\n        // Display the level of the repeating section content control\n        console.log(`Repeating section level: ${firstRepeatingSection.level}`);\n    } else {\n        console.log(\"No repeating section content control found.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lockContentControl",
      "type": "boolean",
      "description": "Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Lock a repeating section content control to prevent users from deleting it from the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject();\n    \n    repeatingSection.load(\"lockContentControl\");\n    await context.sync();\n    \n    if (!repeatingSection.isNullObject) {\n        // Lock the content control to prevent deletion\n        repeatingSection.lockContentControl = true;\n        await context.sync();\n        \n        console.log(\"Repeating section content control is now locked\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lockContents",
      "type": "boolean",
      "description": "Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Lock the contents of a repeating section content control to prevent users from editing the repeated items while still allowing them to add or remove sections.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    repeatingSection.load(\"lockContents\");\n    await context.sync();\n    \n    // Lock the contents to prevent editing\n    repeatingSection.lockContents = true;\n    \n    await context.sync();\n    console.log(\"Repeating section contents are now locked\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "placeholderText",
      "type": "Word.BuildingBlock",
      "description": "Returns a `BuildingBlock` object that represents the placeholder text for the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get and display the placeholder text content from a repeating section content control by accessing its BuildingBlock object.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    // Load the placeholder text building block\n    const placeholderBlock = repeatingSection.placeholderText;\n    placeholderBlock.load(\"value\");\n    \n    await context.sync();\n    \n    // Display the placeholder text\n    if (!repeatingSection.isNullObject) {\n        console.log(\"Placeholder text: \" + placeholderBlock.value);\n    } else {\n        console.log(\"No repeating section content control found.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "range",
      "type": "Word.Range",
      "description": "Gets a `Range` object that represents the contents of the content control in the active document.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Highlight all text within a repeating section content control by applying a yellow background color to its range.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    // Get the range of the repeating section content control\n    const range = repeatingSection.range;\n    \n    // Apply yellow highlight to the range\n    range.font.highlightColor = \"yellow\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "repeatingSectionItems",
      "type": "Word.RepeatingSectionItemCollection",
      "description": "Returns the collection of repeating section items in this repeating section content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the count of items in a repeating section content control and log each item's index to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSection]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    // Get the collection of repeating section items\n    const items = repeatingSection.repeatingSectionItems;\n    items.load(\"items\");\n    \n    await context.sync();\n    \n    // Log the count and index of each item\n    console.log(`Total items in repeating section: ${items.items.length}`);\n    items.items.forEach((item, index) => {\n        console.log(`Item ${index + 1}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "repeatingSectionItemTitle",
      "type": "string",
      "description": "Specifies the name of the repeating section items used in the context menu associated with this repeating section content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the repeating section item title to \"Employee Record\" so it appears in the context menu when users interact with the repeating section content control.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionCC = context.document.contentControls\n        .getByTypes([Word.ContentControlType.repeatingSection])\n        .getFirst() as Word.RepeatingSectionContentControl;\n    \n    // Set the item title that appears in the context menu\n    repeatingSectionCC.repeatingSectionItemTitle = \"Employee Record\";\n    \n    await context.sync();\n    \n    console.log(\"Repeating section item title set to 'Employee Record'\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "showingPlaceholderText",
      "type": "boolean",
      "description": "Returns whether the placeholder text for the content control is being displayed.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check if a repeating section content control is showing placeholder text and log the result to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const firstRepeatingSectionCC = repeatingSectionContentControls.getFirstOrNullObject();\n    \n    firstRepeatingSectionCC.load(\"showingPlaceholderText\");\n    \n    await context.sync();\n    \n    if (!firstRepeatingSectionCC.isNullObject) {\n        if (firstRepeatingSectionCC.showingPlaceholderText) {\n            console.log(\"The content control is showing placeholder text\");\n        } else {\n            console.log(\"The content control has user-entered content\");\n        }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "tag",
      "type": "string",
      "description": "Specifies a tag to identify the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a tag \"employee-section\" on a repeating section content control to identify it for later retrieval or processing.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionCC = context.document.contentControls\n        .getByTypes([Word.ContentControlType.repeatingSectionItem])\n        .getFirst();\n    \n    // Set the tag to identify this content control\n    repeatingSectionCC.tag = \"employee-section\";\n    \n    await context.sync();\n    console.log(\"Tag 'employee-section' has been set on the repeating section content control\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "title",
      "type": "string",
      "description": "Specifies the title for the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the title of a repeating section content control to \"Employee Records\"",
          "usage_code": "await Word.run(async (context) => {\n    const contentControls = context.document.contentControls.getByTag(\"repeatingSectionCC\");\n    contentControls.load(\"items\");\n    \n    await context.sync();\n    \n    if (contentControls.items.length > 0) {\n        const repeatingSectionCC = contentControls.items[0] as Word.RepeatingSectionContentControl;\n        repeatingSectionCC.title = \"Employee Records\";\n        \n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "xmlapping",
      "type": "Word.XmlMapping",
      "description": "Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check if a repeating section content control has XML mapping configured and log the mapping details to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    // Load the XML mapping property\n    repeatingSection.load(\"xmlMapping\");\n    \n    await context.sync();\n    \n    if (!repeatingSection.isNullObject) {\n        const xmlMapping = repeatingSection.xmlMapping;\n        xmlMapping.load(\"customXmlPart, xpath\");\n        \n        await context.sync();\n        \n        console.log(\"XML Mapping XPath:\", xmlMapping.xpath);\n        console.log(\"Has Custom XML Part:\", xmlMapping.customXmlPart !== null);\n    } else {\n        console.log(\"No repeating section content control found.\");\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "copy",
      "kind": null,
      "description": "Copies the content control from the active document to the Clipboard.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Copy a repeating section content control to the clipboard so it can be pasted elsewhere in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const firstRepeatingSection = repeatingSections.getFirstOrNullObject();\n    \n    firstRepeatingSection.load(\"id\");\n    await context.sync();\n    \n    if (!firstRepeatingSection.isNullObject) {\n        // Copy the repeating section content control to clipboard\n        firstRepeatingSection.copy();\n        await context.sync();\n        \n        console.log(\"Repeating section content control copied to clipboard\");\n    } else {\n        console.log(\"No repeating section content control found\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "cut",
      "kind": null,
      "description": "Removes the content control from the active document and moves the content control to the Clipboard.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Remove a repeating section content control from the document and move it to the clipboard so it can be pasted elsewhere",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    repeatingSections.load(\"items\");\n    \n    await context.sync();\n    \n    if (repeatingSections.items.length > 0) {\n        const firstRepeatingSection = repeatingSections.items[0] as Word.RepeatingSectionContentControl;\n        \n        // Cut the repeating section content control to clipboard\n        firstRepeatingSection.cut();\n        \n        await context.sync();\n        console.log(\"Repeating section content control cut to clipboard\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the content control and the contents of the content control.",
      "signatures": [
        {
          "params": [
            {
              "name": "deleteContents",
              "type": "boolean",
              "required": false,
              "description": "Optional. Whether to delete the contents inside the control."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Delete a repeating section content control and all its contents from the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const firstRepeatingSection = repeatingSections.getFirstOrNullObject();\n    \n    firstRepeatingSection.load(\"id\");\n    await context.sync();\n    \n    if (!firstRepeatingSection.isNullObject) {\n        // Delete the repeating section and its contents\n        firstRepeatingSection.delete(true);\n        await context.sync();\n        \n        console.log(\"Repeating section content control deleted successfully\");\n    } else {\n        console.log(\"No repeating section content control found\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.RepeatingSectionContentControlLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.RepeatingSectionContentControl",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.RepeatingSectionContentControl",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.RepeatingSectionContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and read the title property of the first repeating section content control in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const firstRepeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    // Load the title property\n    firstRepeatingSection.load(\"title\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Check if the control exists and read the property\n    if (!firstRepeatingSection.isNullObject) {\n        console.log(\"Repeating section title: \" + firstRepeatingSection.title);\n    } else {\n        console.log(\"No repeating section content control found\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "configure",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.RepeatingSectionContentControlUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.RepeatingSectionContentControl",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Update multiple properties of a repeating section content control, setting both its title and appearance properties at once.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionCC = context.document.contentControls\n        .getByTypes([Word.ContentControlType.repeatingSectionItem])\n        .getFirst();\n    \n    // Set multiple properties at once using the set() method\n    repeatingSectionCC.set({\n        title: \"Employee Records\",\n        appearance: Word.ContentControlAppearance.boundingBox,\n        color: \"blue\"\n    });\n    \n    await context.sync();\n    console.log(\"Repeating section content control properties updated\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "setPlaceholderText",
      "kind": "configure",
      "description": "Sets the placeholder text that displays in the content control until a user enters their own text.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.ContentControlPlaceholderOptions",
              "required": false,
              "description": "Optional. The options for configuring the content control's placeholder text."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Set placeholder text for a repeating section content control to guide users to add employee records",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject();\n    \n    repeatingSection.load(\"type\");\n    await context.sync();\n    \n    if (!repeatingSection.isNullObject) {\n        // Set placeholder text for the repeating section\n        repeatingSection.setPlaceholderText(\"Click here to add employee information\");\n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.RepeatingSectionContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RepeatingSectionContentControlData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.RepeatingSectionContentControlData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a repeating section content control to JSON format for logging or data export purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject();\n    \n    // Load properties to serialize\n    repeatingSection.load(\"id,tag,title,type,text\");\n    \n    await context.sync();\n    \n    if (!repeatingSection.isNullObject) {\n        // Convert the repeating section content control to a plain JSON object\n        const jsonData = repeatingSection.toJSON();\n        \n        // Log the JSON representation\n        console.log(\"Repeating Section Content Control as JSON:\");\n        console.log(JSON.stringify(jsonData, null, 2));\n        \n        // You can now use this plain object for data export, storage, or comparison\n        const exportData = {\n            timestamp: new Date().toISOString(),\n            controlData: jsonData\n        };\n        console.log(\"Export package:\", exportData);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.RepeatingSectionContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a repeating section content control across multiple sync calls to safely modify its properties without encountering \"InvalidObjectPath\" errors.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const repeatingSection = repeatingSections.getFirstOrNullObject() as Word.RepeatingSectionContentControl;\n    \n    // Track the object for use across sync calls\n    repeatingSection.track();\n    \n    await context.sync();\n    \n    // Now we can safely use the object after sync\n    if (!repeatingSection.isNullObject) {\n        repeatingSection.title = \"Updated Repeating Section\";\n        await context.sync();\n        \n        // Continue working with the tracked object\n        repeatingSection.tag = \"tracked-section\";\n        await context.sync();\n    }\n    \n    // Untrack when done to free up memory\n    repeatingSection.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.RepeatingSectionContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Process a repeating section content control and then release it from memory tracking to improve performance after you're done using it.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section content control in the document\n    const repeatingSectionCC = context.document.contentControls\n        .getByTypes([Word.ContentControlType.repeatingSectionItem])\n        .getFirstOrNullObject();\n    \n    // Load and track the object\n    repeatingSectionCC.load(\"tag\");\n    await context.sync();\n    \n    if (!repeatingSectionCC.isNullObject) {\n        // Work with the repeating section content control\n        console.log(\"Repeating section tag: \" + repeatingSectionCC.tag);\n        \n        // Untrack the object to free memory after we're done using it\n        repeatingSectionCC.untrack();\n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word/word.repeatingsectioncontentcontrol",
      "https://learn.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets"
    ]
  }
}