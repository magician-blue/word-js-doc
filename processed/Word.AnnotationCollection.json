{
  "class": {
    "name": "Word.AnnotationCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.7"
    },
    "description": "Contains a collection of [Word.Annotation](/en-us/javascript/api/word/word.annotation) objects.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Gets annotations found in the selected paragraph.\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  const annotations: Word.AnnotationCollection = paragraph.getAnnotations();\n  annotations.load(\"id,state,critiqueAnnotation\");\n\n  await context.sync();\n\n  console.log(\"Annotations found:\");\n\n  for (let i = 0; i < annotations.items.length; i++) {\n    const annotation: Word.Annotation = annotations.items[i];\n\n    console.log(`ID ${annotation.id} - state '${annotation.state}':`, annotation.critiqueAnnotation.critique);\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from an AnnotationCollection to verify the connection between the add-in and Word before performing operations on annotations.",
          "usage_code": "await Word.run(async (context) => {\n    const annotationCollection = context.document.body.getAnnotations();\n    \n    // Access the request context associated with the annotation collection\n    const requestContext = annotationCollection.context;\n    \n    // Verify the context is valid by checking if it matches the current context\n    if (requestContext === context) {\n        console.log(\"AnnotationCollection is connected to the current Word context\");\n        \n        // Load and sync using the context\n        annotationCollection.load(\"items\");\n        await context.sync();\n        \n        console.log(`Found ${annotationCollection.items.length} annotations`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Annotation[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all annotations in the document and log their IDs to the console",
          "usage_code": "await Word.run(async (context) => {\n    const annotations = context.document.body.getAnnotations();\n    annotations.load(\"items\");\n    \n    await context.sync();\n    \n    const annotationItems = annotations.items;\n    console.log(`Found ${annotationItems.length} annotations`);\n    \n    annotationItems.forEach((annotation, index) => {\n        console.log(`Annotation ${index + 1} ID: ${annotation.id}`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first annotation in this collection. Throws an ItemNotFound error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Annotation",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the first annotation in the document and display its ID in the console",
          "usage_code": "await Word.run(async (context) => {\n    // Get the annotations collection from the document body\n    const annotations = context.document.body.getAnnotations();\n    \n    // Get the first annotation in the collection\n    const firstAnnotation = annotations.getFirst();\n    \n    // Load the ID property\n    firstAnnotation.load(\"id\");\n    \n    // Sync to execute the queued commands\n    await context.sync();\n    \n    // Display the first annotation's ID\n    console.log(\"First annotation ID:\", firstAnnotation.id);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first annotation in this collection. If this collection is empty, then this method will return an object with its isNullObject property set to true. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Annotation",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if a document has any annotations and display the first annotation's ID, or show a message if no annotations exist.",
          "usage_code": "await Word.run(async (context) => {\n    const annotations = context.document.body.getAnnotations();\n    const firstAnnotation = annotations.getFirstOrNullObject();\n    \n    firstAnnotation.load(\"id, isNullObject\");\n    await context.sync();\n    \n    if (firstAnnotation.isNullObject) {\n        console.log(\"No annotations found in the document.\");\n    } else {\n        console.log(`First annotation ID: ${firstAnnotation.id}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.AnnotationCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.AnnotationCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.AnnotationCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.AnnotationCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the text content of all annotations in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the annotation collection from the document body\n    const annotations = context.document.body.getAnnotations();\n    \n    // Load the critiqueAnnotation property which contains the text\n    annotations.load(\"items/critiqueAnnotation\");\n    \n    await context.sync();\n    \n    // Display the annotation text\n    annotations.items.forEach((annotation, index) => {\n        console.log(`Annotation ${index + 1}: ${annotation.critiqueAnnotation}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.AnnotationCollection object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.AnnotationCollectionData) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.AnnotationCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Retrieve all annotations from the document and export them as a plain JSON object for logging or external storage.",
          "usage_code": "await Word.run(async (context) => {\n    // Get all annotations in the document\n    const annotations = context.document.getAnnotations();\n    \n    // Load properties needed for the annotations\n    annotations.load(\"id, state, critiqueAnnotation\");\n    \n    await context.sync();\n    \n    // Convert the AnnotationCollection to a plain JavaScript object\n    const annotationsData = annotations.toJSON();\n    \n    // The result contains an \"items\" array with annotation data\n    console.log(\"Annotations as JSON:\", JSON.stringify(annotationsData, null, 2));\n    console.log(\"Number of annotations:\", annotationsData.items.length);\n    \n    // You can now work with the plain JavaScript object\n    annotationsData.items.forEach((annotation, index) => {\n        console.log(`Annotation ${index + 1}: ID=${annotation.id}, State=${annotation.state}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.AnnotationCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track an annotation collection across multiple sync calls to monitor and work with annotations without getting \"InvalidObjectPath\" errors",
          "usage_code": "await Word.run(async (context) => {\n    const annotations = context.document.body.getAnnotations();\n    \n    // Track the collection to use it across multiple sync calls\n    annotations.track();\n    \n    // First sync to load the collection\n    await context.sync();\n    \n    console.log(`Found ${annotations.items.length} annotations`);\n    \n    // Can safely use the tracked collection in subsequent operations\n    annotations.load(\"items\");\n    await context.sync();\n    \n    // Process annotations across multiple sync calls\n    for (const annotation of annotations.items) {\n        annotation.load(\"critiqueAnnotation\");\n        await context.sync();\n        console.log(`Annotation ID: ${annotation.id}`);\n    }\n    \n    // Untrack when done to free up memory\n    annotations.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.AnnotationCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load annotations from a document, process them, then untrack the collection to free memory after use.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the annotations collection from the document\n    const annotations = context.document.body.getAnnotations();\n    \n    // Track the collection for change tracking\n    annotations.track();\n    \n    // Load properties to work with\n    annotations.load(\"items\");\n    await context.sync();\n    \n    // Process the annotations (e.g., log count)\n    console.log(`Found ${annotations.items.length} annotations`);\n    \n    // Untrack the collection to release memory\n    annotations.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml"
    ]
  }
}