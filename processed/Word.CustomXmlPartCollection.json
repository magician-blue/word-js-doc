{
  "class": {
    "name": "Word.CustomXmlPartCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi 1.4",
      "status": null
    },
    "description": "Contains the collection of [Word.CustomXmlPart](/en-us/javascript/api/word/word.customxmlpart) objects.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a CustomXmlPartCollection to verify the connection to the Word host application before performing operations on custom XML parts.",
          "usage_code": "await Word.run(async (context) => {\n    const customXmlParts = context.document.customXmlParts;\n    \n    // Access the request context associated with the collection\n    const requestContext = customXmlParts.context;\n    \n    // Verify the context is available and connected\n    if (requestContext) {\n        console.log(\"Request context is available and connected to Word host application\");\n        \n        // Use the context to load and sync custom XML parts\n        customXmlParts.load(\"items\");\n        await context.sync();\n        \n        console.log(`Found ${customXmlParts.items.length} custom XML parts`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.CustomXmlPart[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Retrieve and log the IDs of all custom XML parts in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the custom XML parts collection\n    const customXmlParts = context.document.customXmlParts;\n    \n    // Load the items property to access the array of custom XML parts\n    customXmlParts.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the items array and log each custom XML part's ID\n    console.log(`Total custom XML parts: ${customXmlParts.items.length}`);\n    \n    customXmlParts.items.forEach((part, index) => {\n        part.load(\"id\");\n    });\n    \n    await context.sync();\n    \n    customXmlParts.items.forEach((part, index) => {\n        console.log(`Custom XML Part ${index + 1} ID: ${part.id}`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Adds a new custom XML part to the document.",
      "signatures": [
        {
          "params": [
            {
              "name": "xml",
              "type": "string",
              "required": true,
              "description": "XML content. Must be a valid XML fragment."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Add a custom XML part with namespace to the document, retrieve its ID and namespace URI, and store the ID in document settings for later use.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Adds a custom XML part.\n// If you want to populate the CustomXml.namespaceUri property, you must include the xmlns attribute.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load([\"id\", \"namespaceUri\"]);\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(`Added custom XML part with namespace URI ${customXmlPart.namespaceUri}:`, readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartIdNS\", customXmlPart.id);\n\n  await context.sync();\n});",
          "output_code": null
        },
        {
          "description": "Add a custom XML part containing reviewer data to the document and store its ID in the document settings for later retrieval.",
          "usage_code": "// Adds a custom XML part.\nawait Word.run(async (context) => {\n  const originalXml =\n    \"<Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n  const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.add(originalXml);\n  customXmlPart.load(\"id\");\n  const xmlBlob = customXmlPart.getXml();\n\n  await context.sync();\n\n  const readableXml = addLineBreaksToXML(xmlBlob.value);\n  console.log(\"Added custom XML part:\", readableXml);\n\n  // Store the XML part's ID in a setting so the ID is available to other functions.\n  const settings: Word.SettingCollection = context.document.settings;\n  settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n  await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getByNamespace",
      "kind": "read",
      "description": "Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.",
      "signatures": [
        {
          "params": [
            {
              "name": "namespaceUri",
              "type": "string",
              "required": true,
              "description": "The namespace URI."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartScopedCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Retrieve all custom XML parts from the document that match the namespace URI 'http://schemas.contoso.com/review/1.0' and display the count of matching parts.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Gets the custom XML parts with the specified namespace URI.\nawait Word.run(async (context) => {\n  const namespaceUri = \"http://schemas.contoso.com/review/1.0\";\n  console.log(`Specified namespace URI: ${namespaceUri}`);\n  const scopedCustomXmlParts: Word.CustomXmlPartScopedCollection =\n    context.document.customXmlParts.getByNamespace(namespaceUri);\n  scopedCustomXmlParts.load(\"items\");\n  await context.sync();\n\n  console.log(`Number of custom XML parts found with this namespace: ${!scopedCustomXmlParts.items ? 0 : scopedCustomXmlParts.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getCount",
      "kind": "read",
      "description": "Gets the number of items in the collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "OfficeExtension.ClientResult<number>",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the total count of custom XML parts in the document and display it in the console",
          "usage_code": "await Word.run(async (context) => {\n    // Get the custom XML parts collection\n    const customXmlParts = context.document.customXmlParts;\n    \n    // Get the count of custom XML parts\n    const count = customXmlParts.getCount();\n    \n    // Sync to get the count value\n    await context.sync();\n    \n    // Display the count\n    console.log(`Total custom XML parts: ${count.value}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a custom XML part based on its ID.",
      "signatures": [
        {
          "params": [
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "ID or index of the custom XML part to be retrieved."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Retrieve a custom XML part by its stored ID and query it for elements matching an XPath expression with namespace mapping.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-custom-xml-part-ns.yaml\n\n// Original XML: <Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Queries a custom XML part for elements matching the search terms.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartIdNS\").load(\"value\");\n\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xpathToQueryFor = \"/contoso:Reviewers\";\n    const clientResult = customXmlPart.query(xpathToQueryFor, {\n      contoso: \"http://schemas.contoso.com/review/1.0\"\n    });\n\n    await context.sync();\n\n    console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);\n    for (let i = 0; i < clientResult.value.length; i++) {\n      console.log(clientResult.value[i]);\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to query.\");\n  }\n});",
          "output_code": null
        },
        {
          "description": "Retrieve a custom XML part by its stored ID and query it for all Reviewer elements, logging the matching results to the console.",
          "usage_code": "// Original XML: <Reviewers><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\n\n// Queries a custom XML part for elements matching the search terms.\nawait Word.run(async (context) => {\n  const settings: Word.SettingCollection = context.document.settings;\n  const xmlPartIDSetting: Word.Setting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n\n  await context.sync();\n\n  if (xmlPartIDSetting.value) {\n    const customXmlPart: Word.CustomXmlPart = context.document.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xpathToQueryFor = \"/Reviewers/Reviewer\";\n    const clientResult = customXmlPart.query(xpathToQueryFor, {\n      contoso: \"http://schemas.contoso.com/review/1.0\"\n    });\n\n    await context.sync();\n\n    console.log(`Queried custom XML part for ${xpathToQueryFor} and found ${clientResult.value.length} matches:`);\n    for (let i = 0; i < clientResult.value.length; i++) {\n      console.log(clientResult.value[i]);\n    }\n  } else {\n    console.warn(\"Didn't find custom XML part to query.\");\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItemOrNullObject",
      "kind": "read",
      "description": "Gets a custom XML part based on its ID. If the CustomXmlPart doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "ID of the object to be retrieved."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPart",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if a custom XML part with a specific ID exists in the document and display its namespace URI if found, or log a message if it doesn't exist.",
          "usage_code": "await Word.run(async (context) => {\n    const customXmlParts = context.document.customXmlParts;\n    const targetId = \"{12345678-1234-1234-1234-123456789012}\";\n    \n    const customXmlPart = customXmlParts.getItemOrNullObject(targetId);\n    customXmlPart.load(\"isNullObject, namespaceUri\");\n    \n    await context.sync();\n    \n    if (customXmlPart.isNullObject) {\n        console.log(`Custom XML part with ID ${targetId} does not exist.`);\n    } else {\n        console.log(`Found custom XML part with namespace: ${customXmlPart.namespaceUri}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.CustomXmlPartCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the namespace URIs of all custom XML parts in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of custom XML parts\n    const customXmlParts = context.document.customXmlParts;\n    \n    // Load the items and their namespaceUri properties\n    customXmlParts.load(\"items/namespaceUri\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Display the namespace URIs\n    console.log(`Found ${customXmlParts.items.length} custom XML parts:`);\n    customXmlParts.items.forEach((part, index) => {\n        console.log(`Part ${index + 1}: ${part.namespaceUri}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlPartCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.CustomXmlPartCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize the custom XML parts collection to JSON format for logging or debugging purposes",
          "usage_code": "await Word.run(async (context) => {\n    // Get the custom XML parts collection\n    const customXmlParts = context.document.customXmlParts;\n    \n    // Load the properties we want to serialize\n    customXmlParts.load(\"items\");\n    \n    await context.sync();\n    \n    // Convert the collection to a plain JavaScript object\n    const jsonData = customXmlParts.toJSON();\n    \n    // Log or use the serialized data\n    console.log(\"Custom XML Parts:\", JSON.stringify(jsonData, null, 2));\n    console.log(\"Number of custom XML parts:\", jsonData.items.length);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a custom XML part collection across multiple sync calls to safely access and manipulate custom XML parts without encountering \"InvalidObjectPath\" errors.",
          "usage_code": "await Word.run(async (context) => {\n    const customXmlParts = context.document.customXmlParts;\n    customXmlParts.load(\"items\");\n    await context.sync();\n    \n    // Track the collection to use it across multiple sync calls\n    customXmlParts.track();\n    \n    // Add a new custom XML part\n    const xmlString = \"<root><item>Sample Data</item></root>\";\n    customXmlParts.add(xmlString);\n    await context.sync();\n    \n    // Safe to access the tracked collection after sync\n    customXmlParts.load(\"items/id\");\n    await context.sync();\n    \n    console.log(`Total custom XML parts: ${customXmlParts.items.length}`);\n    \n    // Untrack when done\n    customXmlParts.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPartCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Add a custom XML part to the document, use it to perform operations, then untrack it to release memory after the work is complete.",
          "usage_code": "await Word.run(async (context) => {\n    // Add a custom XML part to the collection\n    const customXmlParts = context.document.customXmlParts;\n    const xmlString = \"<root><item>Sample Data</item></root>\";\n    const customXmlPart = customXmlParts.add(xmlString);\n    \n    // Track the collection for use\n    customXmlParts.load(\"items\");\n    await context.sync();\n    \n    // Perform operations with the collection\n    console.log(`Total custom XML parts: ${customXmlParts.items.length}`);\n    \n    // Untrack the collection to release memory when done\n    customXmlParts.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word"
    ]
  }
}