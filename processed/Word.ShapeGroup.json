{
  "class": {
    "name": "ShapeGroup",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApiDesktop",
      "status": "1.2"
    },
    "description": "Represents a shape group in the document. To get the corresponding Shape object, use ShapeGroup.shape.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a ShapeGroup object to verify the connection between the add-in and Word application before performing operations on the shape group.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape group in the document\n    const shapeGroups = context.document.body.shapeGroups;\n    shapeGroups.load(\"items\");\n    await context.sync();\n    \n    if (shapeGroups.items.length > 0) {\n        const shapeGroup = shapeGroups.items[0];\n        \n        // Access the request context from the shape group\n        const requestContext = shapeGroup.context;\n        \n        // Verify the context is valid by using it to load properties\n        shapeGroup.load(\"id,name\");\n        await requestContext.sync();\n        \n        console.log(`Shape group accessed via context - ID: ${shapeGroup.id}, Name: ${shapeGroup.name}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "id",
      "type": "number",
      "description": "Gets an integer that represents the shape group identifier.",
      "since": "WordApiDesktop 1.2",
      "examples": [
        {
          "description": "Get the shape group identifier and display it in the console to track which shape group is being processed.",
          "usage_code": "await Word.run(async (context) => {\n    const shapeGroups = context.document.body.shapeGroups;\n    shapeGroups.load(\"id\");\n    \n    await context.sync();\n    \n    if (shapeGroups.items.length > 0) {\n        const shapeGroup = shapeGroups.items[0];\n        console.log(`Shape Group ID: ${shapeGroup.id}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "shape",
      "type": "Word.Shape",
      "description": "Gets the Shape object associated with the group.",
      "since": "WordApiDesktop 1.2",
      "examples": [
        {
          "description": "Get the shape group's associated Shape object and change its fill color to blue.",
          "usage_code": "await Word.run(async (context) => {\n    const shapeGroups = context.document.body.shapeGroups;\n    shapeGroups.load(\"items\");\n    await context.sync();\n    \n    if (shapeGroups.items.length > 0) {\n        const shapeGroup = shapeGroups.items[0];\n        \n        // Get the Shape object associated with the group\n        const groupShape = shapeGroup.shape;\n        groupShape.fill.setSolidColor(\"blue\");\n        \n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "shapes",
      "type": "Word.ShapeCollection",
      "description": "Gets the collection of Shape objects. Currently, only text boxes, geometric shapes, and pictures are supported.",
      "since": "WordApiDesktop 1.2",
      "examples": [
        {
          "description": "Get all shapes within a shape group and log their names to the console",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape group in the document\n    const shapeGroups = context.document.body.shapeGroups;\n    shapeGroups.load(\"items\");\n    await context.sync();\n    \n    if (shapeGroups.items.length > 0) {\n        const shapeGroup = shapeGroups.items[0];\n        \n        // Get the shapes collection from the shape group\n        const shapes = shapeGroup.shapes;\n        shapes.load(\"items/name\");\n        await context.sync();\n        \n        // Log each shape's name\n        shapes.items.forEach(shape => {\n            console.log(`Shape name: ${shape.name}`);\n        });\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.ShapeGroupLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.ShapeGroup",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.ShapeGroup",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.ShapeGroup",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the ID and child shape count of the first shape group in the document.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape group in the document\n    const shapeGroup = context.document.body.shapeGroups.getFirst();\n    \n    // Load specific properties of the shape group\n    shapeGroup.load(\"id, childShapeCount\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Display the loaded properties\n    console.log(`Shape Group ID: ${shapeGroup.id}`);\n    console.log(`Number of child shapes: ${shapeGroup.childShapeCount}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "configure",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.ShapeGroupUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.ShapeGroup",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Update multiple properties of a shape group at once, including its name and position",
          "usage_code": "await Word.run(async (context) => {\n    const shapeGroup = context.document.body.shapes.getItem(0).getAsShapeGroup();\n    \n    shapeGroup.set({\n        name: \"UpdatedShapeGroup\",\n        left: 100,\n        top: 150\n    });\n    \n    await context.sync();\n    console.log(\"Shape group properties updated successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.ShapeGroup` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShapeGroupData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.ShapeGroupData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a shape group's properties to JSON format for logging or data export purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape group in the document\n    const shapeGroups = context.document.body.shapeGroups;\n    shapeGroups.load(\"items\");\n    await context.sync();\n\n    if (shapeGroups.items.length > 0) {\n        const shapeGroup = shapeGroups.items[0];\n        \n        // Load properties you want to serialize\n        shapeGroup.load(\"id,name,width,height\");\n        await context.sync();\n\n        // Convert the shape group to a plain JavaScript object\n        const shapeGroupData = shapeGroup.toJSON();\n        \n        // Now you can use the plain object for logging, storage, etc.\n        console.log(\"Shape Group Data:\", JSON.stringify(shapeGroupData, null, 2));\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ShapeGroup",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a shape group object to maintain its reference across multiple sync calls when modifying its properties",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape group in the document\n    const shapeGroups = context.document.body.shapeGroups;\n    shapeGroups.load(\"items\");\n    await context.sync();\n    \n    if (shapeGroups.items.length > 0) {\n        const shapeGroup = shapeGroups.items[0];\n        \n        // Track the shape group to use it across multiple sync calls\n        shapeGroup.track();\n        \n        // First sync - load properties\n        shapeGroup.load(\"id,width,height\");\n        await context.sync();\n        \n        console.log(`Shape Group ID: ${shapeGroup.id}`);\n        \n        // Second sync - modify properties\n        shapeGroup.left = 100;\n        shapeGroup.top = 100;\n        await context.sync();\n        \n        // Untrack when done\n        shapeGroup.untrack();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "ungroup",
      "kind": null,
      "description": "Ungroups any grouped shapes in the specified shape group.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ShapeCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Ungroup all shapes in the first shape group found in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape group in the document\n    const shapeGroups = context.document.body.shapeGroups;\n    shapeGroups.load(\"items\");\n    \n    await context.sync();\n    \n    if (shapeGroups.items.length > 0) {\n        const firstShapeGroup = shapeGroups.items[0];\n        \n        // Ungroup the shapes in the shape group\n        firstShapeGroup.ungroup();\n        \n        await context.sync();\n        console.log(\"Shape group has been ungrouped.\");\n    } else {\n        console.log(\"No shape groups found in the document.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ShapeGroup",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Process a shape group to get its properties, then untrack it to free memory after you're done working with it.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape group in the document\n    const shapeGroup = context.document.body.shapeGroups.getFirst();\n    \n    // Track the object to work with it\n    shapeGroup.track();\n    \n    // Load properties you need\n    shapeGroup.load(\"id,name\");\n    await context.sync();\n    \n    // Use the shape group data\n    console.log(`Shape Group: ${shapeGroup.name} (ID: ${shapeGroup.id})`);\n    \n    // Untrack to release memory after you're done\n    shapeGroup.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word"
    ]
  }
}