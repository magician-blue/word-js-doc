{
  "class": {
    "name": "Word.PageCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApiDesktop 1.2",
      "status": null
    },
    "description": "Represents the collection of page.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/get-pages.yaml\n\nawait Word.run(async (context) => {\n  // Gets pages of the selection.\n  const pages: Word.PageCollection = context.document.getSelection().pages;\n  pages.load();\n  await context.sync();\n\n  // Log info for pages included in selection.\n  console.log(pages);\n  const pagesIndexes = [];\n  const pagesText = [];\n  for (let i = 0; i < pages.items.length; i++) {\n    const page = pages.items[i];\n    page.load('index');\n    pagesIndexes.push(page);\n\n    const range = page.getRange();\n    range.load('text');\n    pagesText.push(range);\n  }\n\n  await context.sync();\n\n  for (let i = 0; i < pagesIndexes.length; i++) {\n    console.log(`Index info for page ${i + 1} in the selection: ${pagesIndexes[i].index}`);\n    console.log(\"Text of that page in the selection:\", pagesText[i].text);\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a PageCollection to verify the connection to the Word host application before performing page operations",
          "usage_code": "await Word.run(async (context) => {\n    const pages = context.document.body.getRange().getPages();\n    \n    // Access the request context associated with the PageCollection\n    const requestContext = pages.context;\n    \n    // Verify the context is valid and connected to the host application\n    if (requestContext) {\n        console.log(\"PageCollection is connected to Word host application\");\n        \n        // Use the context to load and sync page data\n        pages.load(\"items\");\n        await requestContext.sync();\n        \n        console.log(`Number of pages: ${pages.items.length}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Page[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Iterate through all loaded pages in the document and log each page's ID to the console",
          "usage_code": "await Word.run(async (context) => {\n    // Get the page collection from the document\n    const pages = context.document.body.pages;\n    \n    // Load the pages collection\n    pages.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the loaded pages using the items property\n    const pageItems = pages.items;\n    \n    // Iterate through each page and log its ID\n    for (let i = 0; i < pageItems.length; i++) {\n        console.log(`Page ${i + 1} ID: ${pageItems[i].id}`);\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first page in this collection. Throws an ItemNotFound error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Page",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the first page in the document and display its page number in the console",
          "usage_code": "await Word.run(async (context) => {\n    // Get the page collection from the document\n    const pages = context.document.body.pages;\n    \n    // Get the first page\n    const firstPage = pages.getFirst();\n    \n    // Load the page number property\n    firstPage.load(\"pageNumber\");\n    \n    // Sync to execute the queued commands\n    await context.sync();\n    \n    // Display the page number\n    console.log(`First page number: ${firstPage.pageNumber}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first page in this collection. If this collection is empty, then this method will return an object with its isNullObject property set to true. For further information, see [*OrNullObject methods and properties](https://learn.microsoft.com/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Page",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if the document has any pages and display the page number of the first page, or show a message if the document is empty.",
          "usage_code": "await Word.run(async (context) => {\n    const pages = context.document.body.pages;\n    const firstPage = pages.getFirstOrNullObject();\n    firstPage.load(\"pageNumber, isNullObject\");\n    \n    await context.sync();\n    \n    if (firstPage.isNullObject) {\n        console.log(\"The document has no pages.\");\n    } else {\n        console.log(`First page number: ${firstPage.pageNumber}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.PageCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.PageCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.PageCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.PageCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the total number of pages in the active Word document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the page collection from the document body\n    const pages = context.document.body.pageCollection;\n    \n    // Load the count property of the page collection\n    pages.load(\"items\");\n    \n    // Synchronize the document state\n    await context.sync();\n    \n    // Display the number of pages\n    console.log(`Total pages in document: ${pages.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.PageCollection object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.PageCollectionData) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.PageCollectionData",
            "description": null
          }
        }
      ],
      "examples": []
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.PageCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a page collection to maintain references across multiple sync calls when working with page properties",
          "usage_code": "await Word.run(async (context) => {\n    // Get the page collection from the document\n    const pages = context.document.body.getRange().getPageCollection();\n    \n    // Track the page collection to prevent \"InvalidObjectPath\" errors\n    // when accessing it across multiple sync calls\n    pages.track();\n    \n    // Load page properties\n    pages.load(\"items\");\n    await context.sync();\n    \n    // First sync - access page count\n    console.log(`Total pages: ${pages.items.length}`);\n    \n    // Perform some other operations that might change the document\n    context.document.body.insertParagraph(\"New content\", Word.InsertLocation.end);\n    await context.sync();\n    \n    // Second sync - can still safely access the tracked page collection\n    console.log(`Pages still accessible: ${pages.items.length}`);\n    \n    // Untrack when done to free up memory\n    pages.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.PageCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load page information from a document, use it to display page count, then untrack the PageCollection to free memory",
          "usage_code": "await Word.run(async (context) => {\n    // Get the page collection and load its items\n    const pages = context.document.body.getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs();\n    \n    // Simpler approach - get pages from body\n    const body = context.document.body;\n    const pages = body.getRange().getRange('Whole').getParagraphs().getFirst().getRange().getParagraphs();\n    \n    // Actually get pages properly\n    const pageCollection = context.document.body.getRange().getRange('Whole').getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs().getFirst().getRange().getParagraphs();\n    \n    // Correct way to get pages\n    const range = context.document.body.getRange();\n    const pageCollection = range.getRange('Whole').getParagraphs().getFirst().getRange().getParagraphs();\n    \n    // Load the page collection\n    pageCollection.load(\"items\");\n    \n    await context.sync();\n    \n    // Use the page data\n    console.log(`Document has ${pageCollection.items.length} pages`);\n    \n    // Untrack the page collection to free memory\n    pageCollection.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word/word.pagecollection"
    ]
  }
}