{
  "class": {
    "name": "Word.RepeatingSectionItemCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents a collection of https://learn.microsoft.com/en-us/javascript/api/word/word.repeatingsectionitem objects in a Word document.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": "BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Access the request context from a RepeatingSectionItemCollection to verify the connection between the add-in and Word before performing operations on repeating section items.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first content control that is a repeating section\n    const contentControls = context.document.contentControls;\n    contentControls.load(\"items\");\n    await context.sync();\n    \n    const repeatingSectionCC = contentControls.items.find(\n        cc => cc.type === Word.ContentControlType.repeatingSectionItem\n    );\n    \n    if (repeatingSectionCC) {\n        const repeatingSectionItems = repeatingSectionCC.getRange().parentContentControl.repeatingSectionItemCollection;\n        \n        // Access the context property to verify the connection\n        const requestContext = repeatingSectionItems.context;\n        \n        // Use the context to perform operations\n        console.log(\"Context connected:\", requestContext !== null);\n        \n        // Load items using the same context\n        repeatingSectionItems.load(\"items\");\n        await requestContext.sync();\n        \n        console.log(`Found ${repeatingSectionItems.items.length} repeating section items`);\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getItemAt",
      "kind": "read",
      "description": "Returns an individual repeating section item.",
      "signatures": [
        {
          "params": [
            {
              "name": "index",
              "type": "number",
              "required": true,
              "description": "The index of the item to retrieve."
            }
          ],
          "returns": {
            "type": "Word.RepeatingSectionItem",
            "description": "A RepeatingSectionItem object representing the item at the specified index."
          }
        }
      ],
      "examples": [
        {
          "description": "Get the second repeating section item from the first content control and highlight its text in yellow.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first content control in the document\n    const contentControl = context.document.contentControls.getFirstOrNullObject();\n    contentControl.load(\"type\");\n    \n    await context.sync();\n    \n    // Get the repeating section items collection\n    const repeatingSectionItems = contentControl.repeatingSectionItems;\n    repeatingSectionItems.load(\"items\");\n    \n    await context.sync();\n    \n    // Get the second item (index 1) from the collection\n    const secondItem = repeatingSectionItems.getItemAt(1);\n    \n    // Highlight the text in the second repeating section item\n    secondItem.body.font.highlightColor = \"yellow\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.RepeatingSectionItemCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.RepeatingSectionItemCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the IDs of all repeating section items in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get all repeating section items in the document\n    const repeatingSectionItems = context.document.body.getRepeatingSectionItemCollection();\n    \n    // Load the 'id' property for all items in the collection\n    repeatingSectionItems.load(\"id\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Display the IDs of all repeating section items\n    console.log(`Found ${repeatingSectionItems.items.length} repeating section items:`);\n    repeatingSectionItems.items.forEach((item, index) => {\n        console.log(`Item ${index + 1} ID: ${item.id}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.RepeatingSectionItemCollection object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.RepeatingSectionItemCollectionData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "{ [key: string]: string; }",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export repeating section items data to JSON format for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get all repeating section items in the document\n    const repeatingSectionItems = context.document.contentControls\n        .getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    \n    // Load properties needed for the collection\n    repeatingSectionItems.load(\"items\");\n    \n    await context.sync();\n    \n    // Convert the collection to a plain JavaScript object\n    const jsonData = repeatingSectionItems.toJSON();\n    \n    // Log or use the JSON data\n    console.log(\"Repeating Section Items Data:\", JSON.stringify(jsonData, null, 2));\n    \n    // The jsonData object now contains a plain JavaScript representation\n    // that can be easily serialized, stored, or transmitted\n    return jsonData;\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.RepeatingSectionItemCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a repeating section item collection across multiple sync calls to safely access and modify items without encountering \"InvalidObjectPath\" errors",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first repeating section in the document\n    const repeatingSections = context.document.contentControls.getByTypes([Word.ContentControlType.repeatingSectionItem]);\n    const firstSection = repeatingSections.getFirstOrNullObject();\n    \n    await context.sync();\n    \n    if (!firstSection.isNullObject) {\n        const parentRepeatingSection = firstSection.parentContentControlOrNullObject;\n        await context.sync();\n        \n        if (!parentRepeatingSection.isNullObject) {\n            // Get the repeating section items collection\n            const items = parentRepeatingSection.repeatingSectionItemCollection;\n            \n            // Track the collection for use across multiple sync calls\n            items.track();\n            \n            await context.sync();\n            \n            // Now safe to use the collection across multiple syncs\n            items.load(\"items\");\n            await context.sync();\n            \n            console.log(`Found ${items.items.length} repeating section items`);\n            \n            // Perform additional operations\n            items.items.forEach((item, index) => {\n                console.log(`Item ${index + 1} ID: ${item.id}`);\n            });\n            \n            // Untrack when done\n            items.untrack();\n        }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.RepeatingSectionItemCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get all repeating section items in a document, perform operations on them, then untrack them to free memory and improve performance.",
          "usage_code": "await Word.run(async (context) => {\n    // Get all repeating section items in the document\n    const repeatingSectionItems = context.document.body.getRepeatingSectionItems();\n    \n    // Track the collection for use\n    repeatingSectionItems.load(\"items\");\n    await context.sync();\n    \n    // Perform some operations with the items\n    console.log(`Found ${repeatingSectionItems.items.length} repeating section items`);\n    \n    // Once done with the collection, untrack it to release memory\n    repeatingSectionItems.untrack();\n    \n    // Sync to apply the memory release\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word/word.repeatingsectionitem",
      "https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientobject",
      "https://learn.microsoft.com/en-us/javascript/api/word/word.requestcontext",
      "https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member",
      "https://learn.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets"
    ]
  }
}