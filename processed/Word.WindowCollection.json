{
  "class": {
    "name": "Word.WindowCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApiDesktop 1.2",
      "status": null
    },
    "description": "Represents the collection of window objects.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from the WindowCollection to verify the connection between the add-in and Word application before performing window operations.",
          "usage_code": "await Word.run(async (context) => {\n    const windows = context.application.windows;\n    \n    // Access the request context associated with the WindowCollection\n    const requestContext = windows.context;\n    \n    // Use the context to load window properties\n    windows.load(\"items\");\n    await requestContext.sync();\n    \n    console.log(`Connected to Word with ${windows.items.length} window(s) open`);\n    console.log(`Request context is valid: ${requestContext !== null}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Window[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Log the titles of all open Word document windows to the console",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of all open windows\n    const windows = context.application.windows;\n    \n    // Load the items property to access the array of windows\n    windows.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the loaded windows through the items property\n    const windowItems = windows.items;\n    \n    // Log the title of each window\n    for (let i = 0; i < windowItems.length; i++) {\n        windowItems[i].load(\"document/properties/title\");\n    }\n    \n    await context.sync();\n    \n    windowItems.forEach((window, index) => {\n        console.log(`Window ${index + 1}: ${window.document.properties.title}`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first window in this collection. Throws an `ItemNotFound` error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Window",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get and activate the first open Word window to bring it into focus",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of all windows\n    const windows = context.application.windows;\n    \n    // Get the first window in the collection\n    const firstWindow = windows.getFirst();\n    \n    // Activate the first window to bring it into focus\n    firstWindow.activate();\n    \n    await context.sync();\n    \n    console.log(\"First window has been activated\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first window in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Window",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if any document windows are open and display the first window's document name, or show a message if no windows are available.",
          "usage_code": "await Word.run(async (context) => {\n    const firstWindow = context.application.windows.getFirstOrNullObject();\n    firstWindow.load(\"isNullObject\");\n    \n    await context.sync();\n    \n    if (firstWindow.isNullObject) {\n        console.log(\"No windows are currently open.\");\n    } else {\n        firstWindow.load(\"document/name\");\n        await context.sync();\n        console.log(`First window document: ${firstWindow.document.name}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.WindowCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": true,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.WindowCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": true,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.WindowCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": true,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.WindowCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the count of all open Word document windows",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of windows\n    const windows = context.application.windows;\n    \n    // Load the count property of the windows collection\n    windows.load(\"count\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Display the number of open windows\n    console.log(`Number of open windows: ${windows.count}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.WindowCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.WindowCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.WindowCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize the window collection to a plain JavaScript object and log it to the console for debugging purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of windows\n    const windows = context.application.windows;\n    \n    // Load properties we want to serialize\n    windows.load(\"items\");\n    \n    await context.sync();\n    \n    // Convert the WindowCollection to a plain JavaScript object\n    const windowsData = windows.toJSON();\n    \n    // Log the serialized data\n    console.log(\"Windows data:\", JSON.stringify(windowsData, null, 2));\n    console.log(\"Number of windows:\", windowsData.items.length);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.WindowCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track the first window in the collection to maintain a reference across multiple sync calls when monitoring window properties",
          "usage_code": "await Word.run(async (context) => {\n    const windows = context.document.application.windows;\n    windows.load(\"items\");\n    await context.sync();\n    \n    const firstWindow = windows.items[0];\n    \n    // Track the window to use it across multiple sync calls\n    firstWindow.track();\n    \n    // First sync - get initial state\n    firstWindow.load(\"width\");\n    await context.sync();\n    console.log(\"Initial width:\", firstWindow.width);\n    \n    // Perform other operations...\n    await context.sync();\n    \n    // Second sync - the tracked object remains valid\n    firstWindow.load(\"width\");\n    await context.sync();\n    console.log(\"Current width:\", firstWindow.width);\n    \n    // Clean up tracking when done\n    firstWindow.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.WindowCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get all open Word windows, iterate through them to log their names, then untrack the collection to free memory after use.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of windows\n    const windows = context.application.windows;\n    windows.load(\"items\");\n    \n    await context.sync();\n    \n    // Use the windows collection\n    console.log(`Number of windows: ${windows.items.length}`);\n    windows.items.forEach(window => {\n        console.log(`Window ID: ${window.id}`);\n    });\n    \n    // Untrack the collection to release memory\n    windows.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word/word.windowcollection"
    ]
  }
}