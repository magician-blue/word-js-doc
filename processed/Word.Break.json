{
  "class": {
    "name": "Break",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents a break in a Word document. This could be a page, column, or section break.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a Break object to verify the connection between the add-in and Word, then use it to load and log break properties.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first break in the document body\n    const breaks = context.document.body.getBreaks();\n    breaks.load(\"items\");\n    await context.sync();\n    \n    if (breaks.items.length > 0) {\n        const firstBreak = breaks.items[0];\n        \n        // Access the request context from the Break object\n        const breakContext = firstBreak.context;\n        \n        // Use the context to load properties\n        firstBreak.load(\"type\");\n        await breakContext.sync();\n        \n        console.log(\"Break type: \" + firstBreak.type);\n        console.log(\"Context is connected: \" + (breakContext !== null));\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "pageIndex",
      "type": "number",
      "description": "Returns the page number on which the break occurs.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Display the page number where the first page break occurs in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get all page breaks in the document\n    const breaks = context.document.body.getBreaks(Word.BreakType.page);\n    breaks.load(\"pageIndex\");\n    \n    await context.sync();\n    \n    if (breaks.items.length > 0) {\n        const firstBreak = breaks.items[0];\n        console.log(`The first page break occurs on page ${firstBreak.pageIndex}`);\n    } else {\n        console.log(\"No page breaks found in the document\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "range",
      "type": "Word.Range",
      "description": "Returns a Range object that represents the portion of the document that's contained in the break.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the text content from a page break's range to verify what content exists at the break location.",
          "usage_code": "await Word.run(async (context) => {\n    // Get all breaks in the document\n    const breaks = context.document.body.getBreaks();\n    breaks.load(\"items\");\n    \n    await context.sync();\n    \n    if (breaks.items.length > 0) {\n        // Get the range of the first break\n        const breakRange = breaks.items[0].range;\n        breakRange.load(\"text\");\n        \n        await context.sync();\n        \n        // Access the text content at the break location\n        console.log(\"Text at break location:\", breakRange.text);\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.BreakLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.Break",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.Break",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.Break",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the type of the first break in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first break in the document\n    const breaks = context.document.body.getRange().breaks;\n    const firstBreak = breaks.getFirst();\n    \n    // Load the type property of the break\n    firstBreak.load(\"type\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Display the break type\n    console.log(\"Break type: \" + firstBreak.type);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.BreakUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.Break",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Insert a page break at the end of the document and configure its type to be a page break",
          "usage_code": "await Word.run(async (context) => {\n    const body = context.document.body;\n    \n    // Insert a page break at the end of the document\n    const pageBreak = body.insertBreak(Word.BreakType.page, Word.InsertLocation.end);\n    \n    // Set properties on the break\n    pageBreak.set({\n        type: Word.BreakType.page\n    });\n    \n    await context.sync();\n    console.log(\"Page break inserted and configured successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.Break object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.BreakData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.BreakData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a page break object to JSON format to log or store its properties",
          "usage_code": "await Word.run(async (context) => {\n    // Insert a page break at the end of the document\n    const body = context.document.body;\n    const pageBreak = body.insertBreak(Word.BreakType.page, Word.InsertLocation.end);\n    \n    // Load properties of the break\n    pageBreak.load(\"type\");\n    \n    await context.sync();\n    \n    // Convert the break object to a plain JavaScript object\n    const breakData = pageBreak.toJSON();\n    \n    // Log the serialized break data\n    console.log(\"Break data:\", JSON.stringify(breakData, null, 2));\n    // Output example: { \"type\": \"Page\" }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Break",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Insert a page break at the end of the document, track it across multiple sync calls, and then change its type to a column break.",
          "usage_code": "await Word.run(async (context) => {\n    const body = context.document.body;\n    \n    // Insert a page break at the end of the document\n    const pageBreak = body.insertBreak(Word.BreakType.page, Word.InsertLocation.end);\n    \n    // Track the break object for use across sync calls\n    pageBreak.track();\n    \n    await context.sync();\n    \n    // Now we can safely modify the break after sync\n    // Change it to a column break\n    pageBreak.delete();\n    const columnBreak = body.insertBreak(Word.BreakType.column, Word.InsertLocation.end);\n    \n    await context.sync();\n    \n    // Untrack when done\n    pageBreak.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Break",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Insert a page break in the document, use it to verify its type, then untrack it to free up memory resources.",
          "usage_code": "await Word.run(async (context) => {\n    // Insert a page break at the end of the document\n    const body = context.document.body;\n    const pageBreak = body.insertBreak(Word.BreakType.page, Word.InsertLocation.end);\n    \n    // Track the break object to work with it\n    pageBreak.track();\n    \n    // Load and use the break's properties\n    pageBreak.load(\"type\");\n    await context.sync();\n    \n    console.log(\"Break type: \" + pageBreak.type);\n    \n    // Once done using the break object, untrack it to release memory\n    pageBreak.untrack();\n    await context.sync();\n    \n    console.log(\"Break object has been untracked and memory released\");\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word",
      "https://learn.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets",
      "https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientobject"
    ]
  }
}