{
  "class": {
    "name": "GroupContentControl",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents the GroupContentControl object.",
    "examples": []
  },
  "properties": [
    {
      "name": "appearance",
      "type": "Word.ContentControlAppearance | \"BoundingBox\" | \"Tags\" | \"Hidden\"",
      "description": "Specifies the appearance of the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a group content control's appearance to show bounding box borders instead of tags",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (groupContentControl.isNullObject) {\n        console.log(\"No content control found\");\n        return;\n    }\n    \n    // Set the appearance to show a bounding box\n    groupContentControl.appearance = Word.ContentControlAppearance.boundingBox;\n    // Or use the string literal: groupContentControl.appearance = \"BoundingBox\";\n    \n    await context.sync();\n    console.log(\"Group content control appearance set to bounding box\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "color",
      "type": "string",
      "description": "Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the color of a group content control to blue (#0000FF)",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (groupContentControl.isNullObject) {\n        console.log(\"No content control found\");\n        return;\n    }\n    \n    // Set the color to blue\n    groupContentControl.color = \"#0000FF\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access a group content control and use its context property to load and read the control's title property.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    \n    // Access the context property to load properties\n    groupContentControl.context.load(groupContentControl, \"title\");\n    \n    await groupContentControl.context.sync();\n    \n    if (!groupContentControl.isNullObject) {\n        console.log(\"Group Content Control Title: \" + groupContentControl.title);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "id",
      "type": "string",
      "description": "Returns the identification for the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Retrieve and display the unique identifier of a group content control in the document.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"id, type\");\n    \n    await context.sync();\n    \n    if (!groupContentControl.isNullObject && groupContentControl.type === \"Group\") {\n        // Get the ID of the group content control\n        const controlId = groupContentControl.id;\n        console.log(\"Group Content Control ID: \" + controlId);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isTemporary",
      "type": "boolean",
      "description": "Specifies whether to remove the content control from the active document when the user edits the contents of the control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Mark a group content control as temporary so it will be automatically removed when the user edits its contents",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirst();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    // Verify it's a group content control\n    if (groupContentControl.type === Word.ContentControlType.group) {\n        const groupCC = groupContentControl as Word.GroupContentControl;\n        \n        // Set the control to be temporary (will be removed when user edits it)\n        groupCC.isTemporary = true;\n        \n        await context.sync();\n        console.log(\"Group content control marked as temporary\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "level",
      "type": "Word.ContentControlLevel | \"Inline\" | \"Paragraph\" | \"Row\" | \"Cell\"",
      "description": "Gets the level of the content controlâ€”whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check the level of a group content control and display different messages based on whether it's inline, paragraph-level, row-level, or cell-level.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"level, type\");\n    \n    await context.sync();\n    \n    if (!groupContentControl.isNullObject && groupContentControl.type === \"Group\") {\n        const level = groupContentControl.level;\n        \n        switch (level) {\n            case Word.ContentControlLevel.inline:\n                console.log(\"This group content control is inline with text.\");\n                break;\n            case Word.ContentControlLevel.paragraph:\n                console.log(\"This group content control surrounds entire paragraphs.\");\n                break;\n            case Word.ContentControlLevel.row:\n                console.log(\"This group content control surrounds table rows.\");\n                break;\n            case Word.ContentControlLevel.cell:\n                console.log(\"This group content control surrounds table cells.\");\n                break;\n        }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lockContentControl",
      "type": "boolean",
      "description": "Specifies if the content control is locked (can't be deleted). true means that the user can't delete it from the active document, false means it can be deleted.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Lock a group content control to prevent users from deleting it from the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (groupContentControl.isNullObject) {\n        console.log(\"No content control found\");\n        return;\n    }\n    \n    // Lock the content control to prevent deletion\n    groupContentControl.lockContentControl = true;\n    \n    await context.sync();\n    console.log(\"Group content control is now locked and cannot be deleted\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lockContents",
      "type": "boolean",
      "description": "Specifies if the contents of the content control are locked (not editable). true means the user can't edit the contents, false means the contents are editable.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Lock the contents of a group content control to prevent users from editing the grouped items while still allowing the entire group to be deleted or moved.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    // Verify it's a group content control and lock its contents\n    if (groupContentControl.type === Word.ContentControlType.group) {\n        groupContentControl.lockContents = true;\n    }\n    \n    await context.sync();\n    \n    console.log(\"Group content control contents are now locked\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "placeholderText",
      "type": "Word.BuildingBlock",
      "description": "Returns a BuildingBlock object that represents the placeholder text for the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get and display the placeholder text content from a group content control by accessing its BuildingBlock properties.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (groupContentControl.isNullObject) {\n        console.log(\"No content control found\");\n        return;\n    }\n    \n    // Access the placeholder text BuildingBlock\n    const placeholderBlock = groupContentControl.placeholderText;\n    placeholderBlock.load(\"value\");\n    \n    await context.sync();\n    \n    // Display the placeholder text value\n    console.log(\"Placeholder text: \" + placeholderBlock.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "range",
      "type": "Word.Range",
      "description": "Gets a Range object that represents the contents of the content control in the active document.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the text content from a group content control and display it in the console",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (groupContentControl.type === Word.ContentControlType.group) {\n        // Get the range of the group content control\n        const range = groupContentControl.range;\n        range.load(\"text\");\n        \n        await context.sync();\n        \n        // Display the text content\n        console.log(\"Group content control text: \" + range.text);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "showingPlaceholderText",
      "type": "boolean",
      "description": "Returns whether the placeholder text for the content control is being displayed.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check if a group content control is displaying placeholder text and log the result to the console.",
          "usage_code": "await Word.run(async (context) => {\n    const groupContentControl = context.document.contentControls.getFirst();\n    groupContentControl.load(\"showingPlaceholderText\");\n    \n    await context.sync();\n    \n    console.log(\"Is showing placeholder text: \" + groupContentControl.showingPlaceholderText);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "tag",
      "type": "string",
      "description": "Specifies a tag to identify the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a tag \"employee-info\" on a group content control to identify it for later retrieval and processing.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (!groupContentControl.isNullObject && groupContentControl.type === \"Group\") {\n        // Set a tag to identify this group content control\n        groupContentControl.tag = \"employee-info\";\n        \n        await context.sync();\n        console.log(\"Tag 'employee-info' has been set on the group content control\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "title",
      "type": "string",
      "description": "Specifies the title for the content control.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the title of a group content control to \"Employee Information Section\"",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getByTag(\"employeeGroup\").getFirst();\n    \n    // Set the title property\n    groupContentControl.title = \"Employee Information Section\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "xmlMapping",
      "type": "Word.XmlMapping",
      "description": "Gets an XmlMapping object that represents the mapping of the content control to XML data in the data store of the document.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Check if a group content control has an XML mapping and display its namespace URI and XPath expression.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.group]);\n    const groupContentControl = groupContentControls.getFirst() as Word.GroupContentControl;\n    \n    // Get the XML mapping for the group content control\n    const xmlMapping = groupContentControl.xmlMapping;\n    \n    // Load the XML mapping properties\n    xmlMapping.load([\"isMapped\", \"namespaceUri\", \"xpath\"]);\n    \n    await context.sync();\n    \n    // Check and display the XML mapping information\n    if (xmlMapping.isMapped) {\n        console.log(\"Namespace URI: \" + xmlMapping.namespaceUri);\n        console.log(\"XPath: \" + xmlMapping.xpath);\n    } else {\n        console.log(\"This group content control is not mapped to XML data.\");\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "copy",
      "kind": null,
      "description": "Copies the content control from the active document to the Clipboard.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Copy a group content control to the clipboard so it can be pasted elsewhere in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.group]);\n    groupContentControls.load(\"items\");\n    \n    await context.sync();\n    \n    if (groupContentControls.items.length > 0) {\n        const groupControl = groupContentControls.items[0] as Word.GroupContentControl;\n        \n        // Copy the group content control to the clipboard\n        groupControl.copy();\n        \n        await context.sync();\n        console.log(\"Group content control copied to clipboard\");\n    } else {\n        console.log(\"No group content controls found in the document\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "cut",
      "kind": null,
      "description": "Removes the content control from the active document and moves the content control to the Clipboard.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Cut a group content control from the document and move it to the clipboard so it can be pasted elsewhere",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.group]);\n    groupContentControls.load(\"items\");\n    \n    await context.sync();\n    \n    if (groupContentControls.items.length > 0) {\n        const groupControl = groupContentControls.items[0] as Word.GroupContentControl;\n        \n        // Cut the group content control to clipboard\n        groupControl.cut();\n        \n        await context.sync();\n        console.log(\"Group content control has been cut to clipboard\");\n    } else {\n        console.log(\"No group content controls found in the document\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the content control and optionally its contents.",
      "signatures": [
        {
          "params": [
            {
              "name": "deleteContents",
              "type": "boolean",
              "required": true,
              "description": "Optional. Whether to delete the contents inside the control."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Delete a group content control while preserving its contents in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    // Check if it exists and is a group type\n    if (!groupContentControl.isNullObject && groupContentControl.type === Word.ContentControlType.group) {\n        // Delete the group content control but keep its contents\n        groupContentControl.delete(false);\n        \n        await context.sync();\n        console.log(\"Group content control deleted, contents preserved\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.GroupContentControlLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.GroupContentControl",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.GroupContentControl",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.GroupContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the ID and appearance properties of the first group content control in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    \n    // Load specific properties of the group content control\n    groupContentControl.load(\"id, appearance, cannotDelete\");\n    \n    // Synchronize the document state\n    await context.sync();\n    \n    // Check if the content control exists and display its properties\n    if (!groupContentControl.isNullObject) {\n        console.log(`Group Content Control ID: ${groupContentControl.id}`);\n        console.log(`Appearance: ${groupContentControl.appearance}`);\n        console.log(`Cannot Delete: ${groupContentControl.cannotDelete}`);\n    } else {\n        console.log(\"No group content control found in the document\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.GroupContentControlUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.GroupContentControl",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Update multiple properties of a group content control, including its title and appearance settings",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (groupContentControl.isNullObject) {\n        console.log(\"No content control found\");\n        return;\n    }\n    \n    // Set multiple properties at once using the set() method\n    groupContentControl.set({\n        title: \"Employee Information\",\n        tag: \"employee-group\",\n        appearance: Word.ContentControlAppearance.boundingBox,\n        color: \"blue\"\n    });\n    \n    await context.sync();\n    console.log(\"Group content control properties updated\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "setPlaceholderText",
      "kind": "configure",
      "description": "Sets the placeholder text that displays in the content control until a user enters their own text.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.ContentControlPlaceholderOptions",
              "required": false,
              "description": "Optional. The options for configuring the content control's placeholder text."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Set placeholder text \"Enter your company name here\" for a group content control to guide users on what information to provide.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    // Set placeholder text for the group content control\n    if (groupContentControl.type === Word.ContentControlType.group) {\n        groupContentControl.setPlaceholderText({\n            placeholderText: \"Enter your company name here\"\n        });\n        \n        await context.sync();\n        console.log(\"Placeholder text set successfully\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.GroupContentControl object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.GroupContentControlData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.GroupContentControlData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a group content control to JSON format to log or store its properties",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"id,tag,title,appearance,cannotDelete,cannotEdit\");\n    \n    await context.sync();\n    \n    if (!groupContentControl.isNullObject) {\n        // Convert the group content control to a plain JavaScript object\n        const jsonData = groupContentControl.toJSON();\n        \n        // Now you can use the plain object (e.g., log it, store it, etc.)\n        console.log(\"Group Content Control Data:\", JSON.stringify(jsonData, null, 2));\n        console.log(\"ID:\", jsonData.id);\n        console.log(\"Tag:\", jsonData.tag);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.GroupContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a group content control to maintain its reference across multiple sync calls while modifying its properties and content",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    await context.sync();\n\n    if (!groupContentControl.isNullObject && groupContentControl.type === \"Group\") {\n        // Track the object to use it across multiple sync calls\n        groupContentControl.track();\n\n        // First sync - load properties\n        groupContentControl.load(\"tag,title\");\n        await context.sync();\n\n        console.log(\"Current tag:\", groupContentControl.tag);\n\n        // Second sync - modify properties\n        groupContentControl.tag = \"TrackedGroup\";\n        groupContentControl.title = \"Updated Group\";\n        await context.sync();\n\n        console.log(\"Updated tag:\", groupContentControl.tag);\n\n        // Untrack when done\n        groupContentControl.untrack();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "ungroup",
      "kind": null,
      "description": "Removes the group content control from the document so that its child content controls are no longer nested and can be freely edited.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Remove the grouping from the first group content control in the document to allow its child controls to be edited independently",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControls = context.document.contentControls.getByTypes([Word.ContentControlType.group]);\n    const firstGroup = groupContentControls.getFirst();\n    \n    // Load the group content control\n    firstGroup.load(\"id\");\n    await context.sync();\n    \n    // Ungroup the content control\n    firstGroup.ungroup();\n    \n    await context.sync();\n    console.log(\"Group content control has been ungrouped\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.GroupContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a group content control to work with it, then untrack it to release memory after modifications are complete.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first group content control in the document\n    const groupContentControl = context.document.contentControls.getFirstOrNullObject();\n    groupContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (!groupContentControl.isNullObject && groupContentControl.type === \"Group\") {\n        // Track the object to work with it across multiple sync calls\n        context.trackedObjects.add(groupContentControl);\n        \n        // Perform operations with the group content control\n        groupContentControl.load(\"tag\");\n        await context.sync();\n        \n        console.log(\"Group tag:\", groupContentControl.tag);\n        \n        // Untrack the object to release memory when done\n        groupContentControl.untrack();\n        \n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word",
      "/en-us/javascript/api/office/officeextension.clientobject",
      "/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets",
      "/en-us/javascript/api/word/word.contentcontrolappearance",
      "/en-us/javascript/api/word/word.requestcontext",
      "/en-us/javascript/api/word/word.contentcontrollevel",
      "/en-us/javascript/api/word/word.buildingblock",
      "/en-us/javascript/api/word/word.range",
      "/en-us/javascript/api/word/word.xmlmapping",
      "/en-us/javascript/api/word/word.interfaces.groupcontentcontrolloadoptions",
      "/en-us/javascript/api/word/word.groupcontentcontrol",
      "/en-us/javascript/api/word/word.interfaces.groupcontentcontrolupdatedata",
      "/en-us/javascript/api/office/officeextension.updateoptions",
      "/en-us/javascript/api/word/word.contentcontrolplaceholderoptions",
      "/en-us/javascript/api/word/word.interfaces.groupcontentcontroldata"
    ]
  }
}