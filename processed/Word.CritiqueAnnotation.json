{
  "class": {
    "name": "Word.CritiqueAnnotation",
    "package": "https://learn.microsoft.com/en-us/javascript/api/word",
    "extends": [
      "https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientobject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.7"
    },
    "description": "Represents an annotation wrapper around critique displayed in the document.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Gets annotations found in the selected paragraph.\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  const annotations: Word.AnnotationCollection = paragraph.getAnnotations();\n  annotations.load(\"id,state,critiqueAnnotation\");\n\n  await context.sync();\n\n  console.log(\"Annotations found:\");\n\n  for (let i = 0; i < annotations.items.length; i++) {\n    const annotation: Word.Annotation = annotations.items[i];\n\n    console.log(`ID ${annotation.id} - state '${annotation.state}':`, annotation.critiqueAnnotation.critique);\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a critique annotation to verify the add-in's connection to the Word host application",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first critique annotation in the document\n    const critiques = context.document.getCritiqueAnnotations();\n    critiques.load(\"items\");\n    await context.sync();\n\n    if (critiques.items.length > 0) {\n        const firstCritique = critiques.items[0];\n        \n        // Access the request context associated with the critique annotation\n        const critiqueContext = firstCritique.context;\n        \n        // Use the context to perform operations\n        // For example, verify it's the same context or use it for debugging\n        console.log(\"Critique annotation context is connected:\", critiqueContext !== null);\n        console.log(\"Context matches current context:\", critiqueContext === context);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "critique",
      "type": "Word.Critique",
      "description": "Gets the critique that was passed when the annotation was inserted.",
      "since": "WordApi 1.7",
      "examples": [
        {
          "description": "Retrieve and display all annotations from the selected paragraph, including their ID, state, and critique content.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Gets annotations found in the selected paragraph.\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  const annotations: Word.AnnotationCollection = paragraph.getAnnotations();\n  annotations.load(\"id,state,critiqueAnnotation\");\n\n  await context.sync();\n\n  console.log(\"Annotations found:\");\n\n  for (let i = 0; i < annotations.items.length; i++) {\n    const annotation: Word.Annotation = annotations.items[i];\n\n    console.log(`ID ${annotation.id} - state '${annotation.state}':`, annotation.critiqueAnnotation.critique);\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "range",
      "type": "Word.Range",
      "description": "Gets the range of text that is annotated.",
      "since": "WordApi 1.7",
      "examples": [
        {
          "description": "Get the text content from a critique annotation's range and display it in the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first critique annotation in the document\n    const annotations = context.document.getCritiqueAnnotations();\n    const firstAnnotation = annotations.getFirst();\n    \n    // Get the range of text that is annotated\n    const range = firstAnnotation.range;\n    range.load(\"text\");\n    \n    await context.sync();\n    \n    console.log(\"Annotated text: \" + range.text);\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "accept",
      "kind": "write",
      "description": "Accepts the critique. This will change the annotation state to `accepted`.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Accept the first annotation in the created state found in the selected paragraph.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Accepts the first annotation found in the selected paragraph.\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  const annotations: Word.AnnotationCollection = paragraph.getAnnotations();\n  annotations.load(\"id,state,critiqueAnnotation\");\n\n  await context.sync();\n\n  for (let i = 0; i < annotations.items.length; i++) {\n    const annotation: Word.Annotation = annotations.items[i];\n\n    if (annotation.state === Word.AnnotationState.created) {\n      console.log(`Accepting ID ${annotation.id}...`);\n      annotation.critiqueAnnotation.accept();\n\n      await context.sync();\n      break;\n    }\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.CritiqueAnnotationLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.CritiqueAnnotation",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.CritiqueAnnotation",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.CritiqueAnnotation",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the start position of the first critique annotation in the active document.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first critique annotation in the document\n    const annotations = context.document.getCritiqueAnnotations();\n    const firstAnnotation = annotations.getFirst();\n    \n    // Load the start property of the annotation\n    firstAnnotation.load(\"start\");\n    \n    await context.sync();\n    \n    // Display the start position\n    console.log(\"Critique annotation starts at position: \" + firstAnnotation.start);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "reject",
      "kind": "write",
      "description": "Rejects the critique. This will change the annotation state to `rejected`.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Reject the last critique annotation in the selected paragraph that is in the created state.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml\n\n// Rejects the last annotation found in the selected paragraph.\nawait Word.run(async (context) => {\n  const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();\n  const annotations: Word.AnnotationCollection = paragraph.getAnnotations();\n  annotations.load(\"id,state,critiqueAnnotation\");\n\n  await context.sync();\n\n  for (let i = annotations.items.length - 1; i >= 0; i--) {\n    const annotation: Word.Annotation = annotations.items[i];\n\n    if (annotation.state === Word.AnnotationState.created) {\n      console.log(`Rejecting ID ${annotation.id}...`);\n      annotation.critiqueAnnotation.reject();\n\n      await context.sync();\n      break;\n    }\n  }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.CritiqueAnnotation` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CritiqueAnnotationData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.CritiqueAnnotationData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a critique annotation to a plain JavaScript object and log its properties to the console for debugging purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first critique annotation in the document\n    const critiqueAnnotations = context.document.getCritiqueAnnotations();\n    critiqueAnnotations.load(\"items\");\n    await context.sync();\n\n    if (critiqueAnnotations.items.length > 0) {\n        const firstCritique = critiqueAnnotations.items[0];\n        \n        // Load properties before calling toJSON\n        firstCritique.load(\"range,critiqueType\");\n        await context.sync();\n        \n        // Convert the CritiqueAnnotation to a plain JavaScript object\n        const critiqueData = firstCritique.toJSON();\n        \n        // Log the serialized data\n        console.log(\"Critique annotation data:\", JSON.stringify(critiqueData, null, 2));\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member. If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CritiqueAnnotation",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a critique annotation object to prevent \"InvalidObjectPath\" errors when accessing it across multiple sync calls while processing document critiques.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first critique annotation in the document\n    const critiqueAnnotations = context.document.getCritiqueAnnotations();\n    context.load(critiqueAnnotations, \"items\");\n    await context.sync();\n    \n    if (critiqueAnnotations.items.length > 0) {\n        const firstCritique = critiqueAnnotations.items[0];\n        \n        // Track the object to use it across multiple sync calls\n        firstCritique.track();\n        \n        // First sync - load properties\n        context.load(firstCritique, \"range\");\n        await context.sync();\n        \n        // Second sync - use the tracked object safely\n        const range = firstCritique.range;\n        context.load(range, \"text\");\n        await context.sync();\n        \n        console.log(\"Critique text:\", range.text);\n        \n        // Untrack when done to free memory\n        firstCritique.untrack();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CritiqueAnnotation",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Process critique annotations in a document and release their memory after collecting their data to avoid performance degradation",
          "usage_code": "await Word.run(async (context) => {\n    // Get all critique annotations in the document\n    const critiqueAnnotations = context.document.getCritiqueAnnotations();\n    critiqueAnnotations.load(\"items\");\n    \n    await context.sync();\n    \n    // Process each critique annotation\n    const critiques = [];\n    for (let i = 0; i < critiqueAnnotations.items.length; i++) {\n        const critique = critiqueAnnotations.items[i];\n        critique.load(\"id,critiqueType\");\n        await context.sync();\n        \n        // Store the critique data\n        critiques.push({\n            id: critique.id,\n            type: critique.critiqueType\n        });\n        \n        // Release memory for this tracked object\n        critique.untrack();\n    }\n    \n    await context.sync();\n    \n    console.log(`Processed ${critiques.length} critique annotations and released their memory`);\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word"
    ]
  }
}