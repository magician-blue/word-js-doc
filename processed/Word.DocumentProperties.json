{
  "class": {
    "name": "Word.DocumentProperties",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi 1.3",
      "status": null
    },
    "description": "Represents document properties.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/get-built-in-properties.yaml\n\nawait Word.run(async (context) => {\n    const builtInProperties: Word.DocumentProperties = context.document.properties;\n    builtInProperties.load(\"*\"); // Let's get all!\n\n    await context.sync();\n    console.log(JSON.stringify(builtInProperties, null, 4));\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "applicationName",
      "type": "string",
      "description": "Gets the application name of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Display the name of the application that created the Word document in the console.",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.load(\"applicationName\");\n    \n    await context.sync();\n    \n    console.log(\"Application name: \" + properties.applicationName);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "author",
      "type": "string",
      "description": "Specifies the author of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document author to \"Jane Smith\"",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.author = \"Jane Smith\";\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "category",
      "type": "string",
      "description": "Specifies the category of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document category to \"Report\" to organize and classify the document.",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.category = \"Report\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "comments",
      "type": "string",
      "description": "Specifies the Comments field in the metadata of the document. These have no connection to comments by users made in the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document's Comments metadata field to \"This document requires legal review before publication\"",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.comments = \"This document requires legal review before publication\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "company",
      "type": "string",
      "description": "Specifies the company of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document's company property to \"Contoso Ltd\"",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.company = \"Contoso Ltd\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the document properties context to verify the add-in is properly connected to the Word host application before performing operations.",
          "usage_code": "await Word.run(async (context) => {\n    const docProperties = context.document.properties;\n    \n    // Access the request context to ensure connection to Word host\n    const requestContext = docProperties.context;\n    \n    // Verify the context is valid by loading and syncing properties\n    docProperties.load(\"title,author\");\n    await requestContext.sync();\n    \n    console.log(\"Connected to Word host application\");\n    console.log(`Document title: ${docProperties.title}`);\n    console.log(`Document author: ${docProperties.author}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "creationDate",
      "type": "Date",
      "description": "Gets the creation date of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Display the document creation date in the console to track when the document was originally created.",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.load(\"creationDate\");\n    \n    await context.sync();\n    \n    console.log(\"Document created on: \" + properties.creationDate.toLocaleDateString());\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "customProperties",
      "type": "Word.CustomPropertyCollection",
      "description": "Gets the collection of custom properties of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Add a new custom property named \"ProjectCode\" with value \"WJS-2024\" to the document and read it back to verify",
          "usage_code": "await Word.run(async (context) => {\n    // Get the custom properties collection\n    const customProperties = context.document.properties.customProperties;\n    \n    // Add a new custom property\n    customProperties.add(\"ProjectCode\", \"WJS-2024\");\n    \n    // Load the custom properties to verify\n    customProperties.load(\"items\");\n    \n    await context.sync();\n    \n    // Display the custom property value\n    const projectCodeProperty = customProperties.items.find(prop => prop.key === \"ProjectCode\");\n    if (projectCodeProperty) {\n        console.log(`Custom property '${projectCodeProperty.key}' = '${projectCodeProperty.value}'`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "format",
      "type": "string",
      "description": "Specifies the format of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Read and display the current document format type in the console",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.load(\"format\");\n    \n    await context.sync();\n    \n    console.log(\"Document format: \" + properties.format);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "keywords",
      "type": "string",
      "description": "Specifies the keywords of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document keywords to \"annual report, financial, 2024\" to improve document searchability and categorization.",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.keywords = \"annual report, financial, 2024\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lastAuthor",
      "type": "string",
      "description": "Gets the last author of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Display the last author of the document in a content control",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.load(\"lastAuthor\");\n    \n    await context.sync();\n    \n    const contentControl = context.document.body.insertContentControl();\n    contentControl.insertText(`Last modified by: ${properties.lastAuthor}`, Word.InsertLocation.end);\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lastPrintDate",
      "type": "Date",
      "description": "Gets the last print date of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Display the last print date of the document in a message box",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.load(\"lastPrintDate\");\n    \n    await context.sync();\n    \n    console.log(\"Document last printed on: \" + properties.lastPrintDate);\n    // Or display in UI: alert(\"Last printed: \" + properties.lastPrintDate);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "lastSaveTime",
      "type": "Date",
      "description": "Gets the last save time of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Display the last save time of the document in a content control",
          "usage_code": "await Word.run(async (context) => {\n    // Get the document properties\n    const properties = context.document.properties;\n    \n    // Load the last save time\n    properties.load(\"lastSaveTime\");\n    \n    await context.sync();\n    \n    // Insert the last save time at the end of the document\n    const lastSaveDate = properties.lastSaveTime;\n    context.document.body.insertParagraph(\n        `Document last saved: ${lastSaveDate.toLocaleString()}`,\n        Word.InsertLocation.end\n    );\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "manager",
      "type": "string",
      "description": "Specifies the manager of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document's manager property to \"Sarah Johnson\"",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.manager = \"Sarah Johnson\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "revisionNumber",
      "type": "string",
      "description": "Gets the revision number of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Display the document's revision number in a content control so users can see how many times the document has been saved.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the document properties\n    const properties = context.document.properties;\n    \n    // Load the revision number\n    properties.load(\"revisionNumber\");\n    \n    await context.sync();\n    \n    // Insert the revision number at the end of the document\n    const body = context.document.body;\n    body.insertParagraph(\n        `Document Revision: ${properties.revisionNumber}`,\n        Word.InsertLocation.end\n    );\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "security",
      "type": "number",
      "description": "Gets security settings of the document. Some are access restrictions on the file on disk. Others are Document Protection settings. Some possible values are 0 = File on disk is read/write; 1 = Protect Document: File is encrypted and requires a password to open; 2 = Protect Document: Always Open as Read-Only; 3 = Protect Document: Both #1 and #2; 4 = File on disk is read-only; 5 = Both #1 and #4; 6 = Both #2 and #4; 7 = All of #1, #2, and #4; 8 = Protect Document: Restrict Edit to read-only; 9 = Both #1 and #8; 10 = Both #2 and #8; 11 = All of #1, #2, and #8; 12 = Both #4 and #8; 13 = All of #1, #4, and #8; 14 = All of #2, #4, and #8; 15 = All of #1, #2, #4, and #8.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Check if the document has any security restrictions and display an appropriate message to the user",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.load(\"security\");\n    \n    await context.sync();\n    \n    const securityLevel = properties.security;\n    let message = \"\";\n    \n    if (securityLevel === 0) {\n        message = \"Document has no security restrictions\";\n    } else if (securityLevel === 1) {\n        message = \"Document is encrypted and requires a password\";\n    } else if (securityLevel === 2) {\n        message = \"Document is set to always open as read-only\";\n    } else if (securityLevel === 4) {\n        message = \"Document file on disk is read-only\";\n    } else if (securityLevel === 8) {\n        message = \"Document editing is restricted to read-only\";\n    } else {\n        message = `Document has multiple security restrictions (level: ${securityLevel})`;\n    }\n    \n    console.log(message);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "subject",
      "type": "string",
      "description": "Specifies the subject of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document subject to \"Q4 Financial Report\"",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.subject = \"Q4 Financial Report\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "template",
      "type": "string",
      "description": "Gets the template of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Get and display the template name of the current document in the console",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.load(\"template\");\n    \n    await context.sync();\n    \n    console.log(\"Document template: \" + properties.template);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "title",
      "type": "string",
      "description": "Specifies the title of the document.",
      "since": "WordApi 1.3",
      "examples": [
        {
          "description": "Set the document title to \"Q4 Sales Report\"",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    properties.title = \"Q4 Sales Report\";\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.DocumentPropertiesLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.DocumentProperties",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.DocumentProperties",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.DocumentProperties",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the document's title and author properties in the console",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    \n    // Load specific properties\n    properties.load(\"title, author\");\n    \n    await context.sync();\n    \n    console.log(\"Document Title: \" + properties.title);\n    console.log(\"Document Author: \" + properties.author);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.DocumentPropertiesUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.DocumentProperties",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Set multiple document properties including title, author, and subject at once",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    \n    properties.set({\n        title: \"Annual Sales Report\",\n        author: \"John Smith\",\n        subject: \"Q4 2023 Sales Analysis\"\n    });\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.DocumentProperties` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DocumentPropertiesData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.DocumentPropertiesData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize document properties to JSON format for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get the document properties\n    const properties = context.document.properties;\n    \n    // Load the properties you want to serialize\n    properties.load(\"title,author,subject,keywords,comments,creationDate,lastAuthor\");\n    \n    await context.sync();\n    \n    // Convert to plain JavaScript object using toJSON()\n    const propertiesData = properties.toJSON();\n    \n    // Now you can use the plain object for logging, storage, etc.\n    console.log(\"Document Properties:\", JSON.stringify(propertiesData, null, 2));\n    \n    // Example: Send to external API or save to local storage\n    // await fetch('/api/save-metadata', { \n    //     method: 'POST', \n    //     body: JSON.stringify(propertiesData) \n    // });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.DocumentProperties",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track document properties object to access its values across multiple sync calls without getting an InvalidObjectPath error",
          "usage_code": "await Word.run(async (context) => {\n    const properties = context.document.properties;\n    \n    // Track the object to use it across multiple sync calls\n    properties.track();\n    \n    // Load properties in first sync\n    properties.load(\"title,author\");\n    await context.sync();\n    \n    console.log(\"Title: \" + properties.title);\n    console.log(\"Author: \" + properties.author);\n    \n    // Modify properties after sync - tracking prevents InvalidObjectPath error\n    properties.title = \"Updated Document Title\";\n    properties.author = \"New Author\";\n    await context.sync();\n    \n    // Access the tracked object again after another sync\n    console.log(\"New Title: \" + properties.title);\n    \n    // Untrack when done to release memory\n    properties.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.DocumentProperties",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load document properties, read the title, then untrack the object to free memory after use",
          "usage_code": "await Word.run(async (context) => {\n    // Load the document properties\n    const properties = context.document.properties;\n    properties.load(\"title\");\n    \n    await context.sync();\n    \n    // Use the properties\n    console.log(\"Document title: \" + properties.title);\n    \n    // Untrack the object to release memory\n    properties.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word/word.documentproperties"
    ]
  }
}