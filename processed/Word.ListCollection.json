{
  "class": {
    "name": "Word.ListCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.3"
    },
    "description": "Contains a collection of [Word.List](/en-us/javascript/api/word/word.list) objects.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml\n\n// Gets information about the first list in the document.\nawait Word.run(async (context) => {\n  const lists: Word.ListCollection = context.document.body.lists;\n  lists.load(\"items\");\n\n  await context.sync();\n\n  if (lists.items.length === 0) {\n    console.warn(\"There are no lists in this document.\");\n    return;\n  }\n  \n  // Get the first list.\n  const list: Word.List = lists.getFirst();\n  list.load(\"levelTypes,levelExistences\");\n\n  await context.sync();\n\n  const levelTypes  = list.levelTypes;\n  console.log(\"Level types of the first list:\");\n  for (let i = 0; i < levelTypes.length; i++) {\n    console.log(`- Level ${i + 1} (index ${i}): ${levelTypes[i]}`);\n  }\n\n  const levelExistences = list.levelExistences;\n  console.log(\"Level existences of the first list:\");\n  for (let i = 0; i < levelExistences.length; i++) {\n    console.log(`- Level ${i + 1} (index ${i}): ${levelExistences[i]}`);\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a ListCollection to verify the connection to the Word document and log context information for debugging purposes.",
          "usage_code": "await Word.run(async (context) => {\n    const lists = context.document.body.lists;\n    lists.load(\"items\");\n    await context.sync();\n    \n    // Access the request context associated with the ListCollection\n    const requestContext = lists.context;\n    \n    // Verify the context is valid and connected\n    if (requestContext) {\n        console.log(\"ListCollection is connected to Word context\");\n        console.log(\"Number of lists found:\", lists.items.length);\n        \n        // The context can be used to perform operations\n        await requestContext.sync();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.List[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all lists in the document and display the count and ID of each list.",
          "usage_code": "await Word.run(async (context) => {\n    const lists = context.document.body.lists;\n    lists.load(\"items\");\n    \n    await context.sync();\n    \n    console.log(`Total lists found: ${lists.items.length}`);\n    \n    lists.items.forEach((list, index) => {\n        list.load(\"id\");\n    });\n    \n    await context.sync();\n    \n    lists.items.forEach((list, index) => {\n        console.log(`List ${index + 1} ID: ${list.id}`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getById",
      "kind": "read",
      "description": "Gets a list by its identifier. Throws an `ItemNotFound` error if there isn't a list with the identifier in this collection.",
      "signatures": [
        {
          "params": [
            {
              "name": "id",
              "type": "number",
              "required": true,
              "description": "A list identifier."
            }
          ],
          "returns": {
            "type": "Word.List",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get a list by its ID and change the font color of all items in that list to blue",
          "usage_code": "await Word.run(async (context) => {\n    const lists = context.document.body.lists;\n    const listId = 1; // Assuming we know the list ID\n    \n    const list = lists.getById(listId);\n    list.load(\"paragraphs\");\n    \n    await context.sync();\n    \n    // Change font color of all paragraphs in the list\n    for (let i = 0; i < list.paragraphs.items.length; i++) {\n        list.paragraphs.items[i].font.color = \"blue\";\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getByIdOrNullObject",
      "kind": "read",
      "description": "Gets a list by its identifier. If there isn't a list with the identifier in this collection, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [
            {
              "name": "id",
              "type": "number",
              "required": true,
              "description": "A list identifier."
            }
          ],
          "returns": {
            "type": "Word.List",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if a list with a specific ID exists in the document and display its level count, or show a message if the list is not found.",
          "usage_code": "await Word.run(async (context) => {\n    const lists = context.document.body.lists;\n    const listId = 1; // The ID of the list to find\n    \n    const list = lists.getByIdOrNullObject(listId);\n    list.load(\"isNullObject, levelTypes\");\n    \n    await context.sync();\n    \n    if (list.isNullObject) {\n        console.log(`List with ID ${listId} does not exist in the document.`);\n    } else {\n        console.log(`List with ID ${listId} found. It has ${list.levelTypes.length} levels.`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first list in this collection. Throws an `ItemNotFound` error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.List",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the first list in the document and highlight it in yellow",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first list in the document\n    const firstList = context.document.body.lists.getFirst();\n    \n    // Load the list's paragraphs to apply formatting\n    firstList.load(\"paragraphs\");\n    await context.sync();\n    \n    // Highlight all paragraphs in the first list\n    for (let i = 0; i < firstList.paragraphs.items.length; i++) {\n        firstList.paragraphs.items[i].font.highlightColor = \"yellow\";\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first list in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.List",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if the document contains any lists and display the ID of the first list, or show a message if no lists exist.",
          "usage_code": "await Word.run(async (context) => {\n    const lists = context.document.body.lists;\n    const firstList = lists.getFirstOrNullObject();\n    firstList.load(\"id, isNullObject\");\n    \n    await context.sync();\n    \n    if (firstList.isNullObject) {\n        console.log(\"No lists found in the document.\");\n    } else {\n        console.log(`First list ID: ${firstList.id}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a list object by its ID.",
      "signatures": [
        {
          "params": [
            {
              "name": "id",
              "type": "number",
              "required": true,
              "description": "The list's ID."
            }
          ],
          "returns": {
            "type": "Word.List",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get a specific list by its ID and change the font color of all items in that list to blue",
          "usage_code": "await Word.run(async (context) => {\n    // Get the list collection from the document body\n    const lists = context.document.body.lists;\n    \n    // Assume we know the list ID (e.g., from a previous operation)\n    const listId = 1;\n    \n    // Get the specific list by its ID\n    const list = lists.getItem(listId);\n    \n    // Get all paragraphs in this list\n    const listParagraphs = list.paragraphs;\n    listParagraphs.load(\"font\");\n    \n    await context.sync();\n    \n    // Change the font color of all items in the list\n    for (let i = 0; i < listParagraphs.items.length; i++) {\n        listParagraphs.items[i].font.color = \"blue\";\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.ListCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.ListCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.ListCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.ListCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the number of lists in the document along with the first list's ID",
          "usage_code": "await Word.run(async (context) => {\n    const lists = context.document.body.lists;\n    lists.load(\"items\");\n    \n    await context.sync();\n    \n    console.log(`Number of lists in document: ${lists.items.length}`);\n    if (lists.items.length > 0) {\n        console.log(`First list ID: ${lists.items[0].id}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.ListCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.ListCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export all lists in the document to JSON format for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get all lists in the document\n    const lists = context.document.body.lists;\n    \n    // Load properties we want to export\n    lists.load(\"id,levelTypes,levelExistences\");\n    \n    await context.sync();\n    \n    // Convert the ListCollection to a plain JavaScript object\n    const listsJSON = lists.toJSON();\n    \n    // Now you can stringify and use the data\n    console.log(JSON.stringify(listsJSON, null, 2));\n    \n    // The listsJSON object contains an items array with the loaded properties\n    console.log(`Found ${listsJSON.items.length} lists in the document`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ListCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track all lists in the document and display their IDs across multiple sync calls to avoid InvalidObjectPath errors",
          "usage_code": "await Word.run(async (context) => {\n    const lists = context.document.body.lists;\n    lists.load(\"items\");\n    \n    // Track the collection to use it across multiple sync calls\n    lists.track();\n    \n    await context.sync();\n    \n    console.log(`Found ${lists.items.length} lists`);\n    \n    // Can safely use the lists collection after another sync\n    await context.sync();\n    \n    // Display list IDs\n    for (let i = 0; i < lists.items.length; i++) {\n        lists.items[i].load(\"id\");\n    }\n    \n    await context.sync();\n    \n    lists.items.forEach((list, index) => {\n        console.log(`List ${index + 1} ID: ${list.id}`);\n    });\n    \n    // Untrack when done\n    lists.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.ListCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load all lists in a document, process them, then untrack the collection to free memory",
          "usage_code": "await Word.run(async (context) => {\n    // Get the list collection and track it\n    const lists = context.document.body.lists;\n    lists.load(\"items\");\n    \n    await context.sync();\n    \n    // Process the lists (e.g., log count)\n    console.log(`Found ${lists.items.length} lists in the document`);\n    \n    // Untrack the collection to release memory\n    lists.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/organize-list.yaml"
    ]
  }
}