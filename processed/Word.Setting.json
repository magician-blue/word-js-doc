{
  "class": {
    "name": "Setting",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi 1.4",
      "status": null
    },
    "description": "Represents a setting of the add-in.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml\n\n// Adds a new custom setting or\n// edits the value of an existing one.\nawait Word.run(async (context) => {\n  const key = (document.getElementById(\"key\") as HTMLInputElement).value;\n  if (key == \"\") {\n    console.error(\"Key shouldn't be empty.\");\n    return;\n  }\n\n  const value = (document.getElementById(\"value\") as HTMLInputElement).value;\n  const settings: Word.SettingCollection = context.document.settings;\n  const setting: Word.Setting = settings.add(key, value);\n  setting.load();\n  await context.sync();\n\n  console.log(\"Setting added or edited:\", setting);\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a Setting object to verify the connection between the add-in and Word before performing operations",
          "usage_code": "await Word.run(async (context) => {\n    // Get a setting object\n    const settings = context.document.settings;\n    const setting = settings.getItemOrNullObject(\"myCustomSetting\");\n    \n    // Load the setting\n    setting.load(\"key,value\");\n    await context.sync();\n    \n    // Access the request context from the setting object\n    const settingContext = setting.context;\n    \n    // Verify the context is valid and connected\n    if (settingContext && settingContext.document) {\n        console.log(\"Setting's context is connected to Word document\");\n        \n        // Use the context to perform additional operations\n        await settingContext.sync();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "key",
      "type": "string",
      "description": "Gets the key of the setting.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": "Add or update a custom document setting with a specified key-value pair obtained from user input fields.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml\n\n// Adds a new custom setting or\n// edits the value of an existing one.\nawait Word.run(async (context) => {\n  const key = (document.getElementById(\"key\") as HTMLInputElement).value;\n  if (key == \"\") {\n    console.error(\"Key shouldn't be empty.\");\n    return;\n  }\n\n  const value = (document.getElementById(\"value\") as HTMLInputElement).value;\n  const settings: Word.SettingCollection = context.document.settings;\n  const setting: Word.Setting = settings.add(key, value);\n  setting.load();\n  await context.sync();\n\n  console.log(\"Setting added or edited:\", setting);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "value",
      "type": "any",
      "description": "Specifies the value of the setting.",
      "since": "WordApi 1.4",
      "examples": [
        {
          "description": "Add a new custom setting with a specified key-value pair to the Word document, or update the value if the key already exists.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml\n\n// Adds a new custom setting or\n// edits the value of an existing one.\nawait Word.run(async (context) => {\n  const key = (document.getElementById(\"key\") as HTMLInputElement).value;\n  if (key == \"\") {\n    console.error(\"Key shouldn't be empty.\");\n    return;\n  }\n\n  const value = (document.getElementById(\"value\") as HTMLInputElement).value;\n  const settings: Word.SettingCollection = context.document.settings;\n  const setting: Word.Setting = settings.add(key, value);\n  setting.load();\n  await context.sync();\n\n  console.log(\"Setting added or edited:\", setting);\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the setting.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Delete a custom setting from the Word document and verify the setting count decreases after deletion.",
          "usage_code": "// Run a batch operation against the Word object model.\nawait Word.run(async (context) => {\n\n    // Queue commands add a setting.\n    const settings = context.document.settings;\n    const startMonth = settings.add('startMonth', { month: 'March', year: 1998 });\n\n    // Queue a command to get the count of settings.\n    const count = settings.getCount();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log(count.value);\n\n    // Queue a command to delete the setting.\n    startMonth.delete();\n\n    // Queue a command to get the new count of settings.\n    count = settings.getCount();\n\n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    await context.sync();\n    console.log(count.value);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.SettingLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and read the value of an add-in setting named \"userPreference\"",
          "usage_code": "await Word.run(async (context) => {\n    const settings = context.document.settings;\n    const setting = settings.getItemOrNullObject(\"userPreference\");\n    \n    setting.load(\"value\");\n    \n    await context.sync();\n    \n    if (!setting.isNullObject) {\n        console.log(\"Setting value:\", setting.value);\n    } else {\n        console.log(\"Setting not found\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.SettingUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.Setting",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Configure multiple properties of an add-in setting at once, including its key, value, and metadata",
          "usage_code": "await Word.run(async (context) => {\n    const settings = context.document.settings;\n    const setting = settings.add(\"userPreferences\", \"\");\n    \n    // Set multiple properties at once\n    setting.set({\n        value: JSON.stringify({ theme: \"dark\", fontSize: 14 }),\n        key: \"userPreferences\"\n    });\n    \n    await context.sync();\n    console.log(\"Setting properties configured successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.Setting` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SettingData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.SettingData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Retrieve a custom setting value and serialize it to JSON format for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get a custom setting by key\n    const setting = context.document.settings.getItemOrNullObject(\"myCustomSetting\");\n    setting.load(\"key,value\");\n    \n    await context.sync();\n    \n    if (!setting.isNullObject) {\n        // Convert the Setting object to a plain JavaScript object\n        const settingData = setting.toJSON();\n        \n        // Now you can easily serialize it or log it\n        console.log(JSON.stringify(settingData));\n        // Output example: {\"key\":\"myCustomSetting\",\"value\":\"someValue\"}\n        \n        // The plain object can be easily stored or transmitted\n        const jsonString = JSON.stringify(settingData, null, 2);\n        console.log(\"Setting as JSON:\", jsonString);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a custom XML part setting object across multiple sync calls to monitor and update its value without encountering InvalidObjectPath errors",
          "usage_code": "await Word.run(async (context) => {\n    // Load a setting from the document\n    const settings = context.document.settings;\n    const setting = settings.getItemOrNullObject(\"MyCustomSetting\");\n    \n    // Track the setting object for use across multiple sync calls\n    setting.track();\n    \n    await context.sync();\n    \n    // First sync - check if setting exists\n    if (!setting.isNullObject) {\n        console.log(\"Current value: \" + setting.value);\n    } else {\n        // Create the setting if it doesn't exist\n        settings.add(\"MyCustomSetting\", \"initial value\");\n    }\n    \n    await context.sync();\n    \n    // Second sync - update the setting value\n    // Without track(), this would throw InvalidObjectPath error\n    setting.value = \"updated value\";\n    \n    await context.sync();\n    \n    console.log(\"Setting updated successfully\");\n    \n    // Untrack when done to free up memory\n    setting.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Setting",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load a setting value, use it, then untrack it to free memory when done",
          "usage_code": "await Word.run(async (context) => {\n    // Load a setting\n    const setting = context.document.settings.getItemOrNullObject(\"myCustomSetting\");\n    setting.track();\n    setting.load(\"value\");\n    \n    await context.sync();\n    \n    if (!setting.isNullObject) {\n        // Use the setting value\n        console.log(\"Setting value:\", setting.value);\n        \n        // Untrack the setting to release memory\n        setting.untrack();\n        \n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word",
      "https://docs.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets",
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml"
    ]
  }
}