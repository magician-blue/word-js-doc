{
  "class": {
    "name": "Word.RangeCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.1"
    },
    "description": "Contains a collection of [Word.Range](/en-us/javascript/api/word/word.range) objects.",
    "examples": [
      {
        "description": "Does a basic text search and highlights matches in the document.",
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/search.yaml\n\n// Does a basic text search and highlights matches in the document.\nawait Word.run(async (context) => {\n  const results : Word.RangeCollection = context.document.body.search(\"extend\");\n  results.load(\"length\");\n\n  await context.sync();\n\n  // Let's traverse the search results and highlight matches.\n  for (let i = 0; i < results.items.length; i++) {\n    results.items[i].font.highlightColor = \"yellow\";\n  }\n\n  await context.sync();\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a RangeCollection to synchronize changes when highlighting all paragraphs in a document",
          "usage_code": "await Word.run(async (context) => {\n    // Get all paragraph ranges in the document\n    const paragraphs = context.document.body.paragraphs;\n    const ranges = paragraphs.getRange();\n    \n    // Access the request context from the range collection\n    const requestContext = ranges.context;\n    \n    // Use the context to load properties\n    ranges.load(\"text\");\n    \n    // Synchronize with the Office host using the context\n    await requestContext.sync();\n    \n    // Apply highlighting to the ranges\n    ranges.font.highlightColor = \"yellow\";\n    \n    await requestContext.sync();\n    \n    console.log(\"All paragraph ranges highlighted using their associated context\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "readonly Word.Range[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all ranges in a collection and highlight each range with a different color from a predefined list.",
          "usage_code": "await Word.run(async (context) => {\n    // Search for all instances of the word \"important\"\n    const searchResults = context.document.body.search(\"important\", { matchCase: false });\n    searchResults.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the items property to get the array of ranges\n    const ranges = searchResults.items;\n    \n    // Define colors to cycle through\n    const colors = [\"yellow\", \"lightgreen\", \"lightblue\", \"pink\"];\n    \n    // Highlight each range with a different color\n    for (let i = 0; i < ranges.length; i++) {\n        ranges[i].font.highlightColor = colors[i % colors.length];\n    }\n    \n    await context.sync();\n    \n    console.log(`Highlighted ${ranges.length} ranges`);\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first range in this collection. Throws an `ItemNotFound` error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Highlight the first occurrence of the word \"important\" in the document by making it bold and red.",
          "usage_code": "await Word.run(async (context) => {\n    // Search for all occurrences of \"important\"\n    const searchResults = context.document.body.search(\"important\", { matchCase: false });\n    \n    // Load the search results\n    context.load(searchResults);\n    await context.sync();\n    \n    // Get the first range from the collection\n    const firstRange = searchResults.getFirst();\n    \n    // Format the first occurrence\n    firstRange.font.bold = true;\n    firstRange.font.color = \"red\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first range in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Range",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if a document has any search results for a specific term and highlight the first occurrence if found",
          "usage_code": "await Word.run(async (context) => {\n    // Search for the term \"TypeScript\" in the document\n    const searchResults = context.document.body.search(\"TypeScript\");\n    \n    // Get the first search result or null if none exist\n    const firstResult = searchResults.getFirstOrNullObject();\n    \n    // Load the isNullObject property to check if a result was found\n    firstResult.load(\"isNullObject\");\n    \n    await context.sync();\n    \n    // Check if a result was found\n    if (!firstResult.isNullObject) {\n        // Highlight the first occurrence\n        firstResult.font.highlightColor = \"yellow\";\n        console.log(\"First occurrence of 'TypeScript' has been highlighted.\");\n    } else {\n        console.log(\"No occurrences of 'TypeScript' found in the document.\");\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.RangeCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": true,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.RangeCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": true,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.RangeCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": true,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to"
            }
          ],
          "returns": {
            "type": "Word.RangeCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the text content of all ranges in a RangeCollection obtained from search results",
          "usage_code": "await Word.run(async (context) => {\n    // Search for all instances of \"TODO\" in the document\n    const searchResults = context.document.body.search(\"TODO\");\n    \n    // Load the text property of all ranges in the collection\n    searchResults.load(\"text\");\n    \n    await context.sync();\n    \n    // Display the text of each range\n    console.log(`Found ${searchResults.items.length} instances:`);\n    searchResults.items.forEach((range, index) => {\n        console.log(`Range ${index + 1}: ${range.text}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.RangeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RangeCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.RangeCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export range collection data to JSON format for logging or external storage by serializing all ranges found in the document's first paragraph.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get all ranges in the paragraph (e.g., by searching for a word)\n    const searchResults = paragraph.search(\"the\", { matchCase: false });\n    \n    // Load properties we want to serialize\n    searchResults.load(\"text, font/name\");\n    \n    await context.sync();\n    \n    // Convert the RangeCollection to a plain JavaScript object\n    const rangeCollectionData = searchResults.toJSON();\n    \n    // Now we can use standard JSON operations\n    const jsonString = JSON.stringify(rangeCollectionData, null, 2);\n    console.log(\"Range Collection as JSON:\", jsonString);\n    console.log(\"Number of ranges:\", rangeCollectionData.items.length);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track multiple paragraph ranges across sync calls to maintain references while modifying their formatting properties in separate batches.",
          "usage_code": "await Word.run(async (context) => {\n    // Get all paragraphs in the document\n    const paragraphs = context.document.body.paragraphs;\n    context.load(paragraphs, \"text\");\n    await context.sync();\n    \n    // Get ranges for paragraphs containing specific text\n    const ranges = paragraphs.items\n        .filter(p => p.text.includes(\"important\"))\n        .map(p => p.getRange());\n    \n    // Create a RangeCollection from the filtered ranges\n    const rangeCollection = context.document.createRangeCollection(ranges);\n    \n    // Track the collection to use it across multiple sync calls\n    rangeCollection.track();\n    \n    await context.sync();\n    \n    // First batch: highlight the ranges\n    rangeCollection.items.forEach(range => {\n        range.font.highlightColor = \"yellow\";\n    });\n    \n    await context.sync();\n    \n    // Second batch: make them bold (object still valid due to tracking)\n    rangeCollection.items.forEach(range => {\n        range.font.bold = true;\n    });\n    \n    await context.sync();\n    \n    // Clean up tracking when done\n    rangeCollection.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Search for all instances of a specific word in the document, highlight them, then untrack the range collection to free memory after processing.",
          "usage_code": "await Word.run(async (context) => {\n    // Search for all instances of \"important\"\n    const searchResults = context.document.body.search(\"important\", { matchCase: false });\n    \n    // Track the collection to work with it\n    context.trackedObjects.add(searchResults);\n    \n    // Load and sync to get the results\n    searchResults.load(\"items\");\n    await context.sync();\n    \n    // Highlight all found ranges\n    for (let i = 0; i < searchResults.items.length; i++) {\n        searchResults.items[i].font.highlightColor = \"yellow\";\n    }\n    \n    await context.sync();\n    \n    // Untrack the collection to release memory\n    searchResults.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word/word.rangecollection"
    ]
  }
}