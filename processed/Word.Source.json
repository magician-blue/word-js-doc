{
  "class": {
    "name": "Word.Source",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents an individual source, such as a book, journal article, or interview.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": null,
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a Source object to verify the connection between the add-in and Word application before performing operations on bibliography sources.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bibliography sources from the document\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const firstSource = sources.items[0];\n        \n        // Access the context property to verify the connection\n        const sourceContext = firstSource.context;\n        \n        // Use the context to perform operations\n        firstSource.load(\"tag, title\");\n        await sourceContext.sync();\n        \n        console.log(`Source tag: ${firstSource.tag}`);\n        console.log(`Source title: ${firstSource.title}`);\n        console.log(\"Context connection verified and operational\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isCited",
      "type": null,
      "description": "Gets if the Source object has been cited in the document.",
      "since": null,
      "examples": [
        {
          "description": "Check if a specific source in the bibliography has been cited anywhere in the document and display the result in the console.",
          "usage_code": "await Word.run(async (context) => {\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    \n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const firstSource = sources.items[0];\n        firstSource.load(\"isCited, tag\");\n        \n        await context.sync();\n        \n        console.log(`Source \"${firstSource.tag}\" is cited: ${firstSource.isCited}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "tag",
      "type": null,
      "description": "Gets the tag of the source.",
      "since": null,
      "examples": [
        {
          "description": "Get the tag identifier of a bibliography source and display it in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first bibliography source from the document\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const source = sources.items[0];\n        \n        // Get the tag of the source\n        const tag = source.tag;\n        \n        // Insert the tag at the end of the document\n        const body = context.document.body;\n        body.insertParagraph(`Source tag: ${tag}`, Word.InsertLocation.end);\n        \n        await context.sync();\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "xml",
      "type": null,
      "description": "Gets the XML representation of the source.",
      "since": null,
      "examples": [
        {
          "description": "Retrieve and log the XML representation of a bibliography source to inspect its structure",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bibliography sources from the document\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    \n    await context.sync();\n    \n    // Get the first source and retrieve its XML representation\n    if (sources.items.length > 0) {\n        const firstSource = sources.items[0];\n        const sourceXml = firstSource.xml;\n        \n        console.log(\"Source XML:\", sourceXml);\n    } else {\n        console.log(\"No bibliography sources found in the document\");\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the Source object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Delete the first source from the document's bibliography",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first source from the document\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    \n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const firstSource = sources.items[0];\n        \n        // Delete the source\n        firstSource.delete();\n        \n        await context.sync();\n        console.log(\"First source deleted successfully\");\n    } else {\n        console.log(\"No sources found in the document\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFieldByName",
      "kind": "read",
      "description": "Returns the value of a field in the bibliography Source object.",
      "signatures": [
        {
          "params": [
            {
              "name": "name",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Retrieve and display the author and title fields from the first bibliography source in the document.",
          "usage_code": "await Word.run(async (context) => {\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    \n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const firstSource = sources.items[0];\n        \n        // Get specific fields from the source\n        const author = firstSource.getFieldByName(\"Author\");\n        const title = firstSource.getFieldByName(\"Title\");\n        \n        await context.sync();\n        \n        console.log(\"Author: \" + author.value);\n        console.log(\"Title: \" + title.value);\n    } else {\n        console.log(\"No bibliography sources found in the document.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": null,
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and read the title and tag properties of the first bibliography source in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first source from the bibliography\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const firstSource = sources.items[0];\n        \n        // Load specific properties of the source\n        firstSource.load(\"title, tag\");\n        await context.sync();\n        \n        // Now we can read the loaded properties\n        console.log(\"Source Title: \" + firstSource.title);\n        console.log(\"Source Tag: \" + firstSource.tag);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.Source object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.SourceData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.SourceData",
            "description": "a plain JavaScript object (typed as Word.Interfaces.SourceData) that contains shallow copies of any loaded child properties from the original object"
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a bibliography source to a plain JavaScript object and log it to the console for debugging or data export purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first source from the document's bibliography\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const firstSource = sources.items[0];\n        \n        // Load properties we want to include in the JSON output\n        firstSource.load(\"tag, type, title, author, year\");\n        await context.sync();\n        \n        // Convert the source to a plain JavaScript object\n        const sourceData = firstSource.toJSON();\n        \n        // Now we can use the plain object for logging, storage, or transmission\n        console.log(\"Source as JSON:\", JSON.stringify(sourceData, null, 2));\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a bibliography source object across multiple sync calls to safely modify its properties without getting an \"InvalidObjectPath\" error",
          "usage_code": "await Word.run(async (context) => {\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    await context.sync();\n    \n    // Get the first source and track it\n    const source = sources.items[0];\n    source.track();\n    source.load(\"tag, title\");\n    await context.sync();\n    \n    console.log(`Source tag: ${source.tag}`);\n    \n    // Can safely use the source across multiple sync calls\n    // because it's being tracked\n    await context.sync();\n    \n    console.log(`Source title: ${source.title}`);\n    \n    // Untrack when done to free up memory\n    source.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with t",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": null,
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Release memory for a bibliography source after reading its properties to prevent memory leaks in a long-running add-in",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first source from the bibliography\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    await context.sync();\n    \n    if (sources.items.length > 0) {\n        const source = sources.items[0];\n        source.load(\"title, author\");\n        await context.sync();\n        \n        // Use the source data\n        console.log(`Title: ${source.title}`);\n        console.log(`Author: ${source.author}`);\n        \n        // Release memory when done with the source\n        source.untrack();\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word",
      "/en-us/javascript/api/office/officeextension.clientobject",
      "/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets"
    ]
  }
}