{
  "class": {
    "name": "Word.CustomXmlPrefixMapping",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents a CustomXmlPrefixMapping object.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a CustomXmlPrefixMapping object to verify the connection between the add-in and Word application before performing operations.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the custom XML parts collection\n    const customXmlParts = context.document.customXmlParts;\n    context.load(customXmlParts);\n    await context.sync();\n    \n    // Get the first custom XML part (if exists)\n    if (customXmlParts.items.length > 0) {\n        const customXmlPart = customXmlParts.items[0];\n        const namespaceMappings = customXmlPart.namespaceManager.prefixMappings;\n        context.load(namespaceMappings);\n        await context.sync();\n        \n        // Access the context property from the first prefix mapping\n        if (namespaceMappings.items.length > 0) {\n            const prefixMapping = namespaceMappings.items[0];\n            const requestContext = prefixMapping.context;\n            \n            // Verify the context is valid and connected\n            console.log(\"Request context is connected:\", requestContext !== null);\n            console.log(\"Context type:\", typeof requestContext);\n        }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "namespaceUri",
      "type": "string",
      "description": "Gets the unique address identifier for the namespace of the CustomXmlPrefixMapping object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the namespace URI from a custom XML prefix mapping to verify the namespace associated with a specific prefix in the document.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the custom XML parts collection\n    const customXmlParts = context.document.customXmlParts;\n    context.load(customXmlParts, \"items\");\n    await context.sync();\n\n    if (customXmlParts.items.length > 0) {\n        // Get the first custom XML part\n        const customXmlPart = customXmlParts.items[0];\n        \n        // Get the namespace prefix mappings\n        const prefixMappings = customXmlPart.namespaceManager.customPrefixes;\n        context.load(prefixMappings, \"items\");\n        await context.sync();\n\n        if (prefixMappings.items.length > 0) {\n            // Get the namespace URI from the first prefix mapping\n            const mapping = prefixMappings.items[0];\n            context.load(mapping, \"namespaceUri\");\n            await context.sync();\n\n            console.log(\"Namespace URI: \" + mapping.namespaceUri);\n        }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "prefix",
      "type": "string",
      "description": "Gets the prefix for the CustomXmlPrefixMapping object.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the prefix of the first custom XML prefix mapping in the document and display it in the console.",
          "usage_code": "await Word.run(async (context) => {\n    const customXmlParts = context.document.customXmlParts;\n    customXmlParts.load(\"items\");\n    await context.sync();\n\n    if (customXmlParts.items.length > 0) {\n        const customXmlPart = customXmlParts.items[0];\n        const prefixMappings = customXmlPart.namespaceManager.prefixMappings;\n        prefixMappings.load(\"items\");\n        await context.sync();\n\n        if (prefixMappings.items.length > 0) {\n            const prefixMapping = prefixMappings.items[0];\n            prefixMapping.load(\"prefix\");\n            await context.sync();\n\n            console.log(\"Prefix: \" + prefixMapping.prefix);\n        }\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.CustomXmlPrefixMappingLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPrefixMapping",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPrefixMapping",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.CustomXmlPrefixMapping",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and read the namespace URI and prefix properties of a custom XML prefix mapping from a custom XML part in the document.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first custom XML part in the document\n    const customXmlParts = context.document.customXmlParts;\n    customXmlParts.load(\"items\");\n    await context.sync();\n    \n    const customXmlPart = customXmlParts.items[0];\n    \n    // Get the namespace manager and its prefix mappings\n    const namespaceManager = customXmlPart.namespaceManager;\n    const prefixMappings = namespaceManager.customPrefixMappings;\n    prefixMappings.load(\"items\");\n    await context.sync();\n    \n    // Load properties of the first prefix mapping\n    const prefixMapping = prefixMappings.items[0];\n    prefixMapping.load(\"prefix, namespaceUri\");\n    await context.sync();\n    \n    // Now you can read the loaded properties\n    console.log(\"Prefix: \" + prefixMapping.prefix);\n    console.log(\"Namespace URI: \" + prefixMapping.namespaceUri);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). Whereas the original Word.CustomXmlPrefixMapping object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.CustomXmlPrefixMappingData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.CustomXmlPrefixMappingData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Retrieve a custom XML prefix mapping and serialize it to JSON format for logging or data export purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first custom XML part\n    const customXmlParts = context.document.customXmlParts;\n    customXmlParts.load(\"items\");\n    await context.sync();\n    \n    if (customXmlParts.items.length > 0) {\n        const customXmlPart = customXmlParts.items[0];\n        \n        // Get the namespace manager and prefix mappings\n        const namespaceManager = customXmlPart.namespaceManager;\n        const prefixMappings = namespaceManager.customPrefixMappings;\n        prefixMappings.load(\"items\");\n        await context.sync();\n        \n        if (prefixMappings.items.length > 0) {\n            const mapping = prefixMappings.items[0];\n            mapping.load(\"prefix, namespaceUri\");\n            await context.sync();\n            \n            // Convert the mapping to a plain JSON object\n            const jsonObject = mapping.toJSON();\n            \n            // Log or use the JSON representation\n            console.log(\"Prefix Mapping as JSON:\", JSON.stringify(jsonObject, null, 2));\n        }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPrefixMapping",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a custom XML prefix mapping object across multiple sync calls to maintain its reference while modifying document properties",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first custom XML part\n    const customXmlParts = context.document.customXmlParts;\n    customXmlParts.load(\"items\");\n    await context.sync();\n    \n    if (customXmlParts.items.length > 0) {\n        const customXmlPart = customXmlParts.items[0];\n        const prefixMappings = customXmlPart.namespaceManager.customPrefixMappings;\n        prefixMappings.load(\"items\");\n        await context.sync();\n        \n        if (prefixMappings.items.length > 0) {\n            const prefixMapping = prefixMappings.items[0];\n            \n            // Track the prefix mapping object to use it across sync calls\n            prefixMapping.track();\n            \n            // Load properties\n            prefixMapping.load(\"prefix,uri\");\n            await context.sync();\n            \n            console.log(`Prefix: ${prefixMapping.prefix}, URI: ${prefixMapping.uri}`);\n            \n            // Can safely use the object in subsequent sync calls\n            await context.sync();\n            \n            // Untrack when done\n            prefixMapping.untrack();\n        }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CustomXmlPrefixMapping",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Release memory for a tracked CustomXmlPrefixMapping object after retrieving and using its namespace prefix information.",
          "usage_code": "await Word.run(async (context) => {\n    // Get a custom XML part and its prefix mapping\n    const customXmlParts = context.document.customXmlParts;\n    customXmlParts.load(\"items\");\n    await context.sync();\n    \n    if (customXmlParts.items.length > 0) {\n        const xmlPart = customXmlParts.items[0];\n        const prefixMappings = xmlPart.namespaceManager.prefixMappings;\n        prefixMappings.load(\"items\");\n        await context.sync();\n        \n        if (prefixMappings.items.length > 0) {\n            const mapping = prefixMappings.items[0];\n            \n            // Track the object to monitor it\n            mapping.track();\n            \n            // Load and use the mapping properties\n            mapping.load(\"prefix, namespaceUri\");\n            await context.sync();\n            \n            console.log(`Prefix: ${mapping.prefix}, Namespace: ${mapping.namespaceUri}`);\n            \n            // Release the memory after we're done using it\n            mapping.untrack();\n            await context.sync();\n        }\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word/word.customxmlprefixmapping"
    ]
  }
}