{
  "class": {
    "name": "Word.SourceCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents a collection of [Word.Source](/en-us/javascript/api/word/word.source) objects.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a SourceCollection to verify the connection to the Word host application and log context information for debugging purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bibliography sources collection\n    const sources = context.document.body.sources;\n    \n    // Access the request context associated with the collection\n    const requestContext = sources.context;\n    \n    // Use the context to load properties and sync\n    sources.load(\"items\");\n    await requestContext.sync();\n    \n    // Log context information for debugging\n    console.log(\"Request context is connected:\", requestContext !== null);\n    console.log(\"Number of sources in collection:\", sources.items.length);\n    console.log(\"Context debug info:\", requestContext.debugInfo);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Source[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Retrieve all bibliography sources from the document and log their titles to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the source collection from the document\n    const sources = context.document.bibliography.sources;\n    \n    // Load the items property to access the array of sources\n    sources.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the loaded items array and iterate through sources\n    const sourceItems = sources.items;\n    \n    for (let i = 0; i < sourceItems.length; i++) {\n        const source = sourceItems[i];\n        source.load(\"title\");\n    }\n    \n    await context.sync();\n    \n    // Log each source title\n    sourceItems.forEach((source, index) => {\n        console.log(`Source ${index + 1}: ${source.title}`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Adds a new `Source` object to the collection.",
      "signatures": [
        {
          "params": [
            {
              "name": "xml",
              "type": "string",
              "required": true,
              "description": "A string containing the XML data for the source."
            }
          ],
          "returns": {
            "type": "Word.Source",
            "description": "A `Source` object that was added to the collection."
          }
        }
      ],
      "examples": [
        {
          "description": "Add a new bibliography source for a book to the document's source collection",
          "usage_code": "await Word.run(async (context) => {\n    const sources = context.document.bibliography.sources;\n    \n    const sourceXml = `\n        <b:Source>\n            <b:Tag>Smith2023</b:Tag>\n            <b:SourceType>Book</b:SourceType>\n            <b:Author>\n                <b:Author>\n                    <b:NameList>\n                        <b:Person>\n                            <b:Last>Smith</b:Last>\n                            <b:First>John</b:First>\n                        </b:Person>\n                    </b:NameList>\n                </b:Author>\n            </b:Author>\n            <b:Title>TypeScript Programming Guide</b:Title>\n            <b:Year>2023</b:Year>\n            <b:City>New York</b:City>\n            <b:Publisher>Tech Press</b:Publisher>\n        </b:Source>\n    `;\n    \n    sources.add(sourceXml);\n    \n    await context.sync();\n    console.log(\"Bibliography source added successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a `Source` by its index in the collection.",
      "signatures": [
        {
          "params": [
            {
              "name": "index",
              "type": "number",
              "required": true,
              "description": "A number that identifies the index location of a `Source` object."
            }
          ],
          "returns": {
            "type": "Word.Source",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the third source from the bibliography and display its title in the console.",
          "usage_code": "await Word.run(async (context) => {\n    const sources = context.document.bibliography.sources;\n    const thirdSource = sources.getItem(2); // Index is 0-based\n    thirdSource.load(\"title\");\n    \n    await context.sync();\n    \n    console.log(\"Third source title: \" + thirdSource.title);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.SourceCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": true,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.SourceCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": true,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.SourceCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": true,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.SourceCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the titles of all bibliography sources in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the collection of bibliography sources\n    const sources = context.document.bibliography.sources;\n    \n    // Load the 'title' property for all sources in the collection\n    sources.load(\"title\");\n    \n    // Synchronize to execute the load command\n    await context.sync();\n    \n    // Display the titles\n    console.log(`Found ${sources.items.length} sources:`);\n    sources.items.forEach((source, index) => {\n        console.log(`${index + 1}. ${source.title}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify()`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.SourceCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SourceCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.SourceCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a collection of bibliography sources to JSON format for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bibliography sources collection\n    const sources = context.document.bibliography.sources;\n    \n    // Load properties needed for serialization\n    sources.load(\"tag,title,author\");\n    \n    await context.sync();\n    \n    // Convert the collection to a plain JavaScript object\n    const sourcesJSON = sources.toJSON();\n    \n    // Log the serialized data (contains an \"items\" array with source properties)\n    console.log(JSON.stringify(sourcesJSON, null, 2));\n    \n    // Example: Save to external storage or send to a server\n    // await fetch('/api/save-sources', {\n    //     method: 'POST',\n    //     body: JSON.stringify(sourcesJSON)\n    // });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.SourceCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a bibliography source collection to maintain references across multiple sync calls when updating citation properties",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bibliography sources\n    const sources = context.document.bibliography.sources;\n    sources.load(\"items\");\n    await context.sync();\n    \n    // Track the collection to use it across multiple sync calls\n    sources.track();\n    \n    // First sync - load source properties\n    for (let i = 0; i < sources.items.length; i++) {\n        sources.items[i].load(\"tag,title\");\n    }\n    await context.sync();\n    \n    // Second sync - modify sources (tracking prevents InvalidObjectPath errors)\n    console.log(\"Bibliography sources:\");\n    for (let i = 0; i < sources.items.length; i++) {\n        console.log(`Tag: ${sources.items[i].tag}, Title: ${sources.items[i].title}`);\n    }\n    await context.sync();\n    \n    // Untrack when done\n    sources.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.SourceCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load bibliography sources, process them, then untrack the collection to free memory after use",
          "usage_code": "await Word.run(async (context) => {\n    // Get the bibliography sources collection\n    const sources = context.document.bibliography.sources;\n    \n    // Load the sources and track the collection\n    sources.load(\"tag\");\n    \n    await context.sync();\n    \n    // Process the sources (e.g., log their tags)\n    console.log(`Found ${sources.items.length} sources`);\n    sources.items.forEach(source => {\n        console.log(source.tag);\n    });\n    \n    // Untrack the collection to release memory\n    sources.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word"
    ]
  }
}