{
  "class": {
    "name": "Word.CheckboxContentControl",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi 1.7",
      "status": null
    },
    "description": "The data specific to content controls of type CheckBox.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-checkbox-content-control.yaml\n\n// Toggles the isChecked property on all checkbox content controls.\nawait Word.run(async (context) => {\n  let contentControls = context.document.getContentControls({\n    types: [Word.ContentControlType.checkBox]\n  });\n  contentControls.load(\"items\");\n\n  await context.sync();\n\n  const length = contentControls.items.length;\n  console.log(`Number of checkbox content controls: ${length}`);\n\n  if (length <= 0) {\n    return;\n  }\n\n  const checkboxContentControls = [];\n  for (let i = 0; i < length; i++) {\n    let contentControl = contentControls.items[i];\n    contentControl.load(\"id,checkboxContentControl/isChecked\");\n    checkboxContentControls.push(contentControl);\n  }\n\n  await context.sync();\n\n  console.log(\"isChecked state before:\");\n  const updatedCheckboxContentControls = [];\n  for (let i = 0; i < checkboxContentControls.length; i++) {\n    const currentCheckboxContentControl = checkboxContentControls[i];\n    const isCheckedBefore = currentCheckboxContentControl.checkboxContentControl.isChecked;\n    console.log(`id: ${currentCheckboxContentControl.id} ... isChecked: ${isCheckedBefore}`);\n\n    currentCheckboxContentControl.checkboxContentControl.isChecked = !isCheckedBefore;\n    currentCheckboxContentControl.load(\"id,checkboxContentControl/isChecked\");\n    updatedCheckboxContentControls.push(currentCheckboxContentControl);\n  }\n\n  await context.sync();\n\n  console.log(\"isChecked state after:\");\n  for (let i = 0; i < updatedCheckboxContentControls.length; i++) {\n    const currentCheckboxContentControl = updatedCheckboxContentControls[i];\n    console.log(\n      `id: ${currentCheckboxContentControl.id} ... isChecked: ${currentCheckboxContentControl.checkboxContentControl.isChecked}`\n    );\n  }\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a checkbox content control to verify the connection between the add-in and Word application before performing operations",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first checkbox content control in the document\n    const checkboxControls = context.document.contentControls.getByTypes([Word.ContentControlType.checkBox]);\n    const checkboxControl = checkboxControls.getFirst();\n    \n    // Load the checkbox content control\n    checkboxControl.load(\"checkboxContentControl\");\n    await context.sync();\n    \n    // Access the checkbox-specific data\n    const checkboxData = checkboxControl.checkboxContentControl;\n    \n    // Access the request context from the checkbox content control\n    const requestContext = checkboxData.context;\n    \n    // Verify the context is valid by using it to perform an operation\n    console.log(\"Request context is connected:\", requestContext !== null);\n    \n    // Use the same context to load additional properties\n    checkboxData.load(\"isChecked\");\n    await requestContext.sync();\n    \n    console.log(\"Checkbox state:\", checkboxData.isChecked);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isChecked",
      "type": "boolean",
      "description": "Specifies the current state of the checkbox.",
      "since": "WordApi 1.7",
      "examples": [
        {
          "description": "Check if a checkbox content control is currently checked and toggle its state",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first checkbox content control in the document\n    const checkboxControl = context.document.contentControls.getByTypes([Word.ContentControlType.checkBox]).getFirst();\n    const checkboxData = checkboxControl.checkboxContentControl;\n    \n    // Load the current state\n    checkboxData.load(\"isChecked\");\n    await context.sync();\n    \n    // Toggle the checkbox state\n    checkboxData.isChecked = !checkboxData.isChecked;\n    \n    await context.sync();\n    \n    console.log(`Checkbox is now ${checkboxData.isChecked ? 'checked' : 'unchecked'}`);\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.CheckboxContentControlLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.CheckboxContentControl",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.CheckboxContentControl",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string }",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.CheckboxContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and read the checked state of the first checkbox content control in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first checkbox content control in the document\n    const checkboxContentControl = context.document.contentControls\n        .getByTypes([Word.ContentControlType.checkBox])\n        .getFirst();\n    \n    // Get the checkbox-specific data\n    const checkboxData = checkboxContentControl.checkboxContentControl;\n    \n    // Load the checked property\n    checkboxData.load(\"checked\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Read the loaded property\n    console.log(\"Checkbox is checked:\", checkboxData.checked);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.CheckboxContentControlUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.CheckboxContentControl",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Configure a checkbox content control by setting multiple properties at once, including checked state and appearance symbols",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first checkbox content control in the document\n    const checkboxContentControl = context.document.contentControls.getFirstOrNullObject();\n    await context.sync();\n    \n    if (!checkboxContentControl.isNullObject && checkboxContentControl.type === Word.ContentControlType.checkBox) {\n        // Set multiple checkbox properties at once\n        checkboxContentControl.checkboxContentControl.set({\n            isChecked: true,\n            checkedState: \"☑\",\n            uncheckedState: \"☐\"\n        });\n        \n        await context.sync();\n        console.log(\"Checkbox properties updated successfully\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.CheckboxContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CheckboxContentControlData`) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.CheckboxContentControlData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a checkbox content control to JSON format for logging or data transfer purposes",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first checkbox content control in the document\n    const checkboxContentControl = context.document.contentControls.getFirstOrNullObject();\n    checkboxContentControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (!checkboxContentControl.isNullObject && checkboxContentControl.type === Word.ContentControlType.checkBox) {\n        // Load checkbox-specific properties\n        const checkboxData = checkboxContentControl.checkboxContentControl;\n        checkboxData.load(\"state\");\n        \n        await context.sync();\n        \n        // Convert to JSON for serialization\n        const jsonData = checkboxData.toJSON();\n        \n        // Log or use the JSON representation\n        console.log(\"Checkbox data:\", JSON.stringify(jsonData, null, 2));\n        // Output example: { \"state\": true }\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CheckboxContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a checkbox content control across multiple sync calls to monitor and update its checked state without encountering InvalidObjectPath errors",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first checkbox content control in the document\n    const checkboxControl = context.document.contentControls\n        .getByTypes([Word.ContentControlType.checkBox])\n        .getFirst();\n    \n    checkboxControl.load(\"checkboxContentControl\");\n    await context.sync();\n    \n    // Track the checkbox to use it across multiple sync calls\n    const checkbox = checkboxControl.checkboxContentControl;\n    checkbox.track();\n    \n    // First sync: Check the current state\n    checkbox.load(\"isChecked\");\n    await context.sync();\n    \n    console.log(\"Current state:\", checkbox.isChecked);\n    \n    // Second sync: Toggle the checkbox state\n    checkbox.isChecked = !checkbox.isChecked;\n    await context.sync();\n    \n    console.log(\"New state:\", checkbox.isChecked);\n    \n    // Clean up tracking when done\n    checkbox.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.CheckboxContentControl",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get a checkbox content control, check its state, and then untrack it to free memory after you're done using it.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first checkbox content control in the document\n    const checkboxControl = context.document.contentControls.getFirstOrNullObject();\n    checkboxControl.load(\"type\");\n    \n    await context.sync();\n    \n    if (checkboxControl.isNullObject) {\n        console.log(\"No content control found\");\n        return;\n    }\n    \n    // Get the checkbox-specific data\n    const checkboxData = checkboxControl.checkboxContentControl;\n    checkboxData.load(\"isChecked\");\n    \n    await context.sync();\n    \n    // Use the checkbox data\n    console.log(\"Checkbox is checked:\", checkboxData.isChecked);\n    \n    // Untrack the object to free memory\n    checkboxData.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-checkbox-content-control.yaml"
    ]
  }
}