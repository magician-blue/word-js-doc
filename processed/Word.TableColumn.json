{
  "class": {
    "name": "TableColumn",
    "package": "Word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents a table column in a Word document.",
    "examples": []
  },
  "properties": [
    {
      "name": "borders",
      "type": "Word.BorderUniversalCollection",
      "description": "Returns a BorderUniversalCollection object that represents all the borders for the table column.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set all borders of the first column in a table to be solid red lines with 2pt width",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column\n    const firstColumn = table.columns.getFirst();\n    \n    // Get all borders for the column\n    const borders = firstColumn.borders;\n    borders.load(\"items\");\n    \n    await context.sync();\n    \n    // Set properties for all borders in the column\n    borders.items.forEach(border => {\n        border.type = Word.BorderType.single;\n        border.color = \"#FF0000\"; // Red\n        border.width = 2;\n    });\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "columnIndex",
      "type": "number",
      "description": "Returns the position of this column in a collection.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the index position of the first column in a table and display it in the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column\n    const firstColumn = table.columns.getFirst();\n    \n    // Load the columnIndex property\n    firstColumn.load(\"columnIndex\");\n    \n    await context.sync();\n    \n    // Display the column index\n    console.log(`Column index: ${firstColumn.columnIndex}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a TableColumn object to load and read the column's width property",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    const firstColumn = table.columns.getFirst();\n    \n    // Access the request context from the TableColumn object\n    const columnContext = firstColumn.context;\n    \n    // Use the context to load properties\n    firstColumn.load(\"width\");\n    await columnContext.sync();\n    \n    console.log(`Column width: ${firstColumn.width}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isFirst",
      "type": "boolean",
      "description": "Returns true if the column or row is the first one in the table; false otherwise.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Highlight the first column of a table with a yellow background color to distinguish it from other columns.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    const columns = table.columns;\n    columns.load(\"items\");\n    \n    await context.sync();\n    \n    // Loop through columns and highlight the first one\n    for (let i = 0; i < columns.items.length; i++) {\n        const column = columns.items[i];\n        column.load(\"isFirst\");\n        await context.sync();\n        \n        if (column.isFirst) {\n            column.getRange().font.highlightColor = \"yellow\";\n            break;\n        }\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isLast",
      "type": "boolean",
      "description": "Returns true if the column or row is the last one in the table; false otherwise.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Highlight the last column in a table with a yellow background color to make it stand out from other columns.",
          "usage_code": "await Word.run(async (context) => {\n    const table = context.document.body.tables.getFirst();\n    const columns = table.columns;\n    columns.load(\"items\");\n    \n    await context.sync();\n    \n    for (let i = 0; i < columns.items.length; i++) {\n        const column = columns.items[i];\n        column.load(\"isLast\");\n        await context.sync();\n        \n        if (column.isLast) {\n            column.getCellPadding(Word.CellPaddingLocation.all);\n            column.shadingColor = \"#FFFF00\"; // Yellow background\n            break;\n        }\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "nestingLevel",
      "type": "number",
      "description": "Returns the nesting level of the column.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Get the nesting level of the first column in a table and display it in the console to understand the table's structure depth.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column from the table\n    const firstColumn = table.columns.getFirst();\n    \n    // Load the nesting level property\n    firstColumn.load(\"nestingLevel\");\n    \n    await context.sync();\n    \n    // Display the nesting level\n    console.log(`Column nesting level: ${firstColumn.nestingLevel}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "preferredWidth",
      "type": "number",
      "description": "Specifies the preferred width (in points or as a percentage of the window width) for the column. The unit of measurement can be specified by the preferredWidthType property.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the first column of a table to have a preferred width of 150 points",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column\n    const firstColumn = table.columns.getFirst();\n    \n    // Set the preferred width to 150 points\n    firstColumn.preferredWidth = 150;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "preferredWidthType",
      "type": "Word.PreferredWidthType | \"Auto\" | \"Percent\" | \"Points\"",
      "description": "Specifies the preferred unit of measurement to use for the width of the table column.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the first column's width to 2 inches using points as the preferred width type",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column\n    const firstColumn = table.columns.getFirst();\n    \n    // Set the preferred width type to Points\n    firstColumn.preferredWidthType = Word.PreferredWidthType.points;\n    \n    // Set the width to 2 inches (144 points)\n    firstColumn.width = 144;\n    \n    await context.sync();\n    \n    console.log(\"Column width type set to Points\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "shading",
      "type": "Word.ShadingUniversal",
      "description": "Returns a ShadingUniversal object that refers to the shading formatting for the column.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Apply light gray background shading to the first column of a table",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column\n    const firstColumn = table.columns.getFirst();\n    \n    // Apply light gray shading to the column\n    firstColumn.shading.backgroundPatternColor = \"#D3D3D3\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "width",
      "type": "number",
      "description": "Specifies the width of the column, in points.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the width of the first column in a table to 150 points",
          "usage_code": "await Word.run(async (context) => {\n    const table = context.document.body.tables.getFirst();\n    const firstColumn = table.columns.getFirst();\n    \n    firstColumn.width = 150;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "autoFit",
      "kind": null,
      "description": "Changes the width of the table column to accommodate the width of the text without changing the way text wraps in the cells.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Auto-fit the second column of the first table in the document to accommodate its text content",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the second column (index 1)\n    const column = table.columns.getItem(1);\n    \n    // Auto-fit the column to its content\n    column.autoFit();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "delete",
      "kind": "delete",
      "description": "Deletes the column.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Delete the second column from the first table in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    \n    // Get the second column (index 1)\n    const secondColumn = firstTable.columns.getItemAt(1);\n    \n    // Delete the column\n    secondColumn.delete();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.TableColumnLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.TableColumn",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.TableColumn",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.TableColumn",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the width and cell count properties of the first column in the first table",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    const firstColumn = firstTable.columns.getFirst();\n    \n    // Load specific properties of the column\n    firstColumn.load(\"width, cellCount\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Now we can read the loaded properties\n    console.log(`Column width: ${firstColumn.width}`);\n    console.log(`Number of cells: ${firstColumn.cellCount}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "select",
      "kind": null,
      "description": "Selects the table column.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Select the first column of the first table in the document to highlight it for the user",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    \n    // Get the first column of the table\n    const firstColumn = firstTable.columns.getFirst();\n    \n    // Select the column\n    firstColumn.select();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "write",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.TableColumnUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.TableColumn",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Format the first column of the first table by setting multiple properties including width, shading color, and preferred width type",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    \n    // Get the first column\n    const firstColumn = firstTable.columns.getFirst();\n    \n    // Set multiple properties at once\n    firstColumn.set({\n        width: 100,\n        shadingColor: \"#E7E6E6\",\n        preferredWidth: Word.PreferredWidth.points(100)\n    });\n    \n    await context.sync();\n    \n    console.log(\"Column properties updated successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "setWidth",
      "kind": "write",
      "description": "Sets the width of the column in a table.",
      "signatures": [
        {
          "params": [
            {
              "name": "columnWidth",
              "type": "number",
              "required": true,
              "description": "The width to set."
            },
            {
              "name": "rulerStyle",
              "type": "Word.RulerStyle",
              "required": true,
              "description": "The ruler style to apply."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "columnWidth",
              "type": "number",
              "required": true,
              "description": "The width to set."
            },
            {
              "name": "rulerStyle",
              "type": "\"None\" | \"Proportional\" | \"FirstColumn\" | \"SameWidth\"",
              "required": true,
              "description": "The ruler style to apply."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Set the width of the second column in the first table to 100 points using a fixed ruler style",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the second column (index 1)\n    const column = table.columns.getItem(1);\n    \n    // Set the column width to 100 points with fixed ruler style\n    column.setWidth(100, Word.RulerStyle.fixed);\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "sort",
      "kind": null,
      "description": "Sorts the table column.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Sort a table column in ascending alphabetical order",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column of the table\n    const firstColumn = table.columns.getFirst();\n    \n    // Sort the column in ascending order\n    firstColumn.sort(true);\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.TableColumn object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.TableColumnData) that contains shallow copies of any loaded child properties from the original object.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.TableColumnData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a table column's properties to JSON format for logging or data export purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the first column from the table\n    const column = table.columns.getFirst();\n    \n    // Load properties we want to serialize\n    column.load(\"width,values\");\n    \n    await context.sync();\n    \n    // Convert the column to a plain JavaScript object\n    const columnData = column.toJSON();\n    \n    // Now you can use the plain object (e.g., log it, send to server, etc.)\n    console.log(\"Column data:\", JSON.stringify(columnData, null, 2));\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TableColumn",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a table column object to maintain its reference across multiple sync calls while modifying its properties and the document structure",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    const firstColumn = table.columns.getFirst();\n    \n    // Track the column to prevent InvalidObjectPath errors across sync calls\n    firstColumn.track();\n    \n    // Load properties\n    firstColumn.load(\"width\");\n    await context.sync();\n    \n    // Modify the column width\n    firstColumn.width = 100;\n    await context.sync();\n    \n    // Make other document changes that might affect object paths\n    context.document.body.insertParagraph(\"New paragraph\", Word.InsertLocation.start);\n    await context.sync();\n    \n    // Can still safely access the tracked column object\n    firstColumn.width = 120;\n    await context.sync();\n    \n    // Untrack when done to free up memory\n    firstColumn.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call context.sync() before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TableColumn",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get a reference to the first column in a table, perform operations on it, then release it from memory tracking to improve performance.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    const firstColumn = table.columns.getFirst();\n    \n    // Track the column object for operations\n    firstColumn.track();\n    \n    // Load and use the column\n    firstColumn.load(\"width\");\n    await context.sync();\n    \n    console.log(`Column width: ${firstColumn.width}`);\n    \n    // Perform operations on the column\n    firstColumn.width = 100;\n    await context.sync();\n    \n    // Release the column from tracking when done\n    firstColumn.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word"
    ]
  }
}