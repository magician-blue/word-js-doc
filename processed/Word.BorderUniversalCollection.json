{
  "class": {
    "name": "Word.BorderUniversalCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents the collection of [Word.BorderUniversal](/en-us/javascript/api/word/word.borderuniversal) objects.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a BorderUniversalCollection to verify the connection to the Word host application before performing border operations.",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const borders = paragraph.getBorderUniversalCollection();\n    \n    // Access the request context associated with the border collection\n    const borderContext = borders.context;\n    \n    // Verify the context is valid and connected to the host application\n    console.log(\"Border collection context is connected:\", borderContext !== null);\n    \n    // Use the context to load and sync border properties\n    borders.load(\"items\");\n    await borderContext.sync();\n    \n    console.log(`Found ${borders.items.length} borders in the collection`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.BorderUniversal[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Iterate through all borders in a paragraph's border collection and set each border's color to blue",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const borders = paragraph.getBorders();\n    borders.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the loaded border items and set their color\n    for (const border of borders.items) {\n        border.color = \"blue\";\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "applyPageBordersToAllSections",
      "kind": null,
      "description": "Applies the specified page-border formatting to all sections in the document.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Apply a blue double-line page border with 24pt width to all sections in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the border collection\n    const borders = context.document.body.parentContentControlOrNullObject.parentBody.parentContentControlOrNullObject.parentBody.borders;\n    \n    // Configure the page border settings\n    borders.load(\"items\");\n    await context.sync();\n    \n    // Set border properties (e.g., for top border)\n    borders.items[0].type = Word.BorderType.double;\n    borders.items[0].color = \"#0000FF\"; // Blue\n    borders.items[0].width = 24;\n    \n    // Apply the page border settings to all sections\n    borders.applyPageBordersToAllSections();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a `Border` object by its index in the collection.",
      "signatures": [
        {
          "params": [
            {
              "name": "index",
              "type": "number",
              "required": true,
              "description": "The location of a `BorderUniversal` object."
            }
          ],
          "returns": {
            "type": "Word.BorderUniversal",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the top border of the first paragraph and set its color to red",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const borders = paragraph.getBorders();\n    \n    // Get the top border (index 0) from the collection\n    const topBorder = borders.getItem(0);\n    topBorder.color = \"red\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.BorderUniversalCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.BorderUniversalCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.BorderUniversalCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.BorderUniversalCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the border widths of all borders in the first paragraph",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const borders = paragraph.borders;\n    \n    // Load the width property for all borders in the collection\n    borders.load(\"items/width\");\n    \n    await context.sync();\n    \n    // Display the border widths\n    borders.items.forEach((border, index) => {\n        console.log(`Border ${index} width: ${border.width}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.BorderUniversalCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BorderUniversalCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.BorderUniversalCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize a paragraph's border collection to JSON format for logging or data export purposes.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get the border collection\n    const borders = paragraph.borders;\n    \n    // Load the border properties\n    borders.load(\"items\");\n    \n    await context.sync();\n    \n    // Convert the border collection to a plain JavaScript object\n    const bordersJSON = borders.toJSON();\n    \n    // Log or export the serialized data\n    console.log(JSON.stringify(bordersJSON, null, 2));\n    \n    // You can now work with the plain object\n    console.log(`Number of borders: ${bordersJSON.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.BorderUniversalCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a paragraph's border collection to maintain references across multiple sync calls when applying different border styles sequentially",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const borders = paragraph.getBorder().borders;\n    \n    // Track the border collection to use it across multiple sync calls\n    borders.track();\n    \n    await context.sync();\n    \n    // Now we can safely use the borders object across sync calls\n    borders.items[0].color = \"blue\";\n    await context.sync();\n    \n    borders.items[1].width = 2;\n    await context.sync();\n    \n    // Untrack when done to free up memory\n    borders.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.BorderUniversalCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get all borders from a table, track the collection for performance monitoring, then release the tracking when done to free memory.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const table = context.document.body.tables.getFirst();\n    \n    // Get the borders collection and track it\n    const borders = table.getBorder().load(\"items\");\n    context.trackedObjects.add(borders);\n    \n    await context.sync();\n    \n    // Work with the borders collection\n    console.log(`Found ${borders.items.length} borders`);\n    \n    // Release tracking when done to free memory\n    borders.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word"
    ]
  }
}