{
  "class": {
    "name": "Word.TableCellCollection",
    "package": "word",
    "extends": [
      "officeextension.clientobject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.3"
    },
    "description": "Contains the collection of the document's TableCell objects.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/40-tables/manage-formatting.yaml\n\n// Gets content alignment details about the first cell of the first table in the document.\nawait Word.run(async (context) => {\n  const firstTable: Word.Table = context.document.body.tables.getFirst();\n  const firstTableRow: Word.TableRow = firstTable.rows.getFirst();\n  const firstCell: Word.TableCell = firstTableRow.cells.getFirst();\n  firstCell.load([\"horizontalAlignment\", \"verticalAlignment\"]);\n  await context.sync();\n\n  console.log(\n    `Details about the alignment of the first table's first cell:`,\n    `- Horizontal alignment of the cell's content: ${firstCell.horizontalAlignment}`,\n    `- Vertical alignment of the cell's content: ${firstCell.verticalAlignment}`\n  );\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a table cell collection to verify the connection between the add-in and Word before performing operations on table cells.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    const tableCells = firstTable.getRange().cells;\n    \n    // Access the request context from the table cell collection\n    const cellContext = tableCells.context;\n    \n    // Verify the context is valid by using it to load properties\n    tableCells.load(\"items\");\n    await cellContext.sync();\n    \n    console.log(`Successfully accessed context. Found ${tableCells.items.length} cells in the table.`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.TableCell[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all loaded table cells from the first table and highlight cells in the first row with yellow background color.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    const tableCells = firstTable.getRange().getRange(\"Whole\").cells;\n    \n    // Load the items property to access the collection\n    tableCells.load(\"items\");\n    await context.sync();\n    \n    // Access the loaded items array\n    const cellItems = tableCells.items;\n    \n    // Highlight the first row cells (assuming table has cells)\n    const cellsPerRow = firstTable.rowCount > 0 ? cellItems.length / firstTable.rowCount : 0;\n    \n    for (let i = 0; i < Math.min(cellsPerRow, cellItems.length); i++) {\n        cellItems[i].body.font.highlightColor = \"yellow\";\n    }\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first table cell in this collection. Throws an `ItemNotFound` error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TableCell",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the first cell from a table and highlight it with yellow shading to mark it as a header cell.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    \n    // Get the first cell from the table's cell collection\n    const firstCell = firstTable.tableRows.getFirst().cells.getFirst();\n    \n    // Highlight the first cell with yellow shading\n    firstCell.shadingColor = \"#FFFF00\";\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first table cell in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see https://learn.microsoft.com/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TableCell",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if a table has any cells and highlight the first cell yellow if it exists, otherwise log that the table is empty.",
          "usage_code": "await Word.run(async (context) => {\n    const firstTable = context.document.body.tables.getFirst();\n    const tableCells = firstTable.tableRows.getFirst().cells;\n    const firstCell = tableCells.getFirstOrNullObject();\n    \n    firstCell.load(\"isNullObject\");\n    await context.sync();\n    \n    if (firstCell.isNullObject) {\n        console.log(\"The table has no cells.\");\n    } else {\n        firstCell.body.font.highlightColor = \"yellow\";\n        await context.sync();\n        console.log(\"First cell highlighted.\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.TableCellCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.TableCellCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.TableCellCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.TableCellCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the text content of all cells in the first table of the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    \n    // Get all cells in the table\n    const tableCells = firstTable.getRange().cells;\n    \n    // Load the text property of all cells\n    tableCells.load(\"text\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Display the text content of each cell\n    for (let i = 0; i < tableCells.items.length; i++) {\n        console.log(`Cell ${i}: ${tableCells.items[i].value}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.TableCellCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableCellCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.TableCellCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export table cell data to JSON format for logging or external processing by serializing the first table's cells.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    \n    // Get all cells from the table\n    const tableCells = firstTable.getRange().cells;\n    \n    // Load properties we want to serialize\n    tableCells.load(\"items/value, items/rowIndex, items/columnIndex\");\n    \n    await context.sync();\n    \n    // Convert the collection to a plain JavaScript object\n    const cellsData = tableCells.toJSON();\n    \n    // Log the JSON representation\n    console.log(\"Table cells data:\", JSON.stringify(cellsData, null, 2));\n    \n    // Access the items array\n    console.log(`Total cells: ${cellsData.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member. If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TableCellCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track table cells in the first table to maintain references across multiple sync calls while modifying cell properties",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    const tableCells = firstTable.tableRows.getFirst().cells;\n    \n    // Track the cell collection to maintain references across sync calls\n    tableCells.track();\n    \n    // Load cell properties\n    tableCells.load(\"items\");\n    await context.sync();\n    \n    // First operation: set background color\n    for (let i = 0; i < tableCells.items.length; i++) {\n        tableCells.items[i].body.font.color = \"blue\";\n    }\n    await context.sync();\n    \n    // Second operation: modify text (cells remain valid due to tracking)\n    for (let i = 0; i < tableCells.items.length; i++) {\n        tableCells.items[i].body.insertText(`Cell ${i + 1}`, Word.InsertLocation.replace);\n    }\n    await context.sync();\n    \n    // Untrack when done to release memory\n    tableCells.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TableCellCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Process table cells to find cells with specific content, then release the tracked TableCellCollection from memory to improve performance.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first table in the document\n    const firstTable = context.document.body.tables.getFirst();\n    const tableCells = firstTable.getRange().cells;\n    \n    // Load the cell values\n    tableCells.load(\"items/value\");\n    \n    // Track the collection for processing\n    tableCells.track();\n    \n    await context.sync();\n    \n    // Process the cells (e.g., count cells with specific content)\n    let count = 0;\n    for (let i = 0; i < tableCells.items.length; i++) {\n        if (tableCells.items[i].value.includes(\"Important\")) {\n            count++;\n        }\n    }\n    \n    console.log(`Found ${count} cells with 'Important'`);\n    \n    // Release the memory associated with the tracked collection\n    tableCells.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word/word.tablecellcollection"
    ]
  }
}