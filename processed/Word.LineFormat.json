{
  "class": {
    "name": "LineFormat",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents line and arrowhead formatting. For a line, the LineFormat object contains formatting information for the line itself; for a shape with a border, this object contains formatting information for the shape's border.",
    "examples": []
  },
  "properties": [
    {
      "name": "backgroundColor",
      "type": "Word.ColorFormat",
      "description": "Gets a ColorFormat object that represents the background color for a patterned line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the background color of a patterned line to light blue",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.getShapes();\n    const shape = shapes.getFirst();\n    \n    // Access the line format\n    const lineFormat = shape.line;\n    \n    // Set the background color for the patterned line to light blue\n    lineFormat.backgroundColor.set(\"#ADD8E6\");\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "beginArrowheadLength",
      "type": "Word.ArrowheadLength | \"Mixed\" | \"Short\" | \"Medium\" | \"Long\"",
      "description": "Specifies the length of the arrowhead at the beginning of the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the beginning arrowhead of a line shape to have a long length",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document (assuming it's a line)\n    const shapes = context.document.body.shapes;\n    const line = shapes.getFirst();\n    \n    // Set the beginning arrowhead length to long\n    line.lineFormat.beginArrowheadLength = Word.ArrowheadLength.long;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "beginArrowheadStyle",
      "type": "Word.ArrowheadStyle | \"Mixed\" | \"None\" | \"Triangle\" | \"Open\" | \"Stealth\" | \"Diamond\" | \"Oval\"",
      "description": "Specifies the style of the arrowhead at the beginning of the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the beginning arrowhead style of a line shape to a triangle arrow",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document (assuming it's a line)\n    const shape = context.document.body.shapes.getFirst();\n    \n    // Set the beginning arrowhead style to triangle\n    shape.lineFormat.beginArrowheadStyle = Word.ArrowheadStyle.triangle;\n    \n    await context.sync();\n    \n    console.log(\"Beginning arrowhead style set to triangle\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "beginArrowheadWidth",
      "type": "Word.ArrowheadWidth | \"Mixed\" | \"Narrow\" | \"Medium\" | \"Wide\"",
      "description": "Specifies the width of the arrowhead at the beginning of the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the beginning arrowhead width of a line shape to \"Wide\"",
          "usage_code": "await Word.run(async (context) => {\n    const shapes = context.document.body.shapes;\n    const line = shapes.getItem(0); // Get the first shape (assumed to be a line)\n    \n    line.lineFormat.beginArrowheadWidth = Word.ArrowheadWidth.wide;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a LineFormat object to verify the connection between the add-in and Word host application",
          "usage_code": "await Word.run(async (context) => {\n    // Get a shape from the document\n    const shapes = context.document.body.getShapes();\n    const shape = shapes.getFirst();\n    const lineFormat = shape.line;\n    \n    // Load the line format\n    lineFormat.load(\"weight\");\n    await context.sync();\n    \n    // Access the request context from the LineFormat object\n    const lineContext = lineFormat.context;\n    \n    // Verify the context is connected (both should reference the same context)\n    console.log(\"Contexts match:\", lineContext === context);\n    console.log(\"Line weight:\", lineFormat.weight);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "dashStyle",
      "type": "Word.LineDashStyle | \"Mixed\" | \"Solid\" | \"SquareDot\" | \"RoundDot\" | \"Dash\" | \"DashDot\" | \"DashDotDot\" | \"LongDash\" | \"LongDashDot\" | \"LongDashDotDot\" | \"SysDash\" | \"SysDot\" | \"SysDashDot\"",
      "description": "Specifies the dash style for the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a shape's border to use a dash-dot line style instead of a solid line",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Set the border line style to dash-dot\n    shape.lineFormat.dashStyle = Word.LineDashStyle.dashDot;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "endArrowheadLength",
      "type": "Word.ArrowheadLength | \"Mixed\" | \"Short\" | \"Medium\" | \"Long\"",
      "description": "Specifies the length of the arrowhead at the end of the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the arrowhead at the end of a line shape to be long in length",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document (assuming it's a line)\n    const shape = context.document.body.shapes.getFirst();\n    \n    // Set the end arrowhead length to long\n    shape.lineFormat.endArrowheadLength = Word.ArrowheadLength.long;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "endArrowheadStyle",
      "type": "Word.ArrowheadStyle | \"Mixed\" | \"None\" | \"Triangle\" | \"Open\" | \"Stealth\" | \"Diamond\" | \"Oval\"",
      "description": "Specifies the style of the arrowhead at the end of the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the arrowhead at the end of a line shape to a triangle style",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document (assuming it's a line)\n    const shape = context.document.body.shapes.getFirst();\n    \n    // Set the end arrowhead style to triangle\n    shape.lineFormat.endArrowheadStyle = Word.ArrowheadStyle.triangle;\n    \n    await context.sync();\n    \n    console.log(\"End arrowhead style set to triangle\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "endArrowheadWidth",
      "type": "Word.ArrowheadWidth | \"Mixed\" | \"Narrow\" | \"Medium\" | \"Wide\"",
      "description": "Specifies the width of the arrowhead at the end of the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the arrowhead width at the end of a line shape to wide",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document (assuming it's a line)\n    const shapes = context.document.body.shapes;\n    const line = shapes.getFirst();\n    \n    // Set the end arrowhead width to wide\n    line.lineFormat.endArrowheadWidth = Word.ArrowheadWidth.wide;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "foregroundColor",
      "type": "Word.ColorFormat",
      "description": "Gets a ColorFormat object that represents the foreground color for the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a shape's border color to red by accessing its line format's foreground color",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Access the line format and set the foreground color to red\n    const lineFormat = shape.lineFormat;\n    lineFormat.foregroundColor.set(\"#FF0000\");\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "insetPen",
      "type": "boolean",
      "description": "Specifies if to draw lines inside a shape.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Configure a rectangle shape to draw its border lines inside the shape boundaries rather than centered on the edge",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    shapes.load(\"items\");\n    await context.sync();\n    \n    // Access the first shape and set insetPen to true\n    const shape = shapes.items[0];\n    shape.lineFormat.insetPen = true;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "isVisible",
      "type": "boolean",
      "description": "Specifies if the object, or the formatting applied to it, is visible.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Hide the border of a rectangle shape by setting its line format visibility to false",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Get the line format and set visibility to false\n    const lineFormat = shape.lineFormat;\n    lineFormat.isVisible = false;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "pattern",
      "type": "Word.PatternType | \"Mixed\" | \"Percent5\" | \"Percent10\" | \"Percent20\" | \"Percent25\" | \"Percent30\" | \"Percent40\" | \"Percent50\" | \"Percent60\" | \"Percent70\" | \"Percent75\" | \"Percent80\" | \"Percent90\" | \"DarkHorizontal\" | \"DarkVertical\" | \"DarkDownwardDiagonal\" | \"DarkUpwardDiagonal\" | \"SmallCheckerBoard\" | \"Trellis\" | \"LightHorizontal\" | \"LightVertical\" | \"LightDownwardDiagonal\" | \"LightUpwardDiagonal\" | \"SmallGrid\" | \"DottedDiamond\" | \"WideDownwardDiagonal\" | \"WideUpwardDiagonal\" | \"DashedUpwardDiagonal\" | \"DashedDownwardDiagonal\" | \"NarrowVertical\" | \"NarrowHorizontal\" | \"DashedVertical\" | \"DashedHorizontal\" | \"LargeConfetti\" | \"LargeGrid\" | \"HorizontalBrick\" | \"LargeCheckerBoard\" | \"SmallConfetti\" | \"ZigZag\" | \"SolidDiamond\" | \"DiagonalBrick\" | \"OutlinedDiamond\" | \"Plaid\" | \"Sphere\" | \"Weave\" | \"DottedGrid\" | \"Divot\" | \"Shingle\" | \"Wave\" | \"Horizontal\" | \"Vertical\" | \"Cross\" | \"DownwardDiagonal\" | \"UpwardDiagonal\" | \"DiagonalCross\"",
      "description": "Specifies the pattern applied to the line.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Apply a diagonal cross pattern to a shape's border line",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    shapes.load(\"items\");\n    await context.sync();\n    \n    if (shapes.items.length > 0) {\n        const shape = shapes.items[0];\n        \n        // Set the line pattern to diagonal cross\n        shape.lineFormat.pattern = \"DiagonalCross\";\n        \n        await context.sync();\n        console.log(\"Shape border pattern set to DiagonalCross\");\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "style",
      "type": "Word.LineFormatStyle | \"Mixed\" | \"Single\" | \"ThinThin\" | \"ThinThick\" | \"ThickThin\" | \"ThickBetweenThin\"",
      "description": "Specifies the line format style.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a shape's border line style to a thick-thin double line format",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Set the line format style to ThickThin\n    shape.lineFormat.style = Word.LineFormatStyle.thickThin;\n    \n    await context.sync();\n    \n    console.log(\"Shape border line style set to ThickThin\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "transparency",
      "type": "number",
      "description": "Specifies the degree of transparency of the line as a value between 0.0 (opaque) and 1.0 (clear).",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set a shape's border line transparency to 50% (semi-transparent)",
          "usage_code": "await Word.run(async (context) => {\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Set the line transparency to 0.5 (50% transparent)\n    shape.lineFormat.transparency = 0.5;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "weight",
      "type": "number",
      "description": "Specifies the thickness of the line in points.",
      "since": "WordApi BETA (PREVIEW ONLY)",
      "examples": [
        {
          "description": "Set the thickness of a shape's border line to 3 points",
          "usage_code": "await Word.run(async (context) => {\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getItem(0);\n    \n    // Set the line weight to 3 points\n    shape.lineFormat.weight = 3;\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.LineFormatLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.LineFormat",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.LineFormat",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "{ select?: string; expand?: string; }",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.LineFormat",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and read the line color and weight properties of the first shape's border in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const firstShape = shapes.getFirst();\n    const lineFormat = firstShape.lineFormat;\n    \n    // Load specific properties of the line format\n    lineFormat.load(\"color, weight\");\n    \n    // Sync to execute the load command\n    await context.sync();\n    \n    // Now we can read the loaded properties\n    console.log(\"Line color: \" + lineFormat.color);\n    console.log(\"Line weight: \" + lineFormat.weight);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "set",
      "kind": "configure",
      "description": "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.",
      "signatures": [
        {
          "params": [
            {
              "name": "properties",
              "type": "Interfaces.LineFormatUpdateData",
              "required": true,
              "description": "A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called."
            },
            {
              "name": "options",
              "type": "OfficeExtension.UpdateOptions",
              "required": false,
              "description": "Provides an option to suppress errors if the properties object tries to set any read-only properties."
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "properties",
              "type": "Word.LineFormat",
              "required": true,
              "description": null
            }
          ],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Format a shape's border by setting multiple line properties at once, including color, weight, and dash style.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    shapes.load(\"items\");\n    await context.sync();\n    \n    const shape = shapes.items[0];\n    const lineFormat = shape.line;\n    \n    // Set multiple line format properties at once\n    lineFormat.set({\n        color: \"#FF0000\",\n        weight: 3,\n        dashStyle: Word.ShapeLineDashStyle.dash,\n        visible: true\n    });\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify().",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.LineFormatData",
            "description": "Whereas the original Word.LineFormat object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.LineFormatData) that contains shallow copies of any loaded child properties from the original object."
          }
        }
      ],
      "examples": [
        {
          "description": "Get the line format properties of a shape's border as a JSON object and log it to the console for inspection.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Get the line format of the shape's border\n    const lineFormat = shape.line;\n    \n    // Load properties to inspect\n    lineFormat.load(\"color,weight,dashStyle,visible\");\n    \n    await context.sync();\n    \n    // Convert the line format to JSON\n    const lineFormatJSON = lineFormat.toJSON();\n    \n    // Log the JSON representation\n    console.log(\"Line Format Properties:\", lineFormatJSON);\n    console.log(\"Color:\", lineFormatJSON.color);\n    console.log(\"Weight:\", lineFormatJSON.weight);\n    console.log(\"Dash Style:\", lineFormatJSON.dashStyle);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.LineFormat",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Format a shape's border with a red color and track the border's line format to automatically adjust when the document changes",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Get the line format (border) of the shape\n    const lineFormat = shape.line;\n    \n    // Track the line format for automatic adjustment\n    lineFormat.track();\n    \n    // Set border color to red\n    lineFormat.color = \"red\";\n    lineFormat.weight = 2;\n    \n    await context.sync();\n    \n    console.log(\"Line format is now tracked and will adjust automatically\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.LineFormat",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Release memory for a line format object after modifying a shape's border properties to optimize memory usage in a long-running add-in.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first shape in the document\n    const shapes = context.document.body.shapes;\n    const shape = shapes.getFirst();\n    \n    // Get the line format and track it\n    const lineFormat = shape.line;\n    lineFormat.load(\"color,weight\");\n    \n    await context.sync();\n    \n    // Modify the line format properties\n    lineFormat.color = \"blue\";\n    lineFormat.weight = 3;\n    \n    await context.sync();\n    \n    // Release the memory associated with the line format object\n    lineFormat.untrack();\n    \n    console.log(\"Line format modified and memory released\");\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word/word.lineformat"
    ]
  }
}