{
  "class": {
    "name": "PaneCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApiDesktop",
      "status": "1.2"
    },
    "description": "Represents the collection of pane.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a PaneCollection to verify the connection between the add-in and Word application before performing pane operations.",
          "usage_code": "await Word.run(async (context) => {\n    const panes = context.document.panes;\n    \n    // Access the request context associated with the PaneCollection\n    const requestContext = panes.context;\n    \n    // Verify the context is properly connected\n    if (requestContext) {\n        console.log(\"PaneCollection is connected to Word application\");\n        \n        // Load pane properties using the context\n        panes.load(\"items\");\n        await context.sync();\n        \n        console.log(`Number of panes: ${panes.items.length}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Pane[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all loaded panes in the document and log the count of available panes to the console.",
          "usage_code": "await Word.run(async (context) => {\n    const panes = context.document.panes;\n    panes.load(\"items\");\n    \n    await context.sync();\n    \n    console.log(`Number of panes: ${panes.items.length}`);\n    \n    // Access individual panes from the items array\n    panes.items.forEach((pane, index) => {\n        console.log(`Pane ${index + 1} found`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first pane in this collection. Throws an `ItemNotFound` error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Pane",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the first pane in the document and activate it to bring it into focus.",
          "usage_code": "await Word.run(async (context) => {\n    const panes = context.document.panes;\n    const firstPane = panes.getFirst();\n    \n    firstPane.activate();\n    \n    await context.sync();\n    console.log(\"First pane has been activated\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first pane in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Pane",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if any panes exist in the document and display the first pane's view type, or handle the case when no panes are available.",
          "usage_code": "await Word.run(async (context) => {\n    const panes = context.document.panes;\n    const firstPane = panes.getFirstOrNullObject();\n    firstPane.load(\"isNullObject, view/type\");\n    \n    await context.sync();\n    \n    if (firstPane.isNullObject) {\n        console.log(\"No panes available in the document.\");\n    } else {\n        console.log(\"First pane view type: \" + firstPane.view.type);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.PaneCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.PaneCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the count of panes in the active Word document",
          "usage_code": "await Word.run(async (context) => {\n    const panes = context.document.panes;\n    \n    // Load the count property of the pane collection\n    panes.load(\"count\");\n    \n    await context.sync();\n    \n    console.log(`Number of panes: ${panes.count}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.PaneCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.PaneCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.PaneCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize the panes collection to a JSON object for logging or debugging purposes",
          "usage_code": "await Word.run(async (context) => {\n    // Get the panes collection from the document\n    const panes = context.document.panes;\n    \n    // Load the panes collection with their properties\n    panes.load(\"items\");\n    \n    await context.sync();\n    \n    // Convert the panes collection to a plain JavaScript object\n    const panesJSON = panes.toJSON();\n    \n    // Log the JSON representation\n    console.log(\"Panes collection as JSON:\", JSON.stringify(panesJSON, null, 2));\n    \n    // You can now work with the plain JavaScript object\n    console.log(`Number of panes: ${panesJSON.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.PaneCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a pane object to maintain its reference across multiple sync calls when working with document panes in a Word add-in.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the pane collection\n    const panes = context.document.panes;\n    \n    // Load the first pane\n    const firstPane = panes.getFirst();\n    firstPane.load(\"id\");\n    await context.sync();\n    \n    // Track the pane object to use it across multiple sync calls\n    firstPane.track();\n    \n    // Perform additional operations that require sync\n    firstPane.load(\"view/zoom\");\n    await context.sync();\n    \n    console.log(\"Pane ID: \" + firstPane.id);\n    console.log(\"Pane zoom: \" + firstPane.view.zoom);\n    \n    // Untrack when done to free up memory\n    firstPane.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.PaneCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Access panes in a document, track them for performance optimization, then release the tracked objects when done to free memory.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the panes collection and load its properties\n    const panes = context.document.panes;\n    panes.load(\"items\");\n    \n    await context.sync();\n    \n    // Track the panes collection for performance\n    panes.track();\n    \n    // Perform operations with the panes\n    console.log(`Number of panes: ${panes.items.length}`);\n    \n    // When done, untrack to release memory\n    panes.untrack();\n    \n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word"
    ]
  }
}