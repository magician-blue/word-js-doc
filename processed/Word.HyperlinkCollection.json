{
  "class": {
    "name": "Word.HyperlinkCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Contains a collection of Word.Hyperlink objects.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a hyperlink collection to verify the connection between the add-in and Word before performing operations on hyperlinks in the document.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the hyperlink collection from the document body\n    const hyperlinkCollection = context.document.body.hyperlinks;\n    \n    // Access the request context associated with the hyperlink collection\n    const requestContext = hyperlinkCollection.context;\n    \n    // Verify the context is valid by checking if it matches the current context\n    if (requestContext === context) {\n        console.log(\"Request context is properly connected to Word\");\n        \n        // Now safe to perform operations using this context\n        hyperlinkCollection.load(\"items\");\n        await context.sync();\n        \n        console.log(`Found ${hyperlinkCollection.items.length} hyperlinks`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Hyperlink[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all hyperlinks in the document and log their display text and addresses to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the hyperlinks collection from the document body\n    const hyperlinks = context.document.body.hyperlinks;\n    \n    // Load the items property to access the array of hyperlinks\n    hyperlinks.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the loaded hyperlinks through the items property\n    const hyperlinkItems = hyperlinks.items;\n    \n    // Log information about each hyperlink\n    for (let i = 0; i < hyperlinkItems.length; i++) {\n        hyperlinkItems[i].load(\"textToDisplay, address\");\n    }\n    \n    await context.sync();\n    \n    hyperlinkItems.forEach((hyperlink, index) => {\n        console.log(`Hyperlink ${index + 1}: \"${hyperlink.textToDisplay}\" -> ${hyperlink.address}`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Returns a Hyperlink object that represents a new hyperlink added to a range, selection, or document.",
      "signatures": [
        {
          "params": [
            {
              "name": "anchor",
              "type": "Word.Range",
              "required": true,
              "description": "The range to which the hyperlink is added."
            },
            {
              "name": "options",
              "type": "Word.HyperlinkAddOptions",
              "required": false,
              "description": "The options to further configure the new hyperlink."
            }
          ],
          "returns": {
            "type": "Word.Hyperlink",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Add a hyperlink to the selected text that links to a website",
          "usage_code": "await Word.run(async (context) => {\n    // Get the current selection\n    const selection = context.document.getSelection();\n    \n    // Add a hyperlink to the selection\n    const hyperlink = selection.hyperlinks.add(\n        selection,\n        {\n            address: \"https://www.example.com\",\n            screenTip: \"Visit Example Website\"\n        }\n    );\n    \n    await context.sync();\n    \n    console.log(\"Hyperlink added successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call context.sync() before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.HyperlinkCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.HyperlinkCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.HyperlinkCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.HyperlinkCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the text and address of all hyperlinks in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get all hyperlinks in the document body\n    const hyperlinks = context.document.body.hyperlinks;\n    \n    // Load the text and address properties of all hyperlinks\n    hyperlinks.load(\"text, address\");\n    \n    await context.sync();\n    \n    // Display the hyperlink information\n    console.log(`Found ${hyperlinks.items.length} hyperlinks:`);\n    hyperlinks.items.forEach((hyperlink, index) => {\n        console.log(`${index + 1}. Text: \"${hyperlink.text}\", Address: ${hyperlink.address}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript toJSON() method in order to provide more useful output when an API object is passed to JSON.stringify(). (JSON.stringify, in turn, calls the toJSON method of the object that's passed to it.) Whereas the original Word.HyperlinkCollection object is an API object, the toJSON method returns a plain JavaScript object (typed as Word.Interfaces.HyperlinkCollectionData) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.HyperlinkCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export all hyperlinks in the document to a JSON string for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get all hyperlinks in the document\n    const hyperlinks = context.document.body.getHyperlinks();\n    \n    // Load the properties we want to export\n    hyperlinks.load(\"items/address, items/screenTip, items/textToDisplay\");\n    \n    await context.sync();\n    \n    // Convert the hyperlink collection to a plain JavaScript object\n    const hyperlinkData = hyperlinks.toJSON();\n    \n    // Convert to JSON string for logging or storage\n    const jsonString = JSON.stringify(hyperlinkData, null, 2);\n    \n    console.log(\"Hyperlinks as JSON:\", jsonString);\n    \n    // Example: You could also access the items array directly\n    console.log(`Found ${hyperlinkData.items.length} hyperlinks`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you're using this object across .sync calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.HyperlinkCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track all hyperlinks in the document across multiple sync calls to monitor and update their properties without encountering InvalidObjectPath errors.",
          "usage_code": "await Word.run(async (context) => {\n    const hyperlinks = context.document.body.hyperlinks;\n    hyperlinks.load(\"items\");\n    await context.sync();\n    \n    // Track the collection to use it across multiple sync calls\n    hyperlinks.track();\n    \n    // First sync - get initial count\n    await context.sync();\n    console.log(`Found ${hyperlinks.items.length} hyperlinks`);\n    \n    // Second sync - can still access the collection safely\n    await context.sync();\n    \n    // Load properties of each hyperlink\n    for (let i = 0; i < hyperlinks.items.length; i++) {\n        hyperlinks.items[i].load(\"address, text\");\n    }\n    await context.sync();\n    \n    // Display hyperlink information\n    hyperlinks.items.forEach((hyperlink, index) => {\n        console.log(`Hyperlink ${index + 1}: ${hyperlink.text} -> ${hyperlink.address}`);\n    });\n    \n    // Untrack when done\n    hyperlinks.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.HyperlinkCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load all hyperlinks in the document, process them to get their URLs, then untrack the collection to free memory.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the hyperlink collection from the document body\n    const hyperlinks = context.document.body.hyperlinks;\n    \n    // Track the collection for memory management\n    hyperlinks.track();\n    \n    // Load the hyperlink properties\n    hyperlinks.load(\"items\");\n    \n    await context.sync();\n    \n    // Process the hyperlinks (e.g., log their URLs)\n    for (let i = 0; i < hyperlinks.items.length; i++) {\n        console.log(`Hyperlink ${i + 1}: ${hyperlinks.items[i].address}`);\n    }\n    \n    // Release the memory associated with the tracked collection\n    hyperlinks.untrack();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word/word.hyperlinkcollection",
      "https://learn.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets"
    ]
  }
}