{
  "class": {
    "name": "TabStopCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "BETA (PREVIEW ONLY)"
    },
    "description": "Represents a collection of [tab stops](/en-us/javascript/api/word/word.tabstop) in a Word document.",
    "examples": []
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a TabStopCollection to verify the connection between the add-in and Word, then use it to load and log tab stop information.",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const tabStops = paragraph.tabStops;\n    \n    // Access the request context associated with the TabStopCollection\n    const tabStopContext = tabStops.context;\n    \n    // Use the context to load properties\n    tabStops.load(\"items\");\n    await tabStopContext.sync();\n    \n    // Log the number of tab stops using the context connection\n    console.log(`Number of tab stops: ${tabStops.items.length}`);\n    console.log(`Context is connected: ${tabStopContext !== null}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.TabStop[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Iterate through all tab stops in the first paragraph and log their position and alignment type to the console.",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const tabStops = paragraph.tabStops;\n    \n    // Load the tab stops collection\n    tabStops.load(\"items\");\n    await context.sync();\n    \n    // Access the loaded tab stops using the items property\n    const tabStopItems = tabStops.items;\n    \n    console.log(`Found ${tabStopItems.length} tab stops`);\n    \n    for (let i = 0; i < tabStopItems.length; i++) {\n        const tabStop = tabStopItems[i];\n        tabStop.load(\"position, alignment\");\n    }\n    \n    await context.sync();\n    \n    // Log details of each tab stop\n    tabStopItems.forEach((tabStop, index) => {\n        console.log(`Tab Stop ${index + 1}: Position = ${tabStop.position}, Alignment = ${tabStop.alignment}`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "add",
      "kind": "create",
      "description": "Returns a `TabStop` object that represents a custom tab stop added to the paragraph.",
      "signatures": [
        {
          "params": [
            {
              "name": "position",
              "type": "number",
              "required": true,
              "description": "The position of the tab stop."
            },
            {
              "name": "options",
              "type": "Word.TabStopAddOptions",
              "required": false,
              "description": "Optional. The options to further configure the new tab stop."
            }
          ],
          "returns": {
            "type": "Word.TabStop",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Add a custom tab stop at 3 inches (216 points) to the first paragraph with left alignment",
          "usage_code": "await Word.run(async (context) => {\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    \n    // Add a tab stop at 3 inches (216 points) with left alignment\n    firstParagraph.tabStops.add(216, { alignment: Word.Alignment.left });\n    \n    await context.sync();\n    console.log(\"Tab stop added successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "after",
      "kind": "read",
      "description": "Returns the next `TabStop` object to the right of the specified position.",
      "signatures": [
        {
          "params": [
            {
              "name": "Position",
              "type": "number",
              "required": true,
              "description": "The position to check."
            }
          ],
          "returns": {
            "type": "Word.TabStop",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Find and highlight the next tab stop that appears after the 2-inch position in the first paragraph",
          "usage_code": "await Word.run(async (context) => {\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    const tabStops = firstParagraph.paragraphFormat.tabStops;\n    \n    // Get the next tab stop after the 2-inch position (144 points)\n    const nextTabStop = tabStops.after(144);\n    \n    // Load the position property to verify\n    nextTabStop.load(\"position\");\n    \n    await context.sync();\n    \n    console.log(`Next tab stop after 2 inches is at: ${nextTabStop.position} points`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "before",
      "kind": "read",
      "description": "Returns the next `TabStop` object to the left of the specified position.",
      "signatures": [
        {
          "params": [
            {
              "name": "Position",
              "type": "number",
              "required": true,
              "description": "The position to check."
            }
          ],
          "returns": {
            "type": "Word.TabStop",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Find and highlight the tab stop that appears immediately before the 3-inch position in the first paragraph",
          "usage_code": "await Word.run(async (context) => {\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    const tabStops = firstParagraph.paragraphFormat.tabStops;\n    \n    // Get the tab stop before the 3-inch position (216 points)\n    const tabStopBefore = tabStops.before(216);\n    \n    tabStopBefore.load(\"position,alignment\");\n    await context.sync();\n    \n    console.log(`Found tab stop at ${tabStopBefore.position} points with ${tabStopBefore.alignment} alignment`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "clearAll",
      "kind": "delete",
      "description": "Clears all the custom tab stops from the paragraph.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "void",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Remove all custom tab stops from the first paragraph in the document to reset its tab formatting to default settings.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph in the document\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get the tab stop collection for the paragraph\n    const tabStops = paragraph.tabStops;\n    \n    // Clear all custom tab stops\n    tabStops.clearAll();\n    \n    await context.sync();\n    \n    console.log(\"All custom tab stops have been cleared from the paragraph.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getItem",
      "kind": "read",
      "description": "Gets a `TabStop` object by its index in the collection.",
      "signatures": [
        {
          "params": [
            {
              "name": "index",
              "type": "number",
              "required": true,
              "description": "A number that identifies the index location of a `TabStop` object."
            }
          ],
          "returns": {
            "type": "Word.TabStop",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the second tab stop from the first paragraph and change its alignment to center",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph in the document\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get the tab stops collection\n    const tabStops = paragraph.tabStops;\n    \n    // Get the second tab stop (index 1)\n    const secondTabStop = tabStops.getItem(1);\n    \n    // Change its alignment to center\n    secondTabStop.alignment = Word.Alignment.center;\n    \n    // Load properties to verify\n    secondTabStop.load(\"position,alignment\");\n    \n    await context.sync();\n    \n    console.log(`Tab stop at position ${secondTabStop.position} is now ${secondTabStop.alignment}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.TabStopCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.TabStopCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.TabStopCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.TabStopCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the position and alignment of all tab stops in the first paragraph",
          "usage_code": "await Word.run(async (context) => {\n    const firstParagraph = context.document.body.paragraphs.getFirst();\n    const tabStops = firstParagraph.tabStops;\n    \n    // Load properties of the tab stop collection\n    tabStops.load(\"items/position, items/alignment\");\n    \n    await context.sync();\n    \n    // Display the tab stop information\n    console.log(`Found ${tabStops.items.length} tab stops:`);\n    tabStops.items.forEach((tabStop, index) => {\n        console.log(`Tab Stop ${index + 1}: Position = ${tabStop.position}, Alignment = ${tabStop.alignment}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.TabStopCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TabStopCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.TabStopCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Serialize tab stop collection data to JSON format for logging or external storage",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph\n    const paragraph = context.document.body.paragraphs.getFirst();\n    \n    // Get the tab stops collection\n    const tabStops = paragraph.paragraphFormat.tabStops;\n    \n    // Load the tab stops properties\n    tabStops.load(\"items\");\n    \n    await context.sync();\n    \n    // Convert the tab stops collection to a plain JavaScript object\n    const tabStopsData = tabStops.toJSON();\n    \n    // Log the serialized data\n    console.log(\"Tab Stops Data:\", JSON.stringify(tabStopsData, null, 2));\n    \n    // The tabStopsData object contains an \"items\" array with tab stop properties\n    console.log(`Number of tab stops: ${tabStopsData.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TabStopCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track tab stops in a paragraph across multiple sync calls to safely modify them without getting InvalidObjectPath errors",
          "usage_code": "await Word.run(async (context) => {\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const tabStops = paragraph.tabStops;\n    \n    // Track the tab stops collection to use it across multiple sync calls\n    tabStops.track();\n    \n    await context.sync();\n    \n    // Now we can safely work with the tracked object across sync calls\n    tabStops.add(144, Word.Alignment.left); // Add tab at 2 inches\n    \n    await context.sync();\n    \n    // Still safe to use the tabStops object\n    tabStops.add(288, Word.Alignment.center); // Add tab at 4 inches\n    \n    await context.sync();\n    \n    // Clean up tracking when done\n    tabStops.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.TabStopCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load tab stops from a paragraph, use them to display information, then untrack the collection to free memory",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first paragraph\n    const paragraph = context.document.body.paragraphs.getFirst();\n    const tabStops = paragraph.tabStops;\n    \n    // Load the tab stops collection\n    tabStops.load(\"items\");\n    await context.sync();\n    \n    // Use the tab stops data\n    console.log(`Found ${tabStops.items.length} tab stops`);\n    \n    // Untrack the collection to release memory\n    tabStops.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "/en-us/javascript/api/word"
    ]
  }
}