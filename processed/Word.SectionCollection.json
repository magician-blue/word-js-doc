{
  "class": {
    "name": "Word.SectionCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.1"
    },
    "description": "Contains the collection of the document's [Word.Section](https://learn.microsoft.com/en-us/javascript/api/word/word.section) objects.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-section-breaks.yaml\n\n// Inserts a section break on the next even page.\nawait Word.run(async (context) => {\n  const body: Word.Body = context.document.body;\n  body.insertBreak(Word.BreakType.sectionEven, Word.InsertLocation.end);\n\n  await context.sync();\n\n  console.log(\"Inserted section break on next even page.\");\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a SectionCollection to verify the connection between the add-in and Word application before performing section operations.",
          "usage_code": "await Word.run(async (context) => {\n    const sections = context.document.sections;\n    sections.load(\"items\");\n    await context.sync();\n    \n    // Access the request context associated with the SectionCollection\n    const requestContext = sections.context;\n    \n    // Verify the context is valid and connected\n    if (requestContext) {\n        console.log(\"SectionCollection is connected to Word application\");\n        console.log(`Number of sections: ${sections.items.length}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.Section[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Get all sections in the document and log the count of sections to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the section collection from the document\n    const sections = context.document.sections;\n    \n    // Load the items property to access the array of sections\n    sections.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the loaded sections array and log the count\n    console.log(`Total sections in document: ${sections.items.length}`);\n    \n    // Optionally, iterate through each section\n    sections.items.forEach((section, index) => {\n        console.log(`Section ${index + 1} found`);\n    });\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first section in this collection. Throws an `ItemNotFound` error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Section",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Get the first section of the document and change its page margins to 1 inch on all sides.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the first section in the document\n    const firstSection = context.document.sections.getFirst();\n    \n    // Set page margins to 1 inch (72 points = 1 inch)\n    firstSection.pageSetup.topMargin = 72;\n    firstSection.pageSetup.bottomMargin = 72;\n    firstSection.pageSetup.leftMargin = 72;\n    firstSection.pageSetup.rightMargin = 72;\n    \n    await context.sync();\n    \n    console.log(\"First section margins updated successfully\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first section in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](https://learn.microsoft.com/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Section",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if the document has any sections and display the first section's header text, or show a message if no sections exist",
          "usage_code": "await Word.run(async (context) => {\n    const sections = context.document.sections;\n    const firstSection = sections.getFirstOrNullObject();\n    firstSection.load(\"isNullObject\");\n    \n    await context.sync();\n    \n    if (firstSection.isNullObject) {\n        console.log(\"No sections found in the document.\");\n    } else {\n        const header = firstSection.getHeader(Word.HeaderFooterType.primary);\n        header.load(\"text\");\n        await context.sync();\n        \n        console.log(\"First section header text: \" + header.text);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.SectionCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.SectionCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.SectionCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.SectionCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the body text of all sections in the document",
          "usage_code": "await Word.run(async (context) => {\n    // Get all sections in the document\n    const sections = context.document.sections;\n    \n    // Load the body text property for all sections\n    sections.load(\"items/body/text\");\n    \n    // Synchronize to execute the load command\n    await context.sync();\n    \n    // Display the text from each section\n    sections.items.forEach((section, index) => {\n        console.log(`Section ${index + 1}: ${section.body.text}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.SectionCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SectionCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.SectionCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export section information to JSON format for logging or external processing",
          "usage_code": "await Word.run(async (context) => {\n    // Get all sections in the document\n    const sections = context.document.sections;\n    \n    // Load properties we want to export\n    sections.load(\"items/body/text\");\n    \n    await context.sync();\n    \n    // Convert the section collection to a plain JavaScript object\n    const sectionsJSON = sections.toJSON();\n    \n    // Now you can use the plain object (e.g., log it, send to server, etc.)\n    console.log(\"Section data:\", JSON.stringify(sectionsJSON, null, 2));\n    console.log(`Total sections: ${sectionsJSON.items.length}`);\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.SectionCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Access and modify section properties across multiple sync calls by tracking the section collection to avoid \"InvalidObjectPath\" errors.",
          "usage_code": "await Word.run(async (context) => {\n    const sections = context.document.sections;\n    sections.load(\"items\");\n    await context.sync();\n    \n    // Track the collection to use it across multiple sync calls\n    sections.track();\n    \n    // First sync - get section count\n    console.log(`Document has ${sections.items.length} section(s)`);\n    await context.sync();\n    \n    // Second sync - modify sections (tracking prevents InvalidObjectPath error)\n    for (let i = 0; i < sections.items.length; i++) {\n        const section = sections.items[i];\n        section.body.insertParagraph(`Modified section ${i + 1}`, Word.InsertLocation.start);\n    }\n    await context.sync();\n    \n    // Clean up tracking when done\n    sections.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.SectionCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Process all document sections to get their headers, then untrack the section collection to free memory after use.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the section collection and track it\n    const sections = context.document.sections;\n    sections.load(\"items\");\n    await context.sync();\n    \n    // Process the sections (e.g., get header count)\n    console.log(`Document has ${sections.items.length} sections`);\n    \n    // Untrack the section collection to release memory\n    sections.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://learn.microsoft.com/en-us/javascript/api/word/word.sectioncollection"
    ]
  }
}