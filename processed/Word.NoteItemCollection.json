{
  "class": {
    "name": "Word.NoteItemCollection",
    "package": "word",
    "extends": [
      "OfficeExtension.ClientObject"
    ],
    "api_set": {
      "name": "WordApi",
      "status": "1.5"
    },
    "description": "Contains a collection of [Word.NoteItem](/en-us/javascript/api/word/word.noteitem) objects.",
    "examples": [
      {
        "description": null,
        "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml\n\n// Gets the first footnote in the document body and select its reference mark.\nawait Word.run(async (context) => {\n  const reference: Word.Range = context.document.body.footnotes.getFirst().reference;\n  reference.select();\n  console.log(\"The first footnote is selected.\");\n});",
        "output_code": null
      }
    ]
  },
  "properties": [
    {
      "name": "context",
      "type": "RequestContext",
      "description": "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
      "since": null,
      "examples": [
        {
          "description": "Access the request context from a NoteItemCollection to synchronize footnote data with the Office host application.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the footnotes collection from the document body\n    const footnotes = context.document.body.footnotes;\n    \n    // Access the request context from the collection\n    const requestContext = footnotes.context;\n    \n    // Use the context to load properties and sync with the host\n    footnotes.load(\"items\");\n    await requestContext.sync();\n    \n    // Now we can work with the loaded footnote items\n    console.log(`Number of footnotes: ${footnotes.items.length}`);\n    \n    for (let i = 0; i < footnotes.items.length; i++) {\n        console.log(`Footnote ${i + 1} reference: ${footnotes.items[i].reference}`);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "items",
      "type": "Word.NoteItem[]",
      "description": "Gets the loaded child items in this collection.",
      "since": null,
      "examples": [
        {
          "description": "Iterate through all footnote items in the document and log their reference text to the console.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the footnotes collection from the document body\n    const footnotes = context.document.body.footnotes;\n    \n    // Load the items property to access the array of footnote items\n    footnotes.load(\"items\");\n    \n    await context.sync();\n    \n    // Access the items array and iterate through each footnote\n    const footnoteItems = footnotes.items;\n    \n    for (let i = 0; i < footnoteItems.length; i++) {\n        footnoteItems[i].load(\"reference\");\n        await context.sync();\n        \n        console.log(`Footnote ${i + 1}: ${footnoteItems[i].reference}`);\n    }\n});",
          "output_code": null
        }
      ]
    }
  ],
  "methods": [
    {
      "name": "getFirst",
      "kind": "read",
      "description": "Gets the first note item in this collection. Throws an `ItemNotFound` error if this collection is empty.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.NoteItem",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Select the reference mark of the first footnote in the document body.",
          "usage_code": "// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml\n\n// Gets the first footnote in the document body and select its reference mark.\nawait Word.run(async (context) => {\n  const reference: Word.Range = context.document.body.footnotes.getFirst().reference;\n  reference.select();\n  console.log(\"The first footnote is selected.\");\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "getFirstOrNullObject",
      "kind": "read",
      "description": "Gets the first note item in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see [*OrNullObject methods and properties](/en-us/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties).",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.NoteItem",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Check if a document has any footnotes and display the text of the first footnote if it exists",
          "usage_code": "await Word.run(async (context) => {\n    const footnotes = context.document.body.footnotes;\n    const firstFootnote = footnotes.getFirstOrNullObject();\n    firstFootnote.load(\"isNullObject, body/text\");\n    \n    await context.sync();\n    \n    if (firstFootnote.isNullObject) {\n        console.log(\"No footnotes found in the document.\");\n    } else {\n        console.log(\"First footnote text: \" + firstFootnote.body.text);\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "load",
      "kind": "load",
      "description": "Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.",
      "signatures": [
        {
          "params": [
            {
              "name": "options",
              "type": "Word.Interfaces.NoteItemCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions",
              "required": false,
              "description": "Provides options for which properties of the object to load."
            }
          ],
          "returns": {
            "type": "Word.NoteItemCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNames",
              "type": "string | string[]",
              "required": false,
              "description": "A comma-delimited string or an array of strings that specify the properties to load."
            }
          ],
          "returns": {
            "type": "Word.NoteItemCollection",
            "description": null
          }
        },
        {
          "params": [
            {
              "name": "propertyNamesAndPaths",
              "type": "OfficeExtension.LoadOption",
              "required": false,
              "description": "`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load."
            }
          ],
          "returns": {
            "type": "Word.NoteItemCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load and display the text content of all footnote items in the active document",
          "usage_code": "await Word.run(async (context) => {\n    // Get the footnotes collection from the document body\n    const footnotes = context.document.body.footnotes;\n    \n    // Load the items collection with their body text property\n    footnotes.load(\"items\");\n    await context.sync();\n    \n    // Access the note items and load their text\n    const noteItems = footnotes.items;\n    noteItems.load(\"body/text\");\n    await context.sync();\n    \n    // Display the footnote text\n    noteItems.items.forEach((noteItem, index) => {\n        console.log(`Footnote ${index + 1}: ${noteItem.body.text}`);\n    });\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "toJSON",
      "kind": "serialize",
      "description": "Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.) Whereas the original `Word.NoteItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.NoteItemCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.Interfaces.NoteItemCollectionData",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Export footnote items to JSON format for logging or external processing",
          "usage_code": "await Word.run(async (context) => {\n    // Get the footnotes collection from the document body\n    const footnotes = context.document.body.footnotes;\n    \n    // Load the footnote items\n    footnotes.load(\"items\");\n    await context.sync();\n    \n    // Get the note items collection\n    const noteItems = footnotes.items[0]?.body.noteItems;\n    \n    if (noteItems) {\n        // Load properties of the note items\n        noteItems.load(\"type\");\n        await context.sync();\n        \n        // Convert the collection to a plain JavaScript object\n        const noteItemsData = noteItems.toJSON();\n        \n        // Log or process the JSON data\n        console.log(\"Note Items Data:\", JSON.stringify(noteItemsData, null, 2));\n    }\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "track",
      "kind": "track",
      "description": "Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for [context.trackedObjects.add(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). If you're using this object across `.sync` calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.NoteItemCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Track a collection of footnote items to maintain references across multiple sync calls when processing document notes",
          "usage_code": "await Word.run(async (context) => {\n    // Get the body of the document\n    const body = context.document.body;\n    \n    // Get all footnotes in the document\n    const footnotes = body.footnotes;\n    context.load(footnotes);\n    await context.sync();\n    \n    // Track the footnote collection to use it across multiple sync calls\n    footnotes.track();\n    \n    // First sync - load footnote properties\n    footnotes.load(\"items\");\n    await context.sync();\n    \n    // Process footnotes (e.g., modify their content)\n    for (let i = 0; i < footnotes.items.length; i++) {\n        const footnote = footnotes.items[i];\n        footnote.body.insertText(`[Note ${i + 1}] `, \"Start\");\n    }\n    \n    // Second sync - apply changes\n    await context.sync();\n    \n    // Untrack when done to free up memory\n    footnotes.untrack();\n});",
          "output_code": null
        }
      ]
    },
    {
      "name": "untrack",
      "kind": "untrack",
      "description": "Release the memory associated with this object, if it has previously been tracked. This call is shorthand for [context.trackedObjects.remove(thisObject)](/en-us/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.",
      "signatures": [
        {
          "params": [],
          "returns": {
            "type": "Word.NoteItemCollection",
            "description": null
          }
        }
      ],
      "examples": [
        {
          "description": "Load footnote items from a document, process them, then untrack the collection to free memory after use.",
          "usage_code": "await Word.run(async (context) => {\n    // Get the footnotes collection from the document body\n    const footnotes = context.document.body.footnotes;\n    footnotes.load(\"items\");\n    await context.sync();\n    \n    // Get the note items collection from the first footnote\n    const noteItems = footnotes.items[0].body.noteItems;\n    noteItems.load(\"type\");\n    \n    // Track the collection for processing\n    noteItems.track();\n    await context.sync();\n    \n    // Process the note items (e.g., log their types)\n    console.log(`Found ${noteItems.items.length} note items`);\n    \n    // Untrack the collection to release memory after we're done\n    noteItems.untrack();\n    await context.sync();\n});",
          "output_code": null
        }
      ]
    }
  ],
  "source": {
    "urls": [
      "https://docs.microsoft.com/en-us/javascript/api/word",
      "https://docs.microsoft.com/en-us/javascript/api/requirement-sets/word/word-api-requirement-sets",
      "https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml"
    ]
  }
}